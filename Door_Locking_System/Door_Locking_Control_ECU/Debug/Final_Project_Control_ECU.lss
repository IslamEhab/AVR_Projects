
Final_Project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000031dc  00003270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  00003278  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00003278  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001512  00000000  00000000  00006344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000974f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a63a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b7d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 0c 14 	jmp	0x2818	; 0x2818 <__vector_3>
      10:	0c 94 d9 13 	jmp	0x27b2	; 0x27b2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__vector_6>
      1c:	0c 94 a6 13 	jmp	0x274c	; 0x274c <__vector_7>
      20:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__vector_8>
      24:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ed       	ldi	r30, 0xDC	; 220
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <main>
      8a:	0c 94 ec 18 	jmp	0x31d8	; 0x31d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 dd 18 	jmp	0x31ba	; 0x31ba <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e1 18 	jmp	0x31c2	; 0x31c2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <mai2n>:

#include "micro_config.h"
#include "external_eeprom.h"

int mai2n(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 val = 0;
     b5a:	1f 86       	std	Y+15, r1	; 0x0f
	
	DDRD  = 0xFF;
     b5c:	e1 e3       	ldi	r30, 0x31	; 49
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	80 83       	st	Z, r24
	PORTD = 0x00;
     b64:	e2 e3       	ldi	r30, 0x32	; 50
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1

	/* Init EEPROM */
	EEPROM_init();
     b6a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <EEPROM_init>

	EEPROM_writeByte(0x0311, 0x1F); /* Write 0x0F in the external EEPROM */
     b6e:	81 e1       	ldi	r24, 0x11	; 17
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	6f e1       	ldi	r22, 0x1F	; 31
     b74:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EEPROM_writeByte>
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	a0 e2       	ldi	r26, 0x20	; 32
     b7e:	b1 e4       	ldi	r27, 0x41	; 65
     b80:	8b 87       	std	Y+11, r24	; 0x0b
     b82:	9c 87       	std	Y+12, r25	; 0x0c
     b84:	ad 87       	std	Y+13, r26	; 0x0d
     b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b88:	6b 85       	ldd	r22, Y+11	; 0x0b
     b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a ef       	ldi	r20, 0xFA	; 250
     b96:	54 e4       	ldi	r21, 0x44	; 68
     b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	8f 83       	std	Y+7, r24	; 0x07
     ba2:	98 87       	std	Y+8, r25	; 0x08
     ba4:	a9 87       	std	Y+9, r26	; 0x09
     ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ba8:	6f 81       	ldd	r22, Y+7	; 0x07
     baa:	78 85       	ldd	r23, Y+8	; 0x08
     bac:	89 85       	ldd	r24, Y+9	; 0x09
     bae:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <mai2n+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e 83       	std	Y+6, r25	; 0x06
     bc6:	8d 83       	std	Y+5, r24	; 0x05
     bc8:	3f c0       	rjmp	.+126    	; 0xc48 <mai2n+0x102>
	else if (__tmp > 65535)
     bca:	6f 81       	ldd	r22, Y+7	; 0x07
     bcc:	78 85       	ldd	r23, Y+8	; 0x08
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	4f e7       	ldi	r20, 0x7F	; 127
     bd8:	57 e4       	ldi	r21, 0x47	; 71
     bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bde:	18 16       	cp	r1, r24
     be0:	4c f5       	brge	.+82     	; 0xc34 <mai2n+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be2:	6b 85       	ldd	r22, Y+11	; 0x0b
     be4:	7c 85       	ldd	r23, Y+12	; 0x0c
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	bc 01       	movw	r22, r24
     bfc:	cd 01       	movw	r24, r26
     bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	9e 83       	std	Y+6, r25	; 0x06
     c08:	8d 83       	std	Y+5, r24	; 0x05
     c0a:	0f c0       	rjmp	.+30     	; 0xc2a <mai2n+0xe4>
     c0c:	88 ec       	ldi	r24, 0xC8	; 200
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <mai2n+0xd2>
     c1c:	9c 83       	std	Y+4, r25	; 0x04
     c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	9e 83       	std	Y+6, r25	; 0x06
     c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	69 f7       	brne	.-38     	; 0xc0c <mai2n+0xc6>
     c32:	14 c0       	rjmp	.+40     	; 0xc5c <mai2n+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c34:	6f 81       	ldd	r22, Y+7	; 0x07
     c36:	78 85       	ldd	r23, Y+8	; 0x08
     c38:	89 85       	ldd	r24, Y+9	; 0x09
     c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <mai2n+0x10e>
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	EEPROM_readByte(0x0311, &val);  /* Read 0x0F from the external EEPROM */
     c5c:	9e 01       	movw	r18, r28
     c5e:	21 5f       	subi	r18, 0xF1	; 241
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	81 e1       	ldi	r24, 0x11	; 17
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	b9 01       	movw	r22, r18
     c68:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
	while(1)
	{
		PORTD = val; /* out the read value from the external EEPROM */
     c6c:	e2 e3       	ldi	r30, 0x32	; 50
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	8f 85       	ldd	r24, Y+15	; 0x0f
     c72:	80 83       	st	Z, r24
     c74:	fb cf       	rjmp	.-10     	; 0xc6c <mai2n+0x126>

00000c76 <Motor_init>:
/*
 * Description: Function to initiate Motor
 * @Param:		None
 * @Return:		None
 */
void Motor_init(void){
     c76:	df 93       	push	r29
     c78:	cf 93       	push	r28
     c7a:	cd b7       	in	r28, 0x3d	; 61
     c7c:	de b7       	in	r29, 0x3e	; 62

	/* H-Bridge Enable */
	MOTOR_DDR |= ( (1 << IN1) | (1 << IN2) );
     c7e:	a4 e3       	ldi	r26, 0x34	; 52
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e3       	ldi	r30, 0x34	; 52
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	88 61       	ori	r24, 0x18	; 24
     c8a:	8c 93       	st	X, r24

	/* Motors Initially in Stop mode */
	MOTOR_PORT &= ~( ( (1 << IN1) | (1 << IN2) ) );
     c8c:	a5 e3       	ldi	r26, 0x35	; 53
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e3       	ldi	r30, 0x35	; 53
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	87 7e       	andi	r24, 0xE7	; 231
     c98:	8c 93       	st	X, r24

}
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <Motor_clockWise>:
/*
 * Description: Function to Rotate Motor Clock Wise
 * @Param:		None
 * @Return:		None
 */
void Motor_clockWise(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62

	MOTOR_PORT &= (~(1 << IN1));
     ca8:	a5 e3       	ldi	r26, 0x35	; 53
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e5 e3       	ldi	r30, 0x35	; 53
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	87 7f       	andi	r24, 0xF7	; 247
     cb4:	8c 93       	st	X, r24
	MOTOR_PORT |= (1 << IN2);
     cb6:	a5 e3       	ldi	r26, 0x35	; 53
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e5 e3       	ldi	r30, 0x35	; 53
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	8c 93       	st	X, r24
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <Motor_antiClockWise>:
/*
 * Description: Function to Rotate Motor Anti Clock Wise
 * @Param:		None
 * @Return:		None
 */
void Motor_antiClockWise(void){
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62

	MOTOR_PORT &= (~(1 << IN2));
     cd2:	a5 e3       	ldi	r26, 0x35	; 53
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e5 e3       	ldi	r30, 0x35	; 53
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8f 7e       	andi	r24, 0xEF	; 239
     cde:	8c 93       	st	X, r24
	MOTOR_PORT |= (1 << IN1);
     ce0:	a5 e3       	ldi	r26, 0x35	; 53
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e5 e3       	ldi	r30, 0x35	; 53
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	88 60       	ori	r24, 0x08	; 8
     cec:	8c 93       	st	X, r24
}
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <Motor_off>:

void Motor_off(void){
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	MOTOR_PORT &= (~(1 << IN2));
     cfc:	a5 e3       	ldi	r26, 0x35	; 53
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e5 e3       	ldi	r30, 0x35	; 53
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	8c 93       	st	X, r24
	MOTOR_PORT &= (~(1 << IN1));
     d0a:	a5 e3       	ldi	r26, 0x35	; 53
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	e5 e3       	ldi	r30, 0x35	; 53
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	87 7f       	andi	r24, 0xF7	; 247
     d16:	8c 93       	st	X, r24
}
     d18:	cf 91       	pop	r28
     d1a:	df 91       	pop	r29
     d1c:	08 95       	ret

00000d1e <EEPROM_init>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void EEPROM_init(void)
{
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	00 d0       	rcall	.+0      	; 0xd24 <EEPROM_init+0x6>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <EEPROM_init+0x8>
     d26:	00 d0       	rcall	.+0      	; 0xd28 <EEPROM_init+0xa>
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
	/* Just Initialize I2C Module */
	TWI_ConfigType twi_Struct;

	twi_Struct.Address		 = ADDRESS_OF_MC_IN_SLAVE_MODE;
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	89 83       	std	Y+1, r24	; 0x01
	twi_Struct.BitRate		 = FAST_MODE_400KB;
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	9a e1       	ldi	r25, 0x1A	; 26
     d34:	a6 e0       	ldi	r26, 0x06	; 6
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	8a 83       	std	Y+2, r24	; 0x02
     d3a:	9b 83       	std	Y+3, r25	; 0x03
     d3c:	ac 83       	std	Y+4, r26	; 0x04
     d3e:	bd 83       	std	Y+5, r27	; 0x05
	twi_Struct.InterruptMode = INTERRUPT_MODE_DISABLE;
     d40:	1e 82       	std	Y+6, r1	; 0x06

	/* Initializa I2C Module */
	TWI_init(&twi_Struct);
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	0e 94 82 07 	call	0xf04	; 0xf04 <TWI_init>
//	       General Call Recognition: Off */
//	    TWAR = 0b00000010; // my address = 0x01 :)
//
//	    TWCR = (1<<TWEN); /* enable TWI */

}
     d4a:	26 96       	adiw	r28, 0x06	; 6
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <EEPROM_writeByte>:

 [in/out]			None

 [Returns]:			Status of writing (SUCCESS if everything is fine)
**********************************************************************************/
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data){
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <EEPROM_writeByte+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <EEPROM_writeByte+0x8>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6b 83       	std	Y+3, r22	; 0x03

	/* Send start bit to start I2C Frame */
	TWI_start();
     d6e:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_start>

	/* Check  of the status of sending Start bit */
	if(TWI_getStatus() != TW_START){
     d72:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     d76:	88 30       	cpi	r24, 0x08	; 8
     d78:	11 f0       	breq	.+4      	; 0xd7e <EEPROM_writeByte+0x22>

		/* Start bit did NOT Transmitted succesfully */
		return ERROR;
     d7a:	1c 82       	std	Y+4, r1	; 0x04
     d7c:	28 c0       	rjmp	.+80     	; 0xdce <EEPROM_writeByte+0x72>
	 * so, we need to get most significant 3 bits from memory address
	 * so, masking the msb with 0x0700 and right shift them to get saved
	 * and the last bit is write (0)
	*/

    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	9a 81       	ldd	r25, Y+2	; 0x02
     d82:	80 70       	andi	r24, 0x00	; 0
     d84:	97 70       	andi	r25, 0x07	; 7
     d86:	88 0f       	add	r24, r24
     d88:	89 2f       	mov	r24, r25
     d8a:	88 1f       	adc	r24, r24
     d8c:	99 0b       	sbc	r25, r25
     d8e:	91 95       	neg	r25
     d90:	80 6a       	ori	r24, 0xA0	; 160
     d92:	0e 94 1d 08 	call	0x103a	; 0x103a <TWI_write>

	/* Check of Sending Slave address and reciving its ACK Status */
	if(TWI_getStatus() != TW_MT_SLA_W_ACK){
     d96:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     d9a:	88 31       	cpi	r24, 0x18	; 24
     d9c:	11 f0       	breq	.+4      	; 0xda2 <EEPROM_writeByte+0x46>

		/* Error in sending slave address or receiving its ACK */
		return ERROR;
     d9e:	1c 82       	std	Y+4, r1	; 0x04
     da0:	16 c0       	rjmp	.+44     	; 0xdce <EEPROM_writeByte+0x72>
	}

	/* Send next byte which is the proper memory address */
	TWI_write((uint8)(u16addr));
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	0e 94 1d 08 	call	0x103a	; 0x103a <TWI_write>

	/* Check of transmitting data byte and receiving its ACK */
	if(TWI_getStatus() != TW_MT_DATA_ACK){
     da8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     dac:	88 32       	cpi	r24, 0x28	; 40
     dae:	11 f0       	breq	.+4      	; 0xdb4 <EEPROM_writeByte+0x58>

		/* Error in transmitting data byte or receiving its ACK */
		return ERROR;
     db0:	1c 82       	std	Y+4, r1	; 0x04
     db2:	0d c0       	rjmp	.+26     	; 0xdce <EEPROM_writeByte+0x72>
	}

	/* Write Data byte on the EEPROM memory */
	TWI_write(u8data);
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	0e 94 1d 08 	call	0x103a	; 0x103a <TWI_write>

	/* Check of transmitting data byte and receiving its ACK */
	if(TWI_getStatus() != TW_MT_DATA_ACK){
     dba:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     dbe:	88 32       	cpi	r24, 0x28	; 40
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <EEPROM_writeByte+0x6a>

		/* Error in transmitting data byte or receiving its ACK */
		return ERROR;
     dc2:	1c 82       	std	Y+4, r1	; 0x04
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <EEPROM_writeByte+0x72>
	}

	/* Sending Stop bit to end the frame */
	TWI_stop();
     dc6:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_stop>

	/* Going to this point means that everything is fine */
	return SUCCESS;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	8c 83       	std	Y+4, r24	; 0x04
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <EEPROM_readByte>:
 [in/out]			None

 [Returns]:			Status of Reading (SUCCESS if everything is fine)
**********************************************************************************/
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	00 d0       	rcall	.+0      	; 0xde4 <EEPROM_readByte+0x6>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <EEPROM_readByte+0x8>
     de6:	0f 92       	push	r0
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	89 83       	std	Y+1, r24	; 0x01
     df0:	7c 83       	std	Y+4, r23	; 0x04
     df2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send start bit to start I2C Frame */
	TWI_start();
     df4:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_start>

	/* Check  of the status of sending Start bit */
	if(TWI_getStatus() != TW_START){
     df8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	11 f0       	breq	.+4      	; 0xe04 <EEPROM_readByte+0x26>

		/* Start bit did NOT Transmitted succesfully */
		return ERROR;
     e00:	1d 82       	std	Y+5, r1	; 0x05
     e02:	44 c0       	rjmp	.+136    	; 0xe8c <EEPROM_readByte+0xae>
	 * so, we need to get most significant 3 bits from memory address
	 * so, masking the msb with 0x0700 and right shift them to get saved
	 * and the last bit is write (0)
	*/

    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	80 70       	andi	r24, 0x00	; 0
     e0a:	97 70       	andi	r25, 0x07	; 7
     e0c:	88 0f       	add	r24, r24
     e0e:	89 2f       	mov	r24, r25
     e10:	88 1f       	adc	r24, r24
     e12:	99 0b       	sbc	r25, r25
     e14:	91 95       	neg	r25
     e16:	80 6a       	ori	r24, 0xA0	; 160
     e18:	0e 94 1d 08 	call	0x103a	; 0x103a <TWI_write>

	/* Check of Sending Slave address and reciving its ACK Status */
	if(TWI_getStatus() != TW_MT_SLA_W_ACK){
     e1c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     e20:	88 31       	cpi	r24, 0x18	; 24
     e22:	11 f0       	breq	.+4      	; 0xe28 <EEPROM_readByte+0x4a>

		/* Error in sending slave address or receiving its ACK */
		return ERROR;
     e24:	1d 82       	std	Y+5, r1	; 0x05
     e26:	32 c0       	rjmp	.+100    	; 0xe8c <EEPROM_readByte+0xae>
	}

	/* Send next byte which is the proper memory address */
	TWI_write((uint8)(u16addr));
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	0e 94 1d 08 	call	0x103a	; 0x103a <TWI_write>

	/* Check of transmitting data byte and receiving its ACK */
	if(TWI_getStatus() != TW_MT_DATA_ACK){
     e2e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     e32:	88 32       	cpi	r24, 0x28	; 40
     e34:	11 f0       	breq	.+4      	; 0xe3a <EEPROM_readByte+0x5c>

		/* Error in transmitting data byte or receiving its ACK */
		return ERROR;
     e36:	1d 82       	std	Y+5, r1	; 0x05
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <EEPROM_readByte+0xae>
	}

	/* Sending Repeated start Bit */
	TWI_start();
     e3a:	0e 94 02 08 	call	0x1004	; 0x1004 <TWI_start>

	/* Check of sending repeated start bit properly */
	if(TWI_getStatus() != TW_REP_START){
     e3e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     e42:	80 31       	cpi	r24, 0x10	; 16
     e44:	11 f0       	breq	.+4      	; 0xe4a <EEPROM_readByte+0x6c>

		/* Error in sending reapted start bit */
		return ERROR;
     e46:	1d 82       	std	Y+5, r1	; 0x05
     e48:	21 c0       	rjmp	.+66     	; 0xe8c <EEPROM_readByte+0xae>
	 * so, we need to get most significant 3 bits from memory address
	 * so, masking the msb with 0x0700 and right shift them to get saved
	 * and the last bit is read (1)
	*/

    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	80 70       	andi	r24, 0x00	; 0
     e50:	97 70       	andi	r25, 0x07	; 7
     e52:	88 0f       	add	r24, r24
     e54:	89 2f       	mov	r24, r25
     e56:	88 1f       	adc	r24, r24
     e58:	99 0b       	sbc	r25, r25
     e5a:	91 95       	neg	r25
     e5c:	81 6a       	ori	r24, 0xA1	; 161
     e5e:	0e 94 1d 08 	call	0x103a	; 0x103a <TWI_write>

	/* Check of Sending Slave address and reciving its ACK Status */
	if(TWI_getStatus() != TW_MT_SLA_R_ACK){
     e62:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     e66:	80 34       	cpi	r24, 0x40	; 64
     e68:	11 f0       	breq	.+4      	; 0xe6e <EEPROM_readByte+0x90>

		/* Error in sending slave address or receiving its ACK */
		return ERROR;
     e6a:	1d 82       	std	Y+5, r1	; 0x05
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <EEPROM_readByte+0xae>
	}

	/* Read required byte from EEPROM Memory without sending ACK */
	 *u8data = TWI_readWithNACK();
     e6e:	0e 94 47 08 	call	0x108e	; 0x108e <TWI_readWithNACK>
     e72:	eb 81       	ldd	r30, Y+3	; 0x03
     e74:	fc 81       	ldd	r31, Y+4	; 0x04
     e76:	80 83       	st	Z, r24

	/* Check of reading properly without sending ACK */
	 if(TWI_getStatus() != TW_MR_DATA_NACK){
     e78:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TWI_getStatus>
     e7c:	88 35       	cpi	r24, 0x58	; 88
     e7e:	11 f0       	breq	.+4      	; 0xe84 <EEPROM_readByte+0xa6>

		 /* Error in reading byte */
		 return ERROR;
     e80:	1d 82       	std	Y+5, r1	; 0x05
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <EEPROM_readByte+0xae>
	 }

	 /* Sending STOP Bit */
	 TWI_stop();
     e84:	0e 94 12 08 	call	0x1024	; 0x1024 <TWI_stop>

	/* Going to this point means that everything is fine */
	return SUCCESS;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <__vector_17>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TWI_vect){
     e9e:	1f 92       	push	r1
     ea0:	0f 92       	push	r0
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	0f 92       	push	r0
     ea6:	11 24       	eor	r1, r1
     ea8:	2f 93       	push	r18
     eaa:	3f 93       	push	r19
     eac:	4f 93       	push	r20
     eae:	5f 93       	push	r21
     eb0:	6f 93       	push	r22
     eb2:	7f 93       	push	r23
     eb4:	8f 93       	push	r24
     eb6:	9f 93       	push	r25
     eb8:	af 93       	push	r26
     eba:	bf 93       	push	r27
     ebc:	ef 93       	push	r30
     ebe:	ff 93       	push	r31
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTWI != NULL_PTR){
     ec8:	80 91 68 00 	lds	r24, 0x0068
     ecc:	90 91 69 00 	lds	r25, 0x0069
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	29 f0       	breq	.+10     	; 0xede <__vector_17+0x40>

		/* Call the Call Back function for TWI Interrupt */
		(*g_callBackPtrTWI)();		/* Another way of calling g_callBackPtrTWI(); */
     ed4:	e0 91 68 00 	lds	r30, 0x0068
     ed8:	f0 91 69 00 	lds	r31, 0x0069
     edc:	09 95       	icall
	}
}
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	ff 91       	pop	r31
     ee4:	ef 91       	pop	r30
     ee6:	bf 91       	pop	r27
     ee8:	af 91       	pop	r26
     eea:	9f 91       	pop	r25
     eec:	8f 91       	pop	r24
     eee:	7f 91       	pop	r23
     ef0:	6f 91       	pop	r22
     ef2:	5f 91       	pop	r21
     ef4:	4f 91       	pop	r20
     ef6:	3f 91       	pop	r19
     ef8:	2f 91       	pop	r18
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <TWI_init>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_init(const TWI_ConfigType* config_Ptr){
     f04:	ef 92       	push	r14
     f06:	ff 92       	push	r15
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	27 97       	sbiw	r28, 0x07	; 7
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	9b 83       	std	Y+3, r25	; 0x03
     f22:	8a 83       	std	Y+2, r24	; 0x02

	uint8 bitRateCalculation;
	/* Clear all registers before doing  anything */
	TWBR &= 0x00;
     f24:	e0 e2       	ldi	r30, 0x20	; 32
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	e0 e2       	ldi	r30, 0x20	; 32
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	10 82       	st	Z, r1
	TWCR &= 0x00;
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	e6 e5       	ldi	r30, 0x56	; 86
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	10 82       	st	Z, r1
	TWDR &= 0x00;
     f3c:	e3 e2       	ldi	r30, 0x23	; 35
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	e3 e2       	ldi	r30, 0x23	; 35
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	10 82       	st	Z, r1
	TWAR &= 0x00;
     f48:	e2 e2       	ldi	r30, 0x22	; 34
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	e2 e2       	ldi	r30, 0x22	; 34
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	10 82       	st	Z, r1

	/* Bit rate calculations */
	bitRateCalculation = ( ( (F_CPU) - ( (config_Ptr -> BitRate) * 16) ) / (2 * (config_Ptr -> BitRate) ) );
     f54:	ea 81       	ldd	r30, Y+2	; 0x02
     f56:	fb 81       	ldd	r31, Y+3	; 0x03
     f58:	21 81       	ldd	r18, Z+1	; 0x01
     f5a:	32 81       	ldd	r19, Z+2	; 0x02
     f5c:	43 81       	ldd	r20, Z+3	; 0x03
     f5e:	54 81       	ldd	r21, Z+4	; 0x04
     f60:	80 e2       	ldi	r24, 0x20	; 32
     f62:	91 ea       	ldi	r25, 0xA1	; 161
     f64:	a7 e0       	ldi	r26, 0x07	; 7
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	82 1b       	sub	r24, r18
     f6a:	93 0b       	sbc	r25, r19
     f6c:	a4 0b       	sbc	r26, r20
     f6e:	b5 0b       	sbc	r27, r21
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	aa 1f       	adc	r26, r26
     f7e:	bb 1f       	adc	r27, r27
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	aa 1f       	adc	r26, r26
     f86:	bb 1f       	adc	r27, r27
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	aa 1f       	adc	r26, r26
     f8e:	bb 1f       	adc	r27, r27
     f90:	7c 01       	movw	r14, r24
     f92:	8d 01       	movw	r16, r26
     f94:	ea 81       	ldd	r30, Y+2	; 0x02
     f96:	fb 81       	ldd	r31, Y+3	; 0x03
     f98:	81 81       	ldd	r24, Z+1	; 0x01
     f9a:	92 81       	ldd	r25, Z+2	; 0x02
     f9c:	a3 81       	ldd	r26, Z+3	; 0x03
     f9e:	b4 81       	ldd	r27, Z+4	; 0x04
     fa0:	9c 01       	movw	r18, r24
     fa2:	ad 01       	movw	r20, r26
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	44 1f       	adc	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	c8 01       	movw	r24, r16
     fae:	b7 01       	movw	r22, r14
     fb0:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodsi4>
     fb4:	da 01       	movw	r26, r20
     fb6:	c9 01       	movw	r24, r18
     fb8:	89 83       	std	Y+1, r24	; 0x01

	/* Check if number is Bigger than zero or not */
	if(bitRateCalculation >= 0){

		/*Bit Rate calculation proper with this clock*/
		TWBR = bitRateCalculation;
     fba:	e0 e2       	ldi	r30, 0x20	; 32
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	80 83       	st	Z, r24
		bitRateCalculation = ( ( (F_CPU) - ( (NORMAL_MODE_100KB) * 16) ) / (2 * (NORMAL_MODE_100KB) ) );
		TWBR = bitRateCalculation;
	}

	/* Zero Prescaler */
	TWSR = 0x00;
     fc2:	e1 e2       	ldi	r30, 0x21	; 33
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	10 82       	st	Z, r1
     * Two Wire Bus address my address
     * if any master device want to call me: 0x1
     * (used in case this MC is a slave device)
     *  General Call Recognition: Off
    */
    TWAR = ( (config_Ptr -> Address) & 0xFE);
     fc8:	a2 e2       	ldi	r26, 0x22	; 34
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea 81       	ldd	r30, Y+2	; 0x02
     fce:	fb 81       	ldd	r31, Y+3	; 0x03
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24

    /* Choose Operating mode (Interrupt or polling) */
    TWCR = ( (config_Ptr -> InterruptMode) );
     fd6:	a6 e5       	ldi	r26, 0x56	; 86
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ea 81       	ldd	r30, Y+2	; 0x02
     fdc:	fb 81       	ldd	r31, Y+3	; 0x03
     fde:	85 81       	ldd	r24, Z+5	; 0x05
     fe0:	8c 93       	st	X, r24

    /* Enable TWI Module */
    TWCR = (1<<TWEN);
     fe2:	e6 e5       	ldi	r30, 0x56	; 86
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	80 83       	st	Z, r24

}
     fea:	27 96       	adiw	r28, 0x07	; 7
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	de bf       	out	0x3e, r29	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	cd bf       	out	0x3d, r28	; 61
     ff6:	cf 91       	pop	r28
     ff8:	df 91       	pop	r29
     ffa:	1f 91       	pop	r17
     ffc:	0f 91       	pop	r16
     ffe:	ff 90       	pop	r15
    1000:	ef 90       	pop	r14
    1002:	08 95       	ret

00001004 <TWI_start>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_start(void){
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * - Clear the TWINT flag before sending the start bit TWINT=1
	 * - send the start bit by TWSTA=1
	 * - Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    100c:	e6 e5       	ldi	r30, 0x56	; 86
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	84 ea       	ldi	r24, 0xA4	; 164
    1012:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1014:	e6 e5       	ldi	r30, 0x56	; 86
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	88 23       	and	r24, r24
    101c:	dc f7       	brge	.-10     	; 0x1014 <TWI_start+0x10>
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <TWI_stop>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_stop(void){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * - Clear the TWINT flag before sending the stop bit TWINT=1
	 * - send the stop bit by TWSTO=1
	 * - Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    102c:	e6 e5       	ldi	r30, 0x56	; 86
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	84 e9       	ldi	r24, 0x94	; 148
    1032:	80 83       	st	Z, r24
}
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <TWI_write>:

 [in/out]]			None

 [Returns]:]		None
**********************************************************************************/
void TWI_write(uint8 data){
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	89 83       	std	Y+1, r24	; 0x01

	/* Put data On TWI data Register */
    TWDR = data;
    1046:	e3 e2       	ldi	r30, 0x23	; 35
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 83       	st	Z, r24

    /*
	 * - Clear the TWINT flag before sending the data TWINT=1
	 * - Enable TWI Module TWEN=1
	*/
    TWCR = (1 << TWINT) | (1 << TWEN);
    104e:	e6 e5       	ldi	r30, 0x56	; 86
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	84 e8       	ldi	r24, 0x84	; 132
    1054:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1056:	e6 e5       	ldi	r30, 0x56	; 86
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	88 23       	and	r24, r24
    105e:	dc f7       	brge	.-10     	; 0x1056 <TWI_write+0x1c>
}
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <TWI_readWithACK>:

 [in/out]			None

 [Returns]:			Data which will be read
**********************************************************************************/
uint8 TWI_readWithACK(void){
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * - Clear the TWINT flag before reading the data TWINT=1
	 * - Enable sending ACK after reading or receiving data TWEA=1
	 * - Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	84 ec       	ldi	r24, 0xC4	; 196
    1076:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1078:	e6 e5       	ldi	r30, 0x56	; 86
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 23       	and	r24, r24
    1080:	dc f7       	brge	.-10     	; 0x1078 <TWI_readWithACK+0x10>

    /* Read Data */
    return TWDR;
    1082:	e3 e2       	ldi	r30, 0x23	; 35
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <TWI_readWithNACK>:

 [in/out]			None

 [Returns]:			Data which will be read
**********************************************************************************/
uint8 TWI_readWithNACK(void){
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1096:	e6 e5       	ldi	r30, 0x56	; 86
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	84 e8       	ldi	r24, 0x84	; 132
    109c:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    109e:	e6 e5       	ldi	r30, 0x56	; 86
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	88 23       	and	r24, r24
    10a6:	dc f7       	brge	.-10     	; 0x109e <TWI_readWithNACK+0x10>

    /* Read Data */
    return TWDR;
    10a8:	e3 e2       	ldi	r30, 0x23	; 35
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
}
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <TWI_getStatus>:

 [in/out]			None

 [Returns]:			Status of the bus
**********************************************************************************/
uint8 TWI_getStatus(void){
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62

    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    10be:	e1 e2       	ldi	r30, 0x21	; 33
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	88 7f       	andi	r24, 0xF8	; 248
    10c6:	89 83       	std	Y+1, r24	; 0x01

    return status;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <TWI_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_setCallBack(void (*f_ptr)(void)){
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <TWI_setCallBack+0x6>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTWI = f_ptr;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	90 93 69 00 	sts	0x0069, r25
    10e8:	80 93 68 00 	sts	0x0068, r24
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <main>:

/************************************************************************
  	  	  	  	  	  	  	  Main Function
 ***********************************************************************/
int main(void)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	60 97       	sbiw	r28, 0x10	; 16
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61


	/* Timer Structure for timer 1 configurations */
	Timer_ConfigType timer1_Strut;

	uart_Struct.BaudRate			= 9600;
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	95 e2       	ldi	r25, 0x25	; 37
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	8c 83       	std	Y+4, r24	; 0x04
    1114:	9d 83       	std	Y+5, r25	; 0x05
    1116:	ae 83       	std	Y+6, r26	; 0x06
    1118:	bf 83       	std	Y+7, r27	; 0x07
	uart_Struct.InterruptMode		= POLLING;
    111a:	19 82       	std	Y+1, r1	; 0x01
	uart_Struct.ParityMode			= NO_PARIT_BITS;
    111c:	1b 82       	std	Y+3, r1	; 0x03
	uart_Struct.StopBit				= STOP_BIT_1_BIT;
    111e:	1a 82       	std	Y+2, r1	; 0x02

	/* Timer1 Tick every 1 Second */
	timer1_Strut.TimerID 			= TIMER_ID_1;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	88 87       	std	Y+8, r24	; 0x08
	timer1_Strut.TimerMode			= CTC_MODE_CHANNEL_A;
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	89 87       	std	Y+9, r24	; 0x09
	timer1_Strut.CompareMatchMode	= NORMAL;
    1128:	1a 86       	std	Y+10, r1	; 0x0a
	timer1_Strut.OutputPin			= NONE;
    112a:	1b 86       	std	Y+11, r1	; 0x0b
	timer1_Strut.Prescaler			= FCPU_OVER_1024;
    112c:	85 e0       	ldi	r24, 0x05	; 5
    112e:	8c 87       	std	Y+12, r24	; 0x0c
	timer1_Strut.InitialValue		= 0;
    1130:	1e 86       	std	Y+14, r1	; 0x0e
    1132:	1d 86       	std	Y+13, r1	; 0x0d
	timer1_Strut.CompareValue		= 7900;
    1134:	8c ed       	ldi	r24, 0xDC	; 220
    1136:	9e e1       	ldi	r25, 0x1E	; 30
    1138:	98 8b       	std	Y+16, r25	; 0x10
    113a:	8f 87       	std	Y+15, r24	; 0x0f

	/* Enable Global Interrupt */
	SREG |= (1<<7);
    113c:	af e5       	ldi	r26, 0x5F	; 95
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef e5       	ldi	r30, 0x5F	; 95
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	80 68       	ori	r24, 0x80	; 128
    1148:	8c 93       	st	X, r24

	/* Timer 1 Initialization */
	Timer_init(&timer1_Strut);
    114a:	ce 01       	movw	r24, r28
    114c:	08 96       	adiw	r24, 0x08	; 8
    114e:	0e 94 3f 14 	call	0x287e	; 0x287e <Timer_init>

	/* CallBack Function for timer 1 CTC Channel A Interrupt Function */
	Timer1_setCallBack(Timer1_INT);
    1152:	81 ec       	ldi	r24, 0xC1	; 193
    1154:	92 e1       	ldi	r25, 0x12	; 18
    1156:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <Timer1_setCallBack>

	/* Buzzer Configurations */
	DDRC |= (1 << PC2);
    115a:	a4 e3       	ldi	r26, 0x34	; 52
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e4 e3       	ldi	r30, 0x34	; 52
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	84 60       	ori	r24, 0x04	; 4
    1166:	8c 93       	st	X, r24
	PORTC &= ~(1<<PC2);
    1168:	a5 e3       	ldi	r26, 0x35	; 53
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e5 e3       	ldi	r30, 0x35	; 53
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	8b 7f       	andi	r24, 0xFB	; 251
    1174:	8c 93       	st	X, r24

	/* Initialization of Motors */
	Motor_init();
    1176:	0e 94 3b 06 	call	0xc76	; 0xc76 <Motor_init>

	/* LED for INT Testing */
	DDRD |= (1 << PD7);
    117a:	a1 e3       	ldi	r26, 0x31	; 49
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e1 e3       	ldi	r30, 0x31	; 49
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	80 68       	ori	r24, 0x80	; 128
    1186:	8c 93       	st	X, r24

	/* UART initialization */
	UART_init(&uart_Struct);
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 08 17 	call	0x2e10	; 0x2e10 <UART_init>

	while(UART_recieveByte() != M1_READY){} // wait until MC2 is ready
    1190:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    1194:	80 31       	cpi	r24, 0x10	; 16
    1196:	e1 f7       	brne	.-8      	; 0x1190 <main+0x9a>

	/* Init EEPROM */
	EEPROM_init();
    1198:	0e 94 8f 06 	call	0xd1e	; 0xd1e <EEPROM_init>

	/*
	 * Initially, EEPROM Suppose to be empty (0xFF)
	 * so we need to put a password at first
	 */
	EEPROM_writeNewPassword();
    119c:	0e 94 36 0a 	call	0x146c	; 0x146c <EEPROM_writeNewPassword>

	while(1)
	{

		/* Check if theif occured to start the program from first */
		if(g_theifFlag == 1){
    11a0:	80 91 6c 00 	lds	r24, 0x006C
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	49 f5       	brne	.+82     	; 0x11fa <main+0x104>

			/* Wait till receivng the ACK From the HMI ECU */
			while(UART_recieveByte() != M1_READY);
    11a8:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    11ac:	80 31       	cpi	r24, 0x10	; 16
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <main+0xb2>

			/* Check for received command if it is overwrite the old password or not */
			if(UART_recieveByte() == OVER_WRITE_OLD_PASSWORD){
    11b0:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    11b4:	80 33       	cpi	r24, 0x30	; 48
    11b6:	41 f4       	brne	.+16     	; 0x11c8 <main+0xd2>
				do{
					/*
					 * Execute at least once
					 * Used to hault on it till enter the right password
					 */
					Check_passwordEEPROM();
    11b8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <Check_passwordEEPROM>
				}while(g_theifFlag == 1);
    11bc:	80 91 6c 00 	lds	r24, 0x006C
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	d1 f3       	breq	.-12     	; 0x11b8 <main+0xc2>

				/* Write new password */
				EEPROM_overwritePassword();
    11c4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <EEPROM_overwritePassword>
			}

			/* Check for second command which is door manipulation */
			if(UART_recieveByte() == STEP3_DOOR_MANIPULATION){
    11c8:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    11cc:	80 34       	cpi	r24, 0x40	; 64
    11ce:	79 f4       	brne	.+30     	; 0x11ee <main+0xf8>
				do{
					/*
					 * Execute at least once
					 * Used to hault on it till enter the right password
					 */
					Check_passwordEEPROM();
    11d0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <Check_passwordEEPROM>
				}while(g_theifFlag == 1);
    11d4:	80 91 6c 00 	lds	r24, 0x006C
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	d1 f3       	breq	.-12     	; 0x11d0 <main+0xda>

				/* Check for receiving Door open command */
				if(UART_recieveByte() == DOOR_OPEN){
    11dc:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    11e0:	85 34       	cpi	r24, 0x45	; 69
    11e2:	11 f4       	brne	.+4      	; 0x11e8 <main+0xf2>

					/* Opening the door for 10 seconds */
					Door_on();
    11e4:	0e 94 26 09 	call	0x124c	; 0x124c <Door_on>
				}
				/* Closing the door for 10 seconds */
				Door_off();
    11e8:	0e 94 41 09 	call	0x1282	; 0x1282 <Door_off>
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <main+0xfe>
			}
			else{
				/* Send error */
				UART_sendByte(ERROR);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>
			}

			/* Clear theif flag */
			g_theifFlag = 0;
    11f4:	10 92 6c 00 	sts	0x006C, r1
    11f8:	d3 cf       	rjmp	.-90     	; 0x11a0 <main+0xaa>
		}

		else{
			/* Wait till receivng the ACK From the HMI ECU */
			while(UART_recieveByte() != M1_READY);
    11fa:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    11fe:	80 31       	cpi	r24, 0x10	; 16
    1200:	e1 f7       	brne	.-8      	; 0x11fa <main+0x104>

			/* Check for received command if it is overwrite the old password or not */
			if(UART_recieveByte() == OVER_WRITE_OLD_PASSWORD){
    1202:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    1206:	80 33       	cpi	r24, 0x30	; 48
    1208:	41 f4       	brne	.+16     	; 0x121a <main+0x124>
				do{
					/*
					 * Execute at least once
					 * Used to hault on it till enter the right password
					 */
					Check_passwordEEPROM();
    120a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <Check_passwordEEPROM>
				}while(g_theifFlag == 1);
    120e:	80 91 6c 00 	lds	r24, 0x006C
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	d1 f3       	breq	.-12     	; 0x120a <main+0x114>

				/* Write new password */
				EEPROM_overwritePassword();
    1216:	0e 94 e7 09 	call	0x13ce	; 0x13ce <EEPROM_overwritePassword>
			}

			/* Check for second command which is door manipulation */
			if(UART_recieveByte() == STEP3_DOOR_MANIPULATION){
    121a:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    121e:	80 34       	cpi	r24, 0x40	; 64
    1220:	79 f4       	brne	.+30     	; 0x1240 <main+0x14a>
				do{
					/*
					 * Execute at least once
					 * Used to hault on it till enter the right password
					 */
					Check_passwordEEPROM();
    1222:	0e 94 5e 09 	call	0x12bc	; 0x12bc <Check_passwordEEPROM>
				}while(g_theifFlag == 1);
    1226:	80 91 6c 00 	lds	r24, 0x006C
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	d1 f3       	breq	.-12     	; 0x1222 <main+0x12c>

				/* Check for receiving Door open command */
				if(UART_recieveByte() == DOOR_OPEN){
    122e:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    1232:	85 34       	cpi	r24, 0x45	; 69
    1234:	11 f4       	brne	.+4      	; 0x123a <main+0x144>

					/* Opening the door for 10 seconds */
					Door_on();
    1236:	0e 94 26 09 	call	0x124c	; 0x124c <Door_on>
				}
				/* Closing the door for 10 seconds */
				Door_off();
    123a:	0e 94 41 09 	call	0x1282	; 0x1282 <Door_off>
    123e:	03 c0       	rjmp	.+6      	; 0x1246 <main+0x150>
			}
			else{
				/* Send error */
				UART_sendByte(ERROR);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>
			}

			/* Clear theif flag */
			g_theifFlag = 0;
    1246:	10 92 6c 00 	sts	0x006C, r1
    124a:	aa cf       	rjmp	.-172    	; 0x11a0 <main+0xaa>

0000124c <Door_on>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Door_on(void){
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62

	uint8_t save_globalNow = 0;
    1256:	19 82       	std	Y+1, r1	; 0x01

	save_globalNow = g_timer1_10SecFlag;
    1258:	80 91 6a 00 	lds	r24, 0x006A
    125c:	89 83       	std	Y+1, r24	; 0x01
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <Door_on+0x18>

	while(g_timer1_10SecFlag < (save_globalNow + 10)){
		Motor_clockWise();
    1260:	0e 94 50 06 	call	0xca0	; 0xca0 <Motor_clockWise>

	uint8_t save_globalNow = 0;

	save_globalNow = g_timer1_10SecFlag;

	while(g_timer1_10SecFlag < (save_globalNow + 10)){
    1264:	80 91 6a 00 	lds	r24, 0x006A
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0a 96       	adiw	r24, 0x0a	; 10
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	9c f3       	brlt	.-26     	; 0x1260 <Door_on+0x14>
		Motor_clockWise();
	}

}
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <Door_off>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Door_off(void){
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	0f 92       	push	r0
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62

	/* Variable used to save global counter flag in ISR */
	uint8_t save_globalNow = 0;
    128c:	19 82       	std	Y+1, r1	; 0x01

	/* Getting the value of the Counter flag now */
	save_globalNow = g_timer1_10SecFlag;
    128e:	80 91 6a 00 	lds	r24, 0x006A
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	02 c0       	rjmp	.+4      	; 0x129a <Door_off+0x18>
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_10SecFlag < (save_globalNow + 10)){

		/* Closing the door */
		Motor_antiClockWise();
    1296:	0e 94 65 06 	call	0xcca	; 0xcca <Motor_antiClockWise>
	 * delay for 10 Seconds to close the door
	 * Here i check for the global counter flag value
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_10SecFlag < (save_globalNow + 10)){
    129a:	80 91 6a 00 	lds	r24, 0x006A
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	88 2f       	mov	r24, r24
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0a 96       	adiw	r24, 0x0a	; 10
    12aa:	28 17       	cp	r18, r24
    12ac:	39 07       	cpc	r19, r25
    12ae:	9c f3       	brlt	.-26     	; 0x1296 <Door_off+0x14>

		/* Closing the door */
		Motor_antiClockWise();
	}
	/* Turn off the motors */
	Motor_off();
    12b0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <Motor_off>
}
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <Check_passwordEEPROM>:


void Check_passwordEEPROM(void){
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <Check_passwordEEPROM+0xa>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <Check_passwordEEPROM+0xc>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <Check_passwordEEPROM+0xe>
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62

	/* Iteration variable */
	uint8 i = 0;
    12ce:	19 82       	std	Y+1, r1	; 0x01

	/* Array to hold the password */
	uint8 PasswordArr[5] = {0};
    12d0:	85 e0       	ldi	r24, 0x05	; 5
    12d2:	fe 01       	movw	r30, r28
    12d4:	32 96       	adiw	r30, 0x02	; 2
    12d6:	df 01       	movw	r26, r30
    12d8:	98 2f       	mov	r25, r24
    12da:	1d 92       	st	X+, r1
    12dc:	9a 95       	dec	r25
    12de:	e9 f7       	brne	.-6      	; 0x12da <Check_passwordEEPROM+0x1e>
	 * so it wont be a big problem
	*/
	static uint8 Flag_of_Calling = 0;

	/* Wait untill HMI ECU get the password from the user */
	while(UART_recieveByte() != CHECK_PASSWORD);
    12e0:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    12e4:	81 34       	cpi	r24, 0x41	; 65
    12e6:	e1 f7       	brne	.-8      	; 0x12e0 <Check_passwordEEPROM+0x24>

	/* Recive the password byte by byte */
	for(i = 0; i < 5; i++){
    12e8:	19 82       	std	Y+1, r1	; 0x01
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <Check_passwordEEPROM+0x4e>

		/*
		 * Recive the password byte by byte
		 * and save it on passwordArray
		 */
		PasswordArr[i] = UART_recieveByte();
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	08 2f       	mov	r16, r24
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    12f6:	28 2f       	mov	r18, r24
    12f8:	ce 01       	movw	r24, r28
    12fa:	02 96       	adiw	r24, 0x02	; 2
    12fc:	fc 01       	movw	r30, r24
    12fe:	e0 0f       	add	r30, r16
    1300:	f1 1f       	adc	r31, r17
    1302:	20 83       	st	Z, r18

	/* Wait untill HMI ECU get the password from the user */
	while(UART_recieveByte() != CHECK_PASSWORD);

	/* Recive the password byte by byte */
	for(i = 0; i < 5; i++){
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	8f 5f       	subi	r24, 0xFF	; 255
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	85 30       	cpi	r24, 0x05	; 5
    130e:	70 f3       	brcs	.-36     	; 0x12ec <Check_passwordEEPROM+0x30>
		 */
		PasswordArr[i] = UART_recieveByte();
	}

	/* Check if received password from HMI ECU is Correct or not */
	if (Compare_eepromMultipleValue(PasswordArr) == 5){
    1310:	ce 01       	movw	r24, r28
    1312:	02 96       	adiw	r24, 0x02	; 2
    1314:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Compare_eepromMultipleValue>
    1318:	85 30       	cpi	r24, 0x05	; 5
    131a:	49 f4       	brne	.+18     	; 0x132e <Check_passwordEEPROM+0x72>

		g_theifFlag = 0;
    131c:	10 92 6c 00 	sts	0x006C, r1

		/* Correct Password */
		UART_sendByte(M1_READY);
    1320:	80 e1       	ldi	r24, 0x10	; 16
    1322:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

		/* Sending an ACK TO HMI MCU to tell him that i will send commands */

		/* Sending an Correct Password ACK */
		UART_sendByte(CORRECT_PASSWORD);
    1326:	82 e4       	ldi	r24, 0x42	; 66
    1328:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>
    132c:	1f c0       	rjmp	.+62     	; 0x136c <Check_passwordEEPROM+0xb0>

	}
	else
	{
		/* Sending an ACK TO HMI MCU to tell him that i will send commands */
		UART_sendByte(M1_READY);
    132e:	80 e1       	ldi	r24, 0x10	; 16
    1330:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

		/* Incorrect Password! */
		UART_sendByte(INCORRECT_PASSWORD);
    1334:	83 e4       	ldi	r24, 0x43	; 67
    1336:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

		/* Increament calling flag */
		Flag_of_Calling++;
    133a:	80 91 6d 00 	lds	r24, 0x006D
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	80 93 6d 00 	sts	0x006D, r24
		/*
		 * Incorrect Password!!
		 * You Still Have 2 times
		 * of putting the password correctly
		 */
		if(Flag_of_Calling <= 2){
    1344:	80 91 6d 00 	lds	r24, 0x006D
    1348:	83 30       	cpi	r24, 0x03	; 3
    134a:	18 f4       	brcc	.+6      	; 0x1352 <Check_passwordEEPROM+0x96>
			 * Not the best practice because if user put the password
			 * wrong a lot of time, all this context switching
			 * may goes into stackoverflow.
			 * So, i should think about another way
			 */
			Check_passwordEEPROM();
    134c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <Check_passwordEEPROM>
    1350:	0d c0       	rjmp	.+26     	; 0x136c <Check_passwordEEPROM+0xb0>
		}
		else
		{
			/* Clearing the recalling flag */
			Flag_of_Calling = 0;
    1352:	10 92 6d 00 	sts	0x006D, r1
			/* Three times password wrong consecutively */

			/* Sending an ACK TO HMI MCU to tell him that i will send commands */
			UART_sendByte(M1_READY);
    1356:	80 e1       	ldi	r24, 0x10	; 16
    1358:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

			/* Incorrect Password for 3 times ! */
			UART_sendByte(PASSWORD_WRONG_3_TIMES);
    135c:	84 e4       	ldi	r24, 0x44	; 68
    135e:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

			/* Set the theif flag to 1*/
			g_theifFlag = 1;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 6c 00 	sts	0x006C, r24

			/* Turn On Alarm for 1 Minute */
			Theif_onTheSystem();
    1368:	0e 94 c1 09 	call	0x1382	; 0x1382 <Theif_onTheSystem>

		}
	}

}
    136c:	26 96       	adiw	r28, 0x06	; 6
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	08 95       	ret

00001382 <Theif_onTheSystem>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Theif_onTheSystem(void){
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	0f 92       	push	r0
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * You entered the password 3 times consecutively wrong
	 * Alarm will turn on for 1 min
	 */
	/* Variable used to save global counter flag in ISR */
	uint8_t save_globalNow = 0;
    138c:	19 82       	std	Y+1, r1	; 0x01

	/* Turn On Buzzer */
	PORTC |= (1 << PC2);
    138e:	a5 e3       	ldi	r26, 0x35	; 53
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e3       	ldi	r30, 0x35	; 53
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	84 60       	ori	r24, 0x04	; 4
    139a:	8c 93       	st	X, r24

	/* Saving timer global variable now */
	save_globalNow = g_timer1_1MinFlag;
    139c:	80 91 6b 00 	lds	r24, 0x006B
    13a0:	89 83       	std	Y+1, r24	; 0x01

	/* Wait till 1 Min finishes */
	while(g_timer1_1MinFlag < (save_globalNow + 60)){
    13a2:	80 91 6b 00 	lds	r24, 0x006B
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	cc 96       	adiw	r24, 0x3c	; 60
    13b2:	28 17       	cp	r18, r24
    13b4:	39 07       	cpc	r19, r25
    13b6:	ac f3       	brlt	.-22     	; 0x13a2 <Theif_onTheSystem+0x20>
	}

	/* Turn Off Buzzer */
	PORTC &= (~(1 << PC2));
    13b8:	a5 e3       	ldi	r26, 0x35	; 53
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e5 e3       	ldi	r30, 0x35	; 53
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8b 7f       	andi	r24, 0xFB	; 251
    13c4:	8c 93       	st	X, r24
}
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <EEPROM_overwritePassword>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void EEPROM_overwritePassword(void){
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <EEPROM_overwritePassword+0xa>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <EEPROM_overwritePassword+0xc>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <EEPROM_overwritePassword+0xe>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62

	/* Array to hold the password */
	uint8 passwordArray[5] = {0};
    13e0:	85 e0       	ldi	r24, 0x05	; 5
    13e2:	fe 01       	movw	r30, r28
    13e4:	32 96       	adiw	r30, 0x02	; 2
    13e6:	df 01       	movw	r26, r30
    13e8:	98 2f       	mov	r25, r24
    13ea:	1d 92       	st	X+, r1
    13ec:	9a 95       	dec	r25
    13ee:	e9 f7       	brne	.-6      	; 0x13ea <EEPROM_overwritePassword+0x1c>

	/* Iterator Variable */
	uint8 i = 0;
    13f0:	19 82       	std	Y+1, r1	; 0x01

	/* Check if theif occured to start the program from first */
	if(g_theifFlag == 1){
    13f2:	80 91 6c 00 	lds	r24, 0x006C
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	11 f4       	brne	.+4      	; 0x13fe <EEPROM_overwritePassword+0x30>

		/* Clear the flag */
		g_theifFlag = 0;
    13fa:	10 92 6c 00 	sts	0x006C, r1

	}

	/* Wait untill HMI ECU get the password from the user */
	while(UART_recieveByte() != NEW_PASSWORD_TO_BE_SAVED);
    13fe:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    1402:	81 32       	cpi	r24, 0x21	; 33
    1404:	e1 f7       	brne	.-8      	; 0x13fe <EEPROM_overwritePassword+0x30>

	/* Recive the password byte by byte */
	for(i = 0; i < 5; i++){
    1406:	19 82       	std	Y+1, r1	; 0x01
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <EEPROM_overwritePassword+0x5a>

		/*
		 * Recive the password byte by byte
		 * and save it on passwordArray
		 */
		passwordArray[i] = UART_recieveByte();
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	08 2f       	mov	r16, r24
    140e:	10 e0       	ldi	r17, 0x00	; 0
    1410:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    1414:	28 2f       	mov	r18, r24
    1416:	ce 01       	movw	r24, r28
    1418:	02 96       	adiw	r24, 0x02	; 2
    141a:	fc 01       	movw	r30, r24
    141c:	e0 0f       	add	r30, r16
    141e:	f1 1f       	adc	r31, r17
    1420:	20 83       	st	Z, r18

	/* Wait untill HMI ECU get the password from the user */
	while(UART_recieveByte() != NEW_PASSWORD_TO_BE_SAVED);

	/* Recive the password byte by byte */
	for(i = 0; i < 5; i++){
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	85 30       	cpi	r24, 0x05	; 5
    142c:	70 f3       	brcs	.-36     	; 0x140a <EEPROM_overwritePassword+0x3c>
		 */
		passwordArray[i] = UART_recieveByte();
	}

	/* Start saving the password on EEPROM */
	Write_eepromValue(passwordArray);
    142e:	ce 01       	movw	r24, r28
    1430:	02 96       	adiw	r24, 0x02	; 2
    1432:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <Write_eepromValue>

	/* Sending to HMI ECU an ACK */
	UART_sendByte(M1_READY);
    1436:	80 e1       	ldi	r24, 0x10	; 16
    1438:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

	/* Check if byte saved successfully or not */
	if(Compare_eepromMultipleValue(passwordArray) == 5){
    143c:	ce 01       	movw	r24, r28
    143e:	02 96       	adiw	r24, 0x02	; 2
    1440:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Compare_eepromMultipleValue>
    1444:	85 30       	cpi	r24, 0x05	; 5
    1446:	21 f4       	brne	.+8      	; 0x1450 <EEPROM_overwritePassword+0x82>

		/* Send an ACK to HMI ECU That password saved successfully */
		UART_sendByte(NEW_PASSWORD_SAVED_SUCCESSFULLY);
    1448:	82 e2       	ldi	r24, 0x22	; 34
    144a:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <EEPROM_overwritePassword+0x88>

	}

	else{
		/* Byte did NOT Saved successfully */
		UART_sendByte(PASSWORD_NOT_SAVED);
    1450:	81 e1       	ldi	r24, 0x11	; 17
    1452:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>
	}

}
    1456:	26 96       	adiw	r28, 0x06	; 6
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <EEPROM_writeNewPassword>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void EEPROM_writeNewPassword(void){
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	 * passwords saved
	 * Default value = 0xFF
	 */

	/* Check if 5 bytes are all equal to 0xFF */
	if(	Read_eepromEmptyValue() == 5){
    1474:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Read_eepromEmptyValue>
    1478:	85 30       	cpi	r24, 0x05	; 5
    147a:	31 f4       	brne	.+12     	; 0x1488 <EEPROM_writeNewPassword+0x1c>

		/* Send an ACK to HMI ECU to know that there is not a previous passowrd */
		UART_sendByte(NO_PREVIOS_PASSWORDS);
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

		/* Write the password */
		EEPROM_overwritePassword();
    1482:	0e 94 e7 09 	call	0x13ce	; 0x13ce <EEPROM_overwritePassword>
    1486:	03 c0       	rjmp	.+6      	; 0x148e <EEPROM_writeNewPassword+0x22>
	}
	else{

		/* There is an old password detected ACK */
		UART_sendByte(PREVIOUS_PASSWORD_DETECTED);
    1488:	83 e2       	ldi	r24, 0x23	; 35
    148a:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>

	}

}
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <Read_eepromEmptyValue>:

 [in/out]			None

 [Returns]:			Count of emptyflag (it should be 5 if all 5 slots are empty)
 **********************************************************************************/
uint8 Read_eepromEmptyValue(void){
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	cd 54       	subi	r28, 0x4D	; 77
    14a2:	d0 40       	sbci	r29, 0x00	; 0
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61

	uint8 valArray[5] = {0};
    14ae:	ce 01       	movw	r24, r28
    14b0:	87 5b       	subi	r24, 0xB7	; 183
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	25 e0       	ldi	r18, 0x05	; 5
    14b6:	fc 01       	movw	r30, r24
    14b8:	df 01       	movw	r26, r30
    14ba:	82 2f       	mov	r24, r18
    14bc:	1d 92       	st	X+, r1
    14be:	8a 95       	dec	r24
    14c0:	e9 f7       	brne	.-6      	; 0x14bc <Read_eepromEmptyValue+0x28>
	uint8 i = 0;
    14c2:	fe 01       	movw	r30, r28
    14c4:	e8 5b       	subi	r30, 0xB8	; 184
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	10 82       	st	Z, r1
	uint8 eepromEmptyFlag = 0;
    14ca:	fe 01       	movw	r30, r28
    14cc:	e9 5b       	subi	r30, 0xB9	; 185
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	10 82       	st	Z, r1

	//Read byte by byte from EEPROM
	EEPROM_readByte(0x0311, &valArray[0]);
    14d2:	9e 01       	movw	r18, r28
    14d4:	27 5b       	subi	r18, 0xB7	; 183
    14d6:	3f 4f       	sbci	r19, 0xFF	; 255
    14d8:	81 e1       	ldi	r24, 0x11	; 17
    14da:	93 e0       	ldi	r25, 0x03	; 3
    14dc:	b9 01       	movw	r22, r18
    14de:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    14e2:	fe 01       	movw	r30, r28
    14e4:	ed 5b       	subi	r30, 0xBD	; 189
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e2       	ldi	r26, 0x20	; 32
    14ee:	b1 e4       	ldi	r27, 0x41	; 65
    14f0:	80 83       	st	Z, r24
    14f2:	91 83       	std	Z+1, r25	; 0x01
    14f4:	a2 83       	std	Z+2, r26	; 0x02
    14f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f8:	8e 01       	movw	r16, r28
    14fa:	01 5c       	subi	r16, 0xC1	; 193
    14fc:	1f 4f       	sbci	r17, 0xFF	; 255
    14fe:	fe 01       	movw	r30, r28
    1500:	ed 5b       	subi	r30, 0xBD	; 189
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	82 81       	ldd	r24, Z+2	; 0x02
    150a:	93 81       	ldd	r25, Z+3	; 0x03
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	4a ef       	ldi	r20, 0xFA	; 250
    1512:	54 e4       	ldi	r21, 0x44	; 68
    1514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	f8 01       	movw	r30, r16
    151e:	80 83       	st	Z, r24
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	a2 83       	std	Z+2, r26	; 0x02
    1524:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1526:	fe 01       	movw	r30, r28
    1528:	ff 96       	adiw	r30, 0x3f	; 63
    152a:	60 81       	ld	r22, Z
    152c:	71 81       	ldd	r23, Z+1	; 0x01
    152e:	82 81       	ldd	r24, Z+2	; 0x02
    1530:	93 81       	ldd	r25, Z+3	; 0x03
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e8       	ldi	r20, 0x80	; 128
    1538:	5f e3       	ldi	r21, 0x3F	; 63
    153a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    153e:	88 23       	and	r24, r24
    1540:	2c f4       	brge	.+10     	; 0x154c <Read_eepromEmptyValue+0xb8>
		__ticks = 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9e af       	std	Y+62, r25	; 0x3e
    1548:	8d af       	std	Y+61, r24	; 0x3d
    154a:	46 c0       	rjmp	.+140    	; 0x15d8 <Read_eepromEmptyValue+0x144>
	else if (__tmp > 65535)
    154c:	fe 01       	movw	r30, r28
    154e:	ff 96       	adiw	r30, 0x3f	; 63
    1550:	60 81       	ld	r22, Z
    1552:	71 81       	ldd	r23, Z+1	; 0x01
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	64 f5       	brge	.+88     	; 0x15c0 <Read_eepromEmptyValue+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	fe 01       	movw	r30, r28
    156a:	ed 5b       	subi	r30, 0xBD	; 189
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e2       	ldi	r20, 0x20	; 32
    157c:	51 e4       	ldi	r21, 0x41	; 65
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9e af       	std	Y+62, r25	; 0x3e
    1594:	8d af       	std	Y+61, r24	; 0x3d
    1596:	0f c0       	rjmp	.+30     	; 0x15b6 <Read_eepromEmptyValue+0x122>
    1598:	88 ec       	ldi	r24, 0xC8	; 200
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9c af       	std	Y+60, r25	; 0x3c
    159e:	8b af       	std	Y+59, r24	; 0x3b
    15a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    15a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <Read_eepromEmptyValue+0x110>
    15a8:	9c af       	std	Y+60, r25	; 0x3c
    15aa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    15ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	9e af       	std	Y+62, r25	; 0x3e
    15b4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    15b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    15ba:	00 97       	sbiw	r24, 0x00	; 0
    15bc:	69 f7       	brne	.-38     	; 0x1598 <Read_eepromEmptyValue+0x104>
    15be:	16 c0       	rjmp	.+44     	; 0x15ec <Read_eepromEmptyValue+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c0:	fe 01       	movw	r30, r28
    15c2:	ff 96       	adiw	r30, 0x3f	; 63
    15c4:	60 81       	ld	r22, Z
    15c6:	71 81       	ldd	r23, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9e af       	std	Y+62, r25	; 0x3e
    15d6:	8d af       	std	Y+61, r24	; 0x3d
    15d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    15da:	9e ad       	ldd	r25, Y+62	; 0x3e
    15dc:	9a af       	std	Y+58, r25	; 0x3a
    15de:	89 af       	std	Y+57, r24	; 0x39
    15e0:	89 ad       	ldd	r24, Y+57	; 0x39
    15e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <Read_eepromEmptyValue+0x150>
    15e8:	9a af       	std	Y+58, r25	; 0x3a
    15ea:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	EEPROM_readByte(0x0312, &valArray[1]);
    15ec:	ce 01       	movw	r24, r28
    15ee:	87 5b       	subi	r24, 0xB7	; 183
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	9c 01       	movw	r18, r24
    15f4:	2f 5f       	subi	r18, 0xFF	; 255
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	82 e1       	ldi	r24, 0x12	; 18
    15fa:	93 e0       	ldi	r25, 0x03	; 3
    15fc:	b9 01       	movw	r22, r18
    15fe:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a0 e2       	ldi	r26, 0x20	; 32
    1608:	b1 e4       	ldi	r27, 0x41	; 65
    160a:	8d ab       	std	Y+53, r24	; 0x35
    160c:	9e ab       	std	Y+54, r25	; 0x36
    160e:	af ab       	std	Y+55, r26	; 0x37
    1610:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1612:	6d a9       	ldd	r22, Y+53	; 0x35
    1614:	7e a9       	ldd	r23, Y+54	; 0x36
    1616:	8f a9       	ldd	r24, Y+55	; 0x37
    1618:	98 ad       	ldd	r25, Y+56	; 0x38
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	4a ef       	ldi	r20, 0xFA	; 250
    1620:	54 e4       	ldi	r21, 0x44	; 68
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	89 ab       	std	Y+49, r24	; 0x31
    162c:	9a ab       	std	Y+50, r25	; 0x32
    162e:	ab ab       	std	Y+51, r26	; 0x33
    1630:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1632:	69 a9       	ldd	r22, Y+49	; 0x31
    1634:	7a a9       	ldd	r23, Y+50	; 0x32
    1636:	8b a9       	ldd	r24, Y+51	; 0x33
    1638:	9c a9       	ldd	r25, Y+52	; 0x34
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e8       	ldi	r20, 0x80	; 128
    1640:	5f e3       	ldi	r21, 0x3F	; 63
    1642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1646:	88 23       	and	r24, r24
    1648:	2c f4       	brge	.+10     	; 0x1654 <Read_eepromEmptyValue+0x1c0>
		__ticks = 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	98 ab       	std	Y+48, r25	; 0x30
    1650:	8f a7       	std	Y+47, r24	; 0x2f
    1652:	3f c0       	rjmp	.+126    	; 0x16d2 <Read_eepromEmptyValue+0x23e>
	else if (__tmp > 65535)
    1654:	69 a9       	ldd	r22, Y+49	; 0x31
    1656:	7a a9       	ldd	r23, Y+50	; 0x32
    1658:	8b a9       	ldd	r24, Y+51	; 0x33
    165a:	9c a9       	ldd	r25, Y+52	; 0x34
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	3f ef       	ldi	r19, 0xFF	; 255
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	57 e4       	ldi	r21, 0x47	; 71
    1664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	4c f5       	brge	.+82     	; 0x16be <Read_eepromEmptyValue+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166c:	6d a9       	ldd	r22, Y+53	; 0x35
    166e:	7e a9       	ldd	r23, Y+54	; 0x36
    1670:	8f a9       	ldd	r24, Y+55	; 0x37
    1672:	98 ad       	ldd	r25, Y+56	; 0x38
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	40 e2       	ldi	r20, 0x20	; 32
    167a:	51 e4       	ldi	r21, 0x41	; 65
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	bc 01       	movw	r22, r24
    1686:	cd 01       	movw	r24, r26
    1688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	98 ab       	std	Y+48, r25	; 0x30
    1692:	8f a7       	std	Y+47, r24	; 0x2f
    1694:	0f c0       	rjmp	.+30     	; 0x16b4 <Read_eepromEmptyValue+0x220>
    1696:	88 ec       	ldi	r24, 0xC8	; 200
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9e a7       	std	Y+46, r25	; 0x2e
    169c:	8d a7       	std	Y+45, r24	; 0x2d
    169e:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a2:	01 97       	sbiw	r24, 0x01	; 1
    16a4:	f1 f7       	brne	.-4      	; 0x16a2 <Read_eepromEmptyValue+0x20e>
    16a6:	9e a7       	std	Y+46, r25	; 0x2e
    16a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    16ac:	98 a9       	ldd	r25, Y+48	; 0x30
    16ae:	01 97       	sbiw	r24, 0x01	; 1
    16b0:	98 ab       	std	Y+48, r25	; 0x30
    16b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b6:	98 a9       	ldd	r25, Y+48	; 0x30
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	69 f7       	brne	.-38     	; 0x1696 <Read_eepromEmptyValue+0x202>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <Read_eepromEmptyValue+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16be:	69 a9       	ldd	r22, Y+49	; 0x31
    16c0:	7a a9       	ldd	r23, Y+50	; 0x32
    16c2:	8b a9       	ldd	r24, Y+51	; 0x33
    16c4:	9c a9       	ldd	r25, Y+52	; 0x34
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	98 ab       	std	Y+48, r25	; 0x30
    16d0:	8f a7       	std	Y+47, r24	; 0x2f
    16d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d4:	98 a9       	ldd	r25, Y+48	; 0x30
    16d6:	9c a7       	std	Y+44, r25	; 0x2c
    16d8:	8b a7       	std	Y+43, r24	; 0x2b
    16da:	8b a5       	ldd	r24, Y+43	; 0x2b
    16dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    16de:	01 97       	sbiw	r24, 0x01	; 1
    16e0:	f1 f7       	brne	.-4      	; 0x16de <Read_eepromEmptyValue+0x24a>
    16e2:	9c a7       	std	Y+44, r25	; 0x2c
    16e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	EEPROM_readByte(0x0313, &valArray[2]);
    16e6:	ce 01       	movw	r24, r28
    16e8:	87 5b       	subi	r24, 0xB7	; 183
    16ea:	9f 4f       	sbci	r25, 0xFF	; 255
    16ec:	9c 01       	movw	r18, r24
    16ee:	2e 5f       	subi	r18, 0xFE	; 254
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
    16f2:	83 e1       	ldi	r24, 0x13	; 19
    16f4:	93 e0       	ldi	r25, 0x03	; 3
    16f6:	b9 01       	movw	r22, r18
    16f8:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e2       	ldi	r26, 0x20	; 32
    1702:	b1 e4       	ldi	r27, 0x41	; 65
    1704:	8f a3       	std	Y+39, r24	; 0x27
    1706:	98 a7       	std	Y+40, r25	; 0x28
    1708:	a9 a7       	std	Y+41, r26	; 0x29
    170a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	6f a1       	ldd	r22, Y+39	; 0x27
    170e:	78 a5       	ldd	r23, Y+40	; 0x28
    1710:	89 a5       	ldd	r24, Y+41	; 0x29
    1712:	9a a5       	ldd	r25, Y+42	; 0x2a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a ef       	ldi	r20, 0xFA	; 250
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8b a3       	std	Y+35, r24	; 0x23
    1726:	9c a3       	std	Y+36, r25	; 0x24
    1728:	ad a3       	std	Y+37, r26	; 0x25
    172a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    172c:	6b a1       	ldd	r22, Y+35	; 0x23
    172e:	7c a1       	ldd	r23, Y+36	; 0x24
    1730:	8d a1       	ldd	r24, Y+37	; 0x25
    1732:	9e a1       	ldd	r25, Y+38	; 0x26
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <Read_eepromEmptyValue+0x2ba>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9a a3       	std	Y+34, r25	; 0x22
    174a:	89 a3       	std	Y+33, r24	; 0x21
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <Read_eepromEmptyValue+0x338>
	else if (__tmp > 65535)
    174e:	6b a1       	ldd	r22, Y+35	; 0x23
    1750:	7c a1       	ldd	r23, Y+36	; 0x24
    1752:	8d a1       	ldd	r24, Y+37	; 0x25
    1754:	9e a1       	ldd	r25, Y+38	; 0x26
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <Read_eepromEmptyValue+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	6f a1       	ldd	r22, Y+39	; 0x27
    1768:	78 a5       	ldd	r23, Y+40	; 0x28
    176a:	89 a5       	ldd	r24, Y+41	; 0x29
    176c:	9a a5       	ldd	r25, Y+42	; 0x2a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9a a3       	std	Y+34, r25	; 0x22
    178c:	89 a3       	std	Y+33, r24	; 0x21
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <Read_eepromEmptyValue+0x31a>
    1790:	88 ec       	ldi	r24, 0xC8	; 200
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	98 a3       	std	Y+32, r25	; 0x20
    1796:	8f 8f       	std	Y+31, r24	; 0x1f
    1798:	8f 8d       	ldd	r24, Y+31	; 0x1f
    179a:	98 a1       	ldd	r25, Y+32	; 0x20
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <Read_eepromEmptyValue+0x308>
    17a0:	98 a3       	std	Y+32, r25	; 0x20
    17a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	89 a1       	ldd	r24, Y+33	; 0x21
    17a6:	9a a1       	ldd	r25, Y+34	; 0x22
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9a a3       	std	Y+34, r25	; 0x22
    17ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	89 a1       	ldd	r24, Y+33	; 0x21
    17b0:	9a a1       	ldd	r25, Y+34	; 0x22
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <Read_eepromEmptyValue+0x2fc>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <Read_eepromEmptyValue+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ba:	7c a1       	ldd	r23, Y+36	; 0x24
    17bc:	8d a1       	ldd	r24, Y+37	; 0x25
    17be:	9e a1       	ldd	r25, Y+38	; 0x26
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9a a3       	std	Y+34, r25	; 0x22
    17ca:	89 a3       	std	Y+33, r24	; 0x21
    17cc:	89 a1       	ldd	r24, Y+33	; 0x21
    17ce:	9a a1       	ldd	r25, Y+34	; 0x22
    17d0:	9e 8f       	std	Y+30, r25	; 0x1e
    17d2:	8d 8f       	std	Y+29, r24	; 0x1d
    17d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <Read_eepromEmptyValue+0x344>
    17dc:	9e 8f       	std	Y+30, r25	; 0x1e
    17de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	EEPROM_readByte(0x0314, &valArray[3]);
    17e0:	ce 01       	movw	r24, r28
    17e2:	87 5b       	subi	r24, 0xB7	; 183
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	9c 01       	movw	r18, r24
    17e8:	2d 5f       	subi	r18, 0xFD	; 253
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	84 e1       	ldi	r24, 0x14	; 20
    17ee:	93 e0       	ldi	r25, 0x03	; 3
    17f0:	b9 01       	movw	r22, r18
    17f2:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e2       	ldi	r26, 0x20	; 32
    17fc:	b1 e4       	ldi	r27, 0x41	; 65
    17fe:	89 8f       	std	Y+25, r24	; 0x19
    1800:	9a 8f       	std	Y+26, r25	; 0x1a
    1802:	ab 8f       	std	Y+27, r26	; 0x1b
    1804:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1806:	69 8d       	ldd	r22, Y+25	; 0x19
    1808:	7a 8d       	ldd	r23, Y+26	; 0x1a
    180a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	4a ef       	ldi	r20, 0xFA	; 250
    1814:	54 e4       	ldi	r21, 0x44	; 68
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8d 8b       	std	Y+21, r24	; 0x15
    1820:	9e 8b       	std	Y+22, r25	; 0x16
    1822:	af 8b       	std	Y+23, r26	; 0x17
    1824:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1826:	6d 89       	ldd	r22, Y+21	; 0x15
    1828:	7e 89       	ldd	r23, Y+22	; 0x16
    182a:	8f 89       	ldd	r24, Y+23	; 0x17
    182c:	98 8d       	ldd	r25, Y+24	; 0x18
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	40 e8       	ldi	r20, 0x80	; 128
    1834:	5f e3       	ldi	r21, 0x3F	; 63
    1836:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    183a:	88 23       	and	r24, r24
    183c:	2c f4       	brge	.+10     	; 0x1848 <Read_eepromEmptyValue+0x3b4>
		__ticks = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9c 8b       	std	Y+20, r25	; 0x14
    1844:	8b 8b       	std	Y+19, r24	; 0x13
    1846:	3f c0       	rjmp	.+126    	; 0x18c6 <Read_eepromEmptyValue+0x432>
	else if (__tmp > 65535)
    1848:	6d 89       	ldd	r22, Y+21	; 0x15
    184a:	7e 89       	ldd	r23, Y+22	; 0x16
    184c:	8f 89       	ldd	r24, Y+23	; 0x17
    184e:	98 8d       	ldd	r25, Y+24	; 0x18
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	3f ef       	ldi	r19, 0xFF	; 255
    1854:	4f e7       	ldi	r20, 0x7F	; 127
    1856:	57 e4       	ldi	r21, 0x47	; 71
    1858:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    185c:	18 16       	cp	r1, r24
    185e:	4c f5       	brge	.+82     	; 0x18b2 <Read_eepromEmptyValue+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1860:	69 8d       	ldd	r22, Y+25	; 0x19
    1862:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1864:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1866:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e2       	ldi	r20, 0x20	; 32
    186e:	51 e4       	ldi	r21, 0x41	; 65
    1870:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	bc 01       	movw	r22, r24
    187a:	cd 01       	movw	r24, r26
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9c 8b       	std	Y+20, r25	; 0x14
    1886:	8b 8b       	std	Y+19, r24	; 0x13
    1888:	0f c0       	rjmp	.+30     	; 0x18a8 <Read_eepromEmptyValue+0x414>
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	9a 8b       	std	Y+18, r25	; 0x12
    1890:	89 8b       	std	Y+17, r24	; 0x11
    1892:	89 89       	ldd	r24, Y+17	; 0x11
    1894:	9a 89       	ldd	r25, Y+18	; 0x12
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	f1 f7       	brne	.-4      	; 0x1896 <Read_eepromEmptyValue+0x402>
    189a:	9a 8b       	std	Y+18, r25	; 0x12
    189c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189e:	8b 89       	ldd	r24, Y+19	; 0x13
    18a0:	9c 89       	ldd	r25, Y+20	; 0x14
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	00 97       	sbiw	r24, 0x00	; 0
    18ae:	69 f7       	brne	.-38     	; 0x188a <Read_eepromEmptyValue+0x3f6>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <Read_eepromEmptyValue+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b2:	6d 89       	ldd	r22, Y+21	; 0x15
    18b4:	7e 89       	ldd	r23, Y+22	; 0x16
    18b6:	8f 89       	ldd	r24, Y+23	; 0x17
    18b8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9c 8b       	std	Y+20, r25	; 0x14
    18c4:	8b 8b       	std	Y+19, r24	; 0x13
    18c6:	8b 89       	ldd	r24, Y+19	; 0x13
    18c8:	9c 89       	ldd	r25, Y+20	; 0x14
    18ca:	98 8b       	std	Y+16, r25	; 0x10
    18cc:	8f 87       	std	Y+15, r24	; 0x0f
    18ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d0:	98 89       	ldd	r25, Y+16	; 0x10
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <Read_eepromEmptyValue+0x43e>
    18d6:	98 8b       	std	Y+16, r25	; 0x10
    18d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	EEPROM_readByte(0x0315, &valArray[4]);
    18da:	ce 01       	movw	r24, r28
    18dc:	87 5b       	subi	r24, 0xB7	; 183
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	9c 01       	movw	r18, r24
    18e2:	2c 5f       	subi	r18, 0xFC	; 252
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	85 e1       	ldi	r24, 0x15	; 21
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	b9 01       	movw	r22, r18
    18ec:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e2       	ldi	r26, 0x20	; 32
    18f6:	b1 e4       	ldi	r27, 0x41	; 65
    18f8:	8b 87       	std	Y+11, r24	; 0x0b
    18fa:	9c 87       	std	Y+12, r25	; 0x0c
    18fc:	ad 87       	std	Y+13, r26	; 0x0d
    18fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	6b 85       	ldd	r22, Y+11	; 0x0b
    1902:	7c 85       	ldd	r23, Y+12	; 0x0c
    1904:	8d 85       	ldd	r24, Y+13	; 0x0d
    1906:	9e 85       	ldd	r25, Y+14	; 0x0e
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8f 83       	std	Y+7, r24	; 0x07
    191a:	98 87       	std	Y+8, r25	; 0x08
    191c:	a9 87       	std	Y+9, r26	; 0x09
    191e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1920:	6f 81       	ldd	r22, Y+7	; 0x07
    1922:	78 85       	ldd	r23, Y+8	; 0x08
    1924:	89 85       	ldd	r24, Y+9	; 0x09
    1926:	9a 85       	ldd	r25, Y+10	; 0x0a
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <Read_eepromEmptyValue+0x4ae>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <Read_eepromEmptyValue+0x52c>
	else if (__tmp > 65535)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <Read_eepromEmptyValue+0x518>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <Read_eepromEmptyValue+0x50e>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9c 83       	std	Y+4, r25	; 0x04
    198a:	8b 83       	std	Y+3, r24	; 0x03
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <Read_eepromEmptyValue+0x4fc>
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <Read_eepromEmptyValue+0x4f0>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <Read_eepromEmptyValue+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <Read_eepromEmptyValue+0x538>
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	for(i = 0 ;i < 5; i++){
    19d4:	fe 01       	movw	r30, r28
    19d6:	e8 5b       	subi	r30, 0xB8	; 184
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	10 82       	st	Z, r1
    19dc:	21 c0       	rjmp	.+66     	; 0x1a20 <Read_eepromEmptyValue+0x58c>
		if(valArray[i] == 255){
    19de:	fe 01       	movw	r30, r28
    19e0:	e8 5b       	subi	r30, 0xB8	; 184
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	ce 01       	movw	r24, r28
    19ec:	87 5b       	subi	r24, 0xB7	; 183
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 3f       	cpi	r24, 0xFF	; 255
    19fa:	49 f4       	brne	.+18     	; 0x1a0e <Read_eepromEmptyValue+0x57a>
			eepromEmptyFlag += 1;
    19fc:	de 01       	movw	r26, r28
    19fe:	a9 5b       	subi	r26, 0xB9	; 185
    1a00:	bf 4f       	sbci	r27, 0xFF	; 255
    1a02:	fe 01       	movw	r30, r28
    1a04:	e9 5b       	subi	r30, 0xB9	; 185
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
    1a0c:	8c 93       	st	X, r24
	_delay_ms(10);

	EEPROM_readByte(0x0315, &valArray[4]);
	_delay_ms(10);

	for(i = 0 ;i < 5; i++){
    1a0e:	de 01       	movw	r26, r28
    1a10:	a8 5b       	subi	r26, 0xB8	; 184
    1a12:	bf 4f       	sbci	r27, 0xFF	; 255
    1a14:	fe 01       	movw	r30, r28
    1a16:	e8 5b       	subi	r30, 0xB8	; 184
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 5f       	subi	r24, 0xFF	; 255
    1a1e:	8c 93       	st	X, r24
    1a20:	fe 01       	movw	r30, r28
    1a22:	e8 5b       	subi	r30, 0xB8	; 184
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	85 30       	cpi	r24, 0x05	; 5
    1a2a:	c8 f2       	brcs	.-78     	; 0x19de <Read_eepromEmptyValue+0x54a>
			eepromEmptyFlag += 1;
		}
	}


	return eepromEmptyFlag;
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	e9 5b       	subi	r30, 0xB9	; 185
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	80 81       	ld	r24, Z
}
    1a34:	c3 5b       	subi	r28, 0xB3	; 179
    1a36:	df 4f       	sbci	r29, 0xFF	; 255
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret

00001a4c <Write_eepromValue>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Write_eepromValue(uint8* arr){
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	c8 54       	subi	r28, 0x48	; 72
    1a5a:	d0 40       	sbci	r29, 0x00	; 0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	fe 01       	movw	r30, r28
    1a68:	e9 5b       	subi	r30, 0xB9	; 185
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	91 83       	std	Z+1, r25	; 0x01
    1a6e:	80 83       	st	Z, r24

	/* Write Password Byte by byte */
	EEPROM_writeByte((0x0311), arr[0]);
    1a70:	fe 01       	movw	r30, r28
    1a72:	e9 5b       	subi	r30, 0xB9	; 185
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	01 90       	ld	r0, Z+
    1a78:	f0 81       	ld	r31, Z
    1a7a:	e0 2d       	mov	r30, r0
    1a7c:	20 81       	ld	r18, Z
    1a7e:	81 e1       	ldi	r24, 0x11	; 17
    1a80:	93 e0       	ldi	r25, 0x03	; 3
    1a82:	62 2f       	mov	r22, r18
    1a84:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EEPROM_writeByte>
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ed 5b       	subi	r30, 0xBD	; 189
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e2       	ldi	r26, 0x20	; 32
    1a94:	b1 e4       	ldi	r27, 0x41	; 65
    1a96:	80 83       	st	Z, r24
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	a2 83       	std	Z+2, r26	; 0x02
    1a9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	8e 01       	movw	r16, r28
    1aa0:	01 5c       	subi	r16, 0xC1	; 193
    1aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa4:	fe 01       	movw	r30, r28
    1aa6:	ed 5b       	subi	r30, 0xBD	; 189
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	60 81       	ld	r22, Z
    1aac:	71 81       	ldd	r23, Z+1	; 0x01
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	20 e0       	ldi	r18, 0x00	; 0
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	4a ef       	ldi	r20, 0xFA	; 250
    1ab8:	54 e4       	ldi	r21, 0x44	; 68
    1aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	80 83       	st	Z, r24
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	a2 83       	std	Z+2, r26	; 0x02
    1aca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1acc:	fe 01       	movw	r30, r28
    1ace:	ff 96       	adiw	r30, 0x3f	; 63
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <Write_eepromValue+0xa6>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e af       	std	Y+62, r25	; 0x3e
    1aee:	8d af       	std	Y+61, r24	; 0x3d
    1af0:	46 c0       	rjmp	.+140    	; 0x1b7e <Write_eepromValue+0x132>
	else if (__tmp > 65535)
    1af2:	fe 01       	movw	r30, r28
    1af4:	ff 96       	adiw	r30, 0x3f	; 63
    1af6:	60 81       	ld	r22, Z
    1af8:	71 81       	ldd	r23, Z+1	; 0x01
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	64 f5       	brge	.+88     	; 0x1b66 <Write_eepromValue+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	fe 01       	movw	r30, r28
    1b10:	ed 5b       	subi	r30, 0xBD	; 189
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e2       	ldi	r20, 0x20	; 32
    1b22:	51 e4       	ldi	r21, 0x41	; 65
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	9e af       	std	Y+62, r25	; 0x3e
    1b3a:	8d af       	std	Y+61, r24	; 0x3d
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <Write_eepromValue+0x110>
    1b3e:	88 ec       	ldi	r24, 0xC8	; 200
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	9c af       	std	Y+60, r25	; 0x3c
    1b44:	8b af       	std	Y+59, r24	; 0x3b
    1b46:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b48:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <Write_eepromValue+0xfe>
    1b4e:	9c af       	std	Y+60, r25	; 0x3c
    1b50:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	9e af       	std	Y+62, r25	; 0x3e
    1b5a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f7       	brne	.-38     	; 0x1b3e <Write_eepromValue+0xf2>
    1b64:	16 c0       	rjmp	.+44     	; 0x1b92 <Write_eepromValue+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b66:	fe 01       	movw	r30, r28
    1b68:	ff 96       	adiw	r30, 0x3f	; 63
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e af       	std	Y+62, r25	; 0x3e
    1b7c:	8d af       	std	Y+61, r24	; 0x3d
    1b7e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b80:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b82:	9a af       	std	Y+58, r25	; 0x3a
    1b84:	89 af       	std	Y+57, r24	; 0x39
    1b86:	89 ad       	ldd	r24, Y+57	; 0x39
    1b88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <Write_eepromValue+0x13e>
    1b8e:	9a af       	std	Y+58, r25	; 0x3a
    1b90:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(10);

	/* Write Password Byte by byte */
	EEPROM_writeByte((0x0312), arr[1]);
    1b92:	fe 01       	movw	r30, r28
    1b94:	e9 5b       	subi	r30, 0xB9	; 185
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	31 96       	adiw	r30, 0x01	; 1
    1ba0:	20 81       	ld	r18, Z
    1ba2:	82 e1       	ldi	r24, 0x12	; 18
    1ba4:	93 e0       	ldi	r25, 0x03	; 3
    1ba6:	62 2f       	mov	r22, r18
    1ba8:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EEPROM_writeByte>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	a0 e2       	ldi	r26, 0x20	; 32
    1bb2:	b1 e4       	ldi	r27, 0x41	; 65
    1bb4:	8d ab       	std	Y+53, r24	; 0x35
    1bb6:	9e ab       	std	Y+54, r25	; 0x36
    1bb8:	af ab       	std	Y+55, r26	; 0x37
    1bba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1bc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a ef       	ldi	r20, 0xFA	; 250
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	89 ab       	std	Y+49, r24	; 0x31
    1bd6:	9a ab       	std	Y+50, r25	; 0x32
    1bd8:	ab ab       	std	Y+51, r26	; 0x33
    1bda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bde:	7a a9       	ldd	r23, Y+50	; 0x32
    1be0:	8b a9       	ldd	r24, Y+51	; 0x33
    1be2:	9c a9       	ldd	r25, Y+52	; 0x34
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <Write_eepromValue+0x1b2>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	98 ab       	std	Y+48, r25	; 0x30
    1bfa:	8f a7       	std	Y+47, r24	; 0x2f
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <Write_eepromValue+0x230>
	else if (__tmp > 65535)
    1bfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1c00:	7a a9       	ldd	r23, Y+50	; 0x32
    1c02:	8b a9       	ldd	r24, Y+51	; 0x33
    1c04:	9c a9       	ldd	r25, Y+52	; 0x34
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <Write_eepromValue+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6d a9       	ldd	r22, Y+53	; 0x35
    1c18:	7e a9       	ldd	r23, Y+54	; 0x36
    1c1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	98 ab       	std	Y+48, r25	; 0x30
    1c3c:	8f a7       	std	Y+47, r24	; 0x2f
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <Write_eepromValue+0x212>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9e a7       	std	Y+46, r25	; 0x2e
    1c46:	8d a7       	std	Y+45, r24	; 0x2d
    1c48:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <Write_eepromValue+0x200>
    1c50:	9e a7       	std	Y+46, r25	; 0x2e
    1c52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c56:	98 a9       	ldd	r25, Y+48	; 0x30
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	98 ab       	std	Y+48, r25	; 0x30
    1c5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c60:	98 a9       	ldd	r25, Y+48	; 0x30
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <Write_eepromValue+0x1f4>
    1c66:	14 c0       	rjmp	.+40     	; 0x1c90 <Write_eepromValue+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	69 a9       	ldd	r22, Y+49	; 0x31
    1c6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	98 ab       	std	Y+48, r25	; 0x30
    1c7a:	8f a7       	std	Y+47, r24	; 0x2f
    1c7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c80:	9c a7       	std	Y+44, r25	; 0x2c
    1c82:	8b a7       	std	Y+43, r24	; 0x2b
    1c84:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c86:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <Write_eepromValue+0x23c>
    1c8c:	9c a7       	std	Y+44, r25	; 0x2c
    1c8e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(10);


	/* Write Password Byte by byte */
	EEPROM_writeByte((0x0313), arr[2]);
    1c90:	fe 01       	movw	r30, r28
    1c92:	e9 5b       	subi	r30, 0xB9	; 185
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	32 96       	adiw	r30, 0x02	; 2
    1c9e:	20 81       	ld	r18, Z
    1ca0:	83 e1       	ldi	r24, 0x13	; 19
    1ca2:	93 e0       	ldi	r25, 0x03	; 3
    1ca4:	62 2f       	mov	r22, r18
    1ca6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EEPROM_writeByte>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e2       	ldi	r26, 0x20	; 32
    1cb0:	b1 e4       	ldi	r27, 0x41	; 65
    1cb2:	8f a3       	std	Y+39, r24	; 0x27
    1cb4:	98 a7       	std	Y+40, r25	; 0x28
    1cb6:	a9 a7       	std	Y+41, r26	; 0x29
    1cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8b a3       	std	Y+35, r24	; 0x23
    1cd4:	9c a3       	std	Y+36, r25	; 0x24
    1cd6:	ad a3       	std	Y+37, r26	; 0x25
    1cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cda:	6b a1       	ldd	r22, Y+35	; 0x23
    1cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cde:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <Write_eepromValue+0x2b0>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <Write_eepromValue+0x32e>
	else if (__tmp > 65535)
    1cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1d00:	8d a1       	ldd	r24, Y+37	; 0x25
    1d02:	9e a1       	ldd	r25, Y+38	; 0x26
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <Write_eepromValue+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6f a1       	ldd	r22, Y+39	; 0x27
    1d16:	78 a5       	ldd	r23, Y+40	; 0x28
    1d18:	89 a5       	ldd	r24, Y+41	; 0x29
    1d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <Write_eepromValue+0x310>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	98 a3       	std	Y+32, r25	; 0x20
    1d44:	8f 8f       	std	Y+31, r24	; 0x1f
    1d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d48:	98 a1       	ldd	r25, Y+32	; 0x20
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <Write_eepromValue+0x2fe>
    1d4e:	98 a3       	std	Y+32, r25	; 0x20
    1d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	89 a1       	ldd	r24, Y+33	; 0x21
    1d54:	9a a1       	ldd	r25, Y+34	; 0x22
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <Write_eepromValue+0x2f2>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <Write_eepromValue+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	89 a3       	std	Y+33, r24	; 0x21
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d80:	8d 8f       	std	Y+29, r24	; 0x1d
    1d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <Write_eepromValue+0x33a>
    1d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(10);

	/* Write Password Byte by byte */
	EEPROM_writeByte((0x0314), arr[3]);
    1d8e:	fe 01       	movw	r30, r28
    1d90:	e9 5b       	subi	r30, 0xB9	; 185
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	80 81       	ld	r24, Z
    1d96:	91 81       	ldd	r25, Z+1	; 0x01
    1d98:	fc 01       	movw	r30, r24
    1d9a:	33 96       	adiw	r30, 0x03	; 3
    1d9c:	20 81       	ld	r18, Z
    1d9e:	84 e1       	ldi	r24, 0x14	; 20
    1da0:	93 e0       	ldi	r25, 0x03	; 3
    1da2:	62 2f       	mov	r22, r18
    1da4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EEPROM_writeByte>
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a0 e2       	ldi	r26, 0x20	; 32
    1dae:	b1 e4       	ldi	r27, 0x41	; 65
    1db0:	89 8f       	std	Y+25, r24	; 0x19
    1db2:	9a 8f       	std	Y+26, r25	; 0x1a
    1db4:	ab 8f       	std	Y+27, r26	; 0x1b
    1db6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	8d 8b       	std	Y+21, r24	; 0x15
    1dd2:	9e 8b       	std	Y+22, r25	; 0x16
    1dd4:	af 8b       	std	Y+23, r26	; 0x17
    1dd6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dda:	7e 89       	ldd	r23, Y+22	; 0x16
    1ddc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dde:	98 8d       	ldd	r25, Y+24	; 0x18
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e8       	ldi	r20, 0x80	; 128
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dec:	88 23       	and	r24, r24
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <Write_eepromValue+0x3ae>
		__ticks = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	3f c0       	rjmp	.+126    	; 0x1e78 <Write_eepromValue+0x42c>
	else if (__tmp > 65535)
    1dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1e00:	98 8d       	ldd	r25, Y+24	; 0x18
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	3f ef       	ldi	r19, 0xFF	; 255
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	57 e4       	ldi	r21, 0x47	; 71
    1e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	4c f5       	brge	.+82     	; 0x1e64 <Write_eepromValue+0x418>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e12:	69 8d       	ldd	r22, Y+25	; 0x19
    1e14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e2       	ldi	r20, 0x20	; 32
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	9c 8b       	std	Y+20, r25	; 0x14
    1e38:	8b 8b       	std	Y+19, r24	; 0x13
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <Write_eepromValue+0x40e>
    1e3c:	88 ec       	ldi	r24, 0xC8	; 200
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9a 8b       	std	Y+18, r25	; 0x12
    1e42:	89 8b       	std	Y+17, r24	; 0x11
    1e44:	89 89       	ldd	r24, Y+17	; 0x11
    1e46:	9a 89       	ldd	r25, Y+18	; 0x12
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <Write_eepromValue+0x3fc>
    1e4c:	9a 8b       	std	Y+18, r25	; 0x12
    1e4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	9c 8b       	std	Y+20, r25	; 0x14
    1e58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e5e:	00 97       	sbiw	r24, 0x00	; 0
    1e60:	69 f7       	brne	.-38     	; 0x1e3c <Write_eepromValue+0x3f0>
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <Write_eepromValue+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e64:	6d 89       	ldd	r22, Y+21	; 0x15
    1e66:	7e 89       	ldd	r23, Y+22	; 0x16
    1e68:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9c 8b       	std	Y+20, r25	; 0x14
    1e76:	8b 8b       	std	Y+19, r24	; 0x13
    1e78:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7c:	98 8b       	std	Y+16, r25	; 0x10
    1e7e:	8f 87       	std	Y+15, r24	; 0x0f
    1e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e82:	98 89       	ldd	r25, Y+16	; 0x10
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <Write_eepromValue+0x438>
    1e88:	98 8b       	std	Y+16, r25	; 0x10
    1e8a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(10);


	/* Write Password Byte by byte */
	EEPROM_writeByte((0x0315), arr[4]);
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e9 5b       	subi	r30, 0xB9	; 185
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	fc 01       	movw	r30, r24
    1e98:	34 96       	adiw	r30, 0x04	; 4
    1e9a:	20 81       	ld	r18, Z
    1e9c:	85 e1       	ldi	r24, 0x15	; 21
    1e9e:	93 e0       	ldi	r25, 0x03	; 3
    1ea0:	62 2f       	mov	r22, r18
    1ea2:	0e 94 ae 06 	call	0xd5c	; 0xd5c <EEPROM_writeByte>
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 e2       	ldi	r26, 0x20	; 32
    1eac:	b1 e4       	ldi	r27, 0x41	; 65
    1eae:	8b 87       	std	Y+11, r24	; 0x0b
    1eb0:	9c 87       	std	Y+12, r25	; 0x0c
    1eb2:	ad 87       	std	Y+13, r26	; 0x0d
    1eb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a ef       	ldi	r20, 0xFA	; 250
    1ec4:	54 e4       	ldi	r21, 0x44	; 68
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	8f 83       	std	Y+7, r24	; 0x07
    1ed0:	98 87       	std	Y+8, r25	; 0x08
    1ed2:	a9 87       	std	Y+9, r26	; 0x09
    1ed4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <Write_eepromValue+0x4ac>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <Write_eepromValue+0x52a>
	else if (__tmp > 65535)
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <Write_eepromValue+0x516>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9e 83       	std	Y+6, r25	; 0x06
    1f36:	8d 83       	std	Y+5, r24	; 0x05
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <Write_eepromValue+0x50c>
    1f3a:	88 ec       	ldi	r24, 0xC8	; 200
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <Write_eepromValue+0x4fa>
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f50:	9e 81       	ldd	r25, Y+6	; 0x06
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <Write_eepromValue+0x4ee>
    1f60:	14 c0       	rjmp	.+40     	; 0x1f8a <Write_eepromValue+0x53e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <Write_eepromValue+0x536>
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(10);
}
    1f8a:	c8 5b       	subi	r28, 0xB8	; 184
    1f8c:	df 4f       	sbci	r29, 0xFF	; 255
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret

00001fa2 <Compare_eepromMultipleValue>:

 [in/out]			None

 [Returns]:			Count of equal Flag (it should be 5 if all 5 slots are the same)
 **********************************************************************************/
uint8 Compare_eepromMultipleValue(uint8* arr){
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	cf 54       	subi	r28, 0x4F	; 79
    1fb0:	d0 40       	sbci	r29, 0x00	; 0
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	e2 5b       	subi	r30, 0xB2	; 178
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24

	uint8 valArray[5] = {0};
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	87 5b       	subi	r24, 0xB7	; 183
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	25 e0       	ldi	r18, 0x05	; 5
    1fce:	fc 01       	movw	r30, r24
    1fd0:	df 01       	movw	r26, r30
    1fd2:	82 2f       	mov	r24, r18
    1fd4:	1d 92       	st	X+, r1
    1fd6:	8a 95       	dec	r24
    1fd8:	e9 f7       	brne	.-6      	; 0x1fd4 <Compare_eepromMultipleValue+0x32>
	uint8 i = 0;
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e8 5b       	subi	r30, 0xB8	; 184
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	10 82       	st	Z, r1
	uint8 eepromEqualityFlag = 0;
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e9 5b       	subi	r30, 0xB9	; 185
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	10 82       	st	Z, r1
	//Read byte by byte from EEPROM
	EEPROM_readByte(0x0311, &valArray[0]);
    1fea:	9e 01       	movw	r18, r28
    1fec:	27 5b       	subi	r18, 0xB7	; 183
    1fee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff0:	81 e1       	ldi	r24, 0x11	; 17
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	b9 01       	movw	r22, r18
    1ff6:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ed 5b       	subi	r30, 0xBD	; 189
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e2       	ldi	r26, 0x20	; 32
    2006:	b1 e4       	ldi	r27, 0x41	; 65
    2008:	80 83       	st	Z, r24
    200a:	91 83       	std	Z+1, r25	; 0x01
    200c:	a2 83       	std	Z+2, r26	; 0x02
    200e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2010:	8e 01       	movw	r16, r28
    2012:	01 5c       	subi	r16, 0xC1	; 193
    2014:	1f 4f       	sbci	r17, 0xFF	; 255
    2016:	fe 01       	movw	r30, r28
    2018:	ed 5b       	subi	r30, 0xBD	; 189
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	60 81       	ld	r22, Z
    201e:	71 81       	ldd	r23, Z+1	; 0x01
    2020:	82 81       	ldd	r24, Z+2	; 0x02
    2022:	93 81       	ldd	r25, Z+3	; 0x03
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	f8 01       	movw	r30, r16
    2036:	80 83       	st	Z, r24
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	a2 83       	std	Z+2, r26	; 0x02
    203c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    203e:	fe 01       	movw	r30, r28
    2040:	ff 96       	adiw	r30, 0x3f	; 63
    2042:	60 81       	ld	r22, Z
    2044:	71 81       	ldd	r23, Z+1	; 0x01
    2046:	82 81       	ldd	r24, Z+2	; 0x02
    2048:	93 81       	ldd	r25, Z+3	; 0x03
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	5f e3       	ldi	r21, 0x3F	; 63
    2052:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2056:	88 23       	and	r24, r24
    2058:	2c f4       	brge	.+10     	; 0x2064 <Compare_eepromMultipleValue+0xc2>
		__ticks = 1;
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9e af       	std	Y+62, r25	; 0x3e
    2060:	8d af       	std	Y+61, r24	; 0x3d
    2062:	46 c0       	rjmp	.+140    	; 0x20f0 <Compare_eepromMultipleValue+0x14e>
	else if (__tmp > 65535)
    2064:	fe 01       	movw	r30, r28
    2066:	ff 96       	adiw	r30, 0x3f	; 63
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	3f ef       	ldi	r19, 0xFF	; 255
    2074:	4f e7       	ldi	r20, 0x7F	; 127
    2076:	57 e4       	ldi	r21, 0x47	; 71
    2078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    207c:	18 16       	cp	r1, r24
    207e:	64 f5       	brge	.+88     	; 0x20d8 <Compare_eepromMultipleValue+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2080:	fe 01       	movw	r30, r28
    2082:	ed 5b       	subi	r30, 0xBD	; 189
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e af       	std	Y+62, r25	; 0x3e
    20ac:	8d af       	std	Y+61, r24	; 0x3d
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <Compare_eepromMultipleValue+0x12c>
    20b0:	88 ec       	ldi	r24, 0xC8	; 200
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9c af       	std	Y+60, r25	; 0x3c
    20b6:	8b af       	std	Y+59, r24	; 0x3b
    20b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <Compare_eepromMultipleValue+0x11a>
    20c0:	9c af       	std	Y+60, r25	; 0x3c
    20c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9e af       	std	Y+62, r25	; 0x3e
    20cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    20d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <Compare_eepromMultipleValue+0x10e>
    20d6:	16 c0       	rjmp	.+44     	; 0x2104 <Compare_eepromMultipleValue+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	fe 01       	movw	r30, r28
    20da:	ff 96       	adiw	r30, 0x3f	; 63
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9e af       	std	Y+62, r25	; 0x3e
    20ee:	8d af       	std	Y+61, r24	; 0x3d
    20f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f4:	9a af       	std	Y+58, r25	; 0x3a
    20f6:	89 af       	std	Y+57, r24	; 0x39
    20f8:	89 ad       	ldd	r24, Y+57	; 0x39
    20fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <Compare_eepromMultipleValue+0x15a>
    2100:	9a af       	std	Y+58, r25	; 0x3a
    2102:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);

	EEPROM_readByte(0x0312, &valArray[1]);
    2104:	ce 01       	movw	r24, r28
    2106:	87 5b       	subi	r24, 0xB7	; 183
    2108:	9f 4f       	sbci	r25, 0xFF	; 255
    210a:	9c 01       	movw	r18, r24
    210c:	2f 5f       	subi	r18, 0xFF	; 255
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	82 e1       	ldi	r24, 0x12	; 18
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	b9 01       	movw	r22, r18
    2116:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 e2       	ldi	r26, 0x20	; 32
    2120:	b1 e4       	ldi	r27, 0x41	; 65
    2122:	8d ab       	std	Y+53, r24	; 0x35
    2124:	9e ab       	std	Y+54, r25	; 0x36
    2126:	af ab       	std	Y+55, r26	; 0x37
    2128:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	6d a9       	ldd	r22, Y+53	; 0x35
    212c:	7e a9       	ldd	r23, Y+54	; 0x36
    212e:	8f a9       	ldd	r24, Y+55	; 0x37
    2130:	98 ad       	ldd	r25, Y+56	; 0x38
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a ef       	ldi	r20, 0xFA	; 250
    2138:	54 e4       	ldi	r21, 0x44	; 68
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	89 ab       	std	Y+49, r24	; 0x31
    2144:	9a ab       	std	Y+50, r25	; 0x32
    2146:	ab ab       	std	Y+51, r26	; 0x33
    2148:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    214a:	69 a9       	ldd	r22, Y+49	; 0x31
    214c:	7a a9       	ldd	r23, Y+50	; 0x32
    214e:	8b a9       	ldd	r24, Y+51	; 0x33
    2150:	9c a9       	ldd	r25, Y+52	; 0x34
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <Compare_eepromMultipleValue+0x1ca>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	98 ab       	std	Y+48, r25	; 0x30
    2168:	8f a7       	std	Y+47, r24	; 0x2f
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <Compare_eepromMultipleValue+0x248>
	else if (__tmp > 65535)
    216c:	69 a9       	ldd	r22, Y+49	; 0x31
    216e:	7a a9       	ldd	r23, Y+50	; 0x32
    2170:	8b a9       	ldd	r24, Y+51	; 0x33
    2172:	9c a9       	ldd	r25, Y+52	; 0x34
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <Compare_eepromMultipleValue+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	6d a9       	ldd	r22, Y+53	; 0x35
    2186:	7e a9       	ldd	r23, Y+54	; 0x36
    2188:	8f a9       	ldd	r24, Y+55	; 0x37
    218a:	98 ad       	ldd	r25, Y+56	; 0x38
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	98 ab       	std	Y+48, r25	; 0x30
    21aa:	8f a7       	std	Y+47, r24	; 0x2f
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <Compare_eepromMultipleValue+0x22a>
    21ae:	88 ec       	ldi	r24, 0xC8	; 200
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9e a7       	std	Y+46, r25	; 0x2e
    21b4:	8d a7       	std	Y+45, r24	; 0x2d
    21b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    21b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <Compare_eepromMultipleValue+0x218>
    21be:	9e a7       	std	Y+46, r25	; 0x2e
    21c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c4:	98 a9       	ldd	r25, Y+48	; 0x30
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	98 ab       	std	Y+48, r25	; 0x30
    21ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ce:	98 a9       	ldd	r25, Y+48	; 0x30
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	69 f7       	brne	.-38     	; 0x21ae <Compare_eepromMultipleValue+0x20c>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <Compare_eepromMultipleValue+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	69 a9       	ldd	r22, Y+49	; 0x31
    21d8:	7a a9       	ldd	r23, Y+50	; 0x32
    21da:	8b a9       	ldd	r24, Y+51	; 0x33
    21dc:	9c a9       	ldd	r25, Y+52	; 0x34
    21de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	98 ab       	std	Y+48, r25	; 0x30
    21e8:	8f a7       	std	Y+47, r24	; 0x2f
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	9c a7       	std	Y+44, r25	; 0x2c
    21f0:	8b a7       	std	Y+43, r24	; 0x2b
    21f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <Compare_eepromMultipleValue+0x254>
    21fa:	9c a7       	std	Y+44, r25	; 0x2c
    21fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);

	EEPROM_readByte(0x0313, &valArray[2]);
    21fe:	ce 01       	movw	r24, r28
    2200:	87 5b       	subi	r24, 0xB7	; 183
    2202:	9f 4f       	sbci	r25, 0xFF	; 255
    2204:	9c 01       	movw	r18, r24
    2206:	2e 5f       	subi	r18, 0xFE	; 254
    2208:	3f 4f       	sbci	r19, 0xFF	; 255
    220a:	83 e1       	ldi	r24, 0x13	; 19
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	b9 01       	movw	r22, r18
    2210:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a0 e2       	ldi	r26, 0x20	; 32
    221a:	b1 e4       	ldi	r27, 0x41	; 65
    221c:	8f a3       	std	Y+39, r24	; 0x27
    221e:	98 a7       	std	Y+40, r25	; 0x28
    2220:	a9 a7       	std	Y+41, r26	; 0x29
    2222:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2224:	6f a1       	ldd	r22, Y+39	; 0x27
    2226:	78 a5       	ldd	r23, Y+40	; 0x28
    2228:	89 a5       	ldd	r24, Y+41	; 0x29
    222a:	9a a5       	ldd	r25, Y+42	; 0x2a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	4a ef       	ldi	r20, 0xFA	; 250
    2232:	54 e4       	ldi	r21, 0x44	; 68
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	8b a3       	std	Y+35, r24	; 0x23
    223e:	9c a3       	std	Y+36, r25	; 0x24
    2240:	ad a3       	std	Y+37, r26	; 0x25
    2242:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2244:	6b a1       	ldd	r22, Y+35	; 0x23
    2246:	7c a1       	ldd	r23, Y+36	; 0x24
    2248:	8d a1       	ldd	r24, Y+37	; 0x25
    224a:	9e a1       	ldd	r25, Y+38	; 0x26
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	2c f4       	brge	.+10     	; 0x2266 <Compare_eepromMultipleValue+0x2c4>
		__ticks = 1;
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	9a a3       	std	Y+34, r25	; 0x22
    2262:	89 a3       	std	Y+33, r24	; 0x21
    2264:	3f c0       	rjmp	.+126    	; 0x22e4 <Compare_eepromMultipleValue+0x342>
	else if (__tmp > 65535)
    2266:	6b a1       	ldd	r22, Y+35	; 0x23
    2268:	7c a1       	ldd	r23, Y+36	; 0x24
    226a:	8d a1       	ldd	r24, Y+37	; 0x25
    226c:	9e a1       	ldd	r25, Y+38	; 0x26
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	3f ef       	ldi	r19, 0xFF	; 255
    2272:	4f e7       	ldi	r20, 0x7F	; 127
    2274:	57 e4       	ldi	r21, 0x47	; 71
    2276:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227a:	18 16       	cp	r1, r24
    227c:	4c f5       	brge	.+82     	; 0x22d0 <Compare_eepromMultipleValue+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227e:	6f a1       	ldd	r22, Y+39	; 0x27
    2280:	78 a5       	ldd	r23, Y+40	; 0x28
    2282:	89 a5       	ldd	r24, Y+41	; 0x29
    2284:	9a a5       	ldd	r25, Y+42	; 0x2a
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	40 e2       	ldi	r20, 0x20	; 32
    228c:	51 e4       	ldi	r21, 0x41	; 65
    228e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	9a a3       	std	Y+34, r25	; 0x22
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	0f c0       	rjmp	.+30     	; 0x22c6 <Compare_eepromMultipleValue+0x324>
    22a8:	88 ec       	ldi	r24, 0xC8	; 200
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	98 a3       	std	Y+32, r25	; 0x20
    22ae:	8f 8f       	std	Y+31, r24	; 0x1f
    22b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b2:	98 a1       	ldd	r25, Y+32	; 0x20
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	f1 f7       	brne	.-4      	; 0x22b4 <Compare_eepromMultipleValue+0x312>
    22b8:	98 a3       	std	Y+32, r25	; 0x20
    22ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22bc:	89 a1       	ldd	r24, Y+33	; 0x21
    22be:	9a a1       	ldd	r25, Y+34	; 0x22
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	9a a3       	std	Y+34, r25	; 0x22
    22c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c6:	89 a1       	ldd	r24, Y+33	; 0x21
    22c8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	69 f7       	brne	.-38     	; 0x22a8 <Compare_eepromMultipleValue+0x306>
    22ce:	14 c0       	rjmp	.+40     	; 0x22f8 <Compare_eepromMultipleValue+0x356>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d0:	6b a1       	ldd	r22, Y+35	; 0x23
    22d2:	7c a1       	ldd	r23, Y+36	; 0x24
    22d4:	8d a1       	ldd	r24, Y+37	; 0x25
    22d6:	9e a1       	ldd	r25, Y+38	; 0x26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9a a3       	std	Y+34, r25	; 0x22
    22e2:	89 a3       	std	Y+33, r24	; 0x21
    22e4:	89 a1       	ldd	r24, Y+33	; 0x21
    22e6:	9a a1       	ldd	r25, Y+34	; 0x22
    22e8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ea:	8d 8f       	std	Y+29, r24	; 0x1d
    22ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	f1 f7       	brne	.-4      	; 0x22f0 <Compare_eepromMultipleValue+0x34e>
    22f4:	9e 8f       	std	Y+30, r25	; 0x1e
    22f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	EEPROM_readByte(0x0314, &valArray[3]);
    22f8:	ce 01       	movw	r24, r28
    22fa:	87 5b       	subi	r24, 0xB7	; 183
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	9c 01       	movw	r18, r24
    2300:	2d 5f       	subi	r18, 0xFD	; 253
    2302:	3f 4f       	sbci	r19, 0xFF	; 255
    2304:	84 e1       	ldi	r24, 0x14	; 20
    2306:	93 e0       	ldi	r25, 0x03	; 3
    2308:	b9 01       	movw	r22, r18
    230a:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	a0 e2       	ldi	r26, 0x20	; 32
    2314:	b1 e4       	ldi	r27, 0x41	; 65
    2316:	89 8f       	std	Y+25, r24	; 0x19
    2318:	9a 8f       	std	Y+26, r25	; 0x1a
    231a:	ab 8f       	std	Y+27, r26	; 0x1b
    231c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231e:	69 8d       	ldd	r22, Y+25	; 0x19
    2320:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2322:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2324:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	4a ef       	ldi	r20, 0xFA	; 250
    232c:	54 e4       	ldi	r21, 0x44	; 68
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	8d 8b       	std	Y+21, r24	; 0x15
    2338:	9e 8b       	std	Y+22, r25	; 0x16
    233a:	af 8b       	std	Y+23, r26	; 0x17
    233c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    233e:	6d 89       	ldd	r22, Y+21	; 0x15
    2340:	7e 89       	ldd	r23, Y+22	; 0x16
    2342:	8f 89       	ldd	r24, Y+23	; 0x17
    2344:	98 8d       	ldd	r25, Y+24	; 0x18
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e8       	ldi	r20, 0x80	; 128
    234c:	5f e3       	ldi	r21, 0x3F	; 63
    234e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2352:	88 23       	and	r24, r24
    2354:	2c f4       	brge	.+10     	; 0x2360 <Compare_eepromMultipleValue+0x3be>
		__ticks = 1;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9c 8b       	std	Y+20, r25	; 0x14
    235c:	8b 8b       	std	Y+19, r24	; 0x13
    235e:	3f c0       	rjmp	.+126    	; 0x23de <Compare_eepromMultipleValue+0x43c>
	else if (__tmp > 65535)
    2360:	6d 89       	ldd	r22, Y+21	; 0x15
    2362:	7e 89       	ldd	r23, Y+22	; 0x16
    2364:	8f 89       	ldd	r24, Y+23	; 0x17
    2366:	98 8d       	ldd	r25, Y+24	; 0x18
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	3f ef       	ldi	r19, 0xFF	; 255
    236c:	4f e7       	ldi	r20, 0x7F	; 127
    236e:	57 e4       	ldi	r21, 0x47	; 71
    2370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2374:	18 16       	cp	r1, r24
    2376:	4c f5       	brge	.+82     	; 0x23ca <Compare_eepromMultipleValue+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2378:	69 8d       	ldd	r22, Y+25	; 0x19
    237a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    237c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e2       	ldi	r20, 0x20	; 32
    2386:	51 e4       	ldi	r21, 0x41	; 65
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	bc 01       	movw	r22, r24
    2392:	cd 01       	movw	r24, r26
    2394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
    23a0:	0f c0       	rjmp	.+30     	; 0x23c0 <Compare_eepromMultipleValue+0x41e>
    23a2:	88 ec       	ldi	r24, 0xC8	; 200
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	9a 8b       	std	Y+18, r25	; 0x12
    23a8:	89 8b       	std	Y+17, r24	; 0x11
    23aa:	89 89       	ldd	r24, Y+17	; 0x11
    23ac:	9a 89       	ldd	r25, Y+18	; 0x12
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <Compare_eepromMultipleValue+0x40c>
    23b2:	9a 8b       	std	Y+18, r25	; 0x12
    23b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b6:	8b 89       	ldd	r24, Y+19	; 0x13
    23b8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	9c 8b       	std	Y+20, r25	; 0x14
    23be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	69 f7       	brne	.-38     	; 0x23a2 <Compare_eepromMultipleValue+0x400>
    23c8:	14 c0       	rjmp	.+40     	; 0x23f2 <Compare_eepromMultipleValue+0x450>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	6d 89       	ldd	r22, Y+21	; 0x15
    23cc:	7e 89       	ldd	r23, Y+22	; 0x16
    23ce:	8f 89       	ldd	r24, Y+23	; 0x17
    23d0:	98 8d       	ldd	r25, Y+24	; 0x18
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	8b 89       	ldd	r24, Y+19	; 0x13
    23e0:	9c 89       	ldd	r25, Y+20	; 0x14
    23e2:	98 8b       	std	Y+16, r25	; 0x10
    23e4:	8f 87       	std	Y+15, r24	; 0x0f
    23e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e8:	98 89       	ldd	r25, Y+16	; 0x10
    23ea:	01 97       	sbiw	r24, 0x01	; 1
    23ec:	f1 f7       	brne	.-4      	; 0x23ea <Compare_eepromMultipleValue+0x448>
    23ee:	98 8b       	std	Y+16, r25	; 0x10
    23f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);

	EEPROM_readByte(0x0315, &valArray[4]);
    23f2:	ce 01       	movw	r24, r28
    23f4:	87 5b       	subi	r24, 0xB7	; 183
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	9c 01       	movw	r18, r24
    23fa:	2c 5f       	subi	r18, 0xFC	; 252
    23fc:	3f 4f       	sbci	r19, 0xFF	; 255
    23fe:	85 e1       	ldi	r24, 0x15	; 21
    2400:	93 e0       	ldi	r25, 0x03	; 3
    2402:	b9 01       	movw	r22, r18
    2404:	0e 94 ef 06 	call	0xdde	; 0xdde <EEPROM_readByte>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e2       	ldi	r26, 0x20	; 32
    240e:	b1 e4       	ldi	r27, 0x41	; 65
    2410:	8b 87       	std	Y+11, r24	; 0x0b
    2412:	9c 87       	std	Y+12, r25	; 0x0c
    2414:	ad 87       	std	Y+13, r26	; 0x0d
    2416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a ef       	ldi	r20, 0xFA	; 250
    2426:	54 e4       	ldi	r21, 0x44	; 68
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8f 83       	std	Y+7, r24	; 0x07
    2432:	98 87       	std	Y+8, r25	; 0x08
    2434:	a9 87       	std	Y+9, r26	; 0x09
    2436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2438:	6f 81       	ldd	r22, Y+7	; 0x07
    243a:	78 85       	ldd	r23, Y+8	; 0x08
    243c:	89 85       	ldd	r24, Y+9	; 0x09
    243e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <Compare_eepromMultipleValue+0x4b8>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <Compare_eepromMultipleValue+0x536>
	else if (__tmp > 65535)
    245a:	6f 81       	ldd	r22, Y+7	; 0x07
    245c:	78 85       	ldd	r23, Y+8	; 0x08
    245e:	89 85       	ldd	r24, Y+9	; 0x09
    2460:	9a 85       	ldd	r25, Y+10	; 0x0a
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <Compare_eepromMultipleValue+0x522>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <Compare_eepromMultipleValue+0x518>
    249c:	88 ec       	ldi	r24, 0xC8	; 200
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	8b 81       	ldd	r24, Y+3	; 0x03
    24a6:	9c 81       	ldd	r25, Y+4	; 0x04
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <Compare_eepromMultipleValue+0x506>
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
    24b2:	9e 81       	ldd	r25, Y+6	; 0x06
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9e 83       	std	Y+6, r25	; 0x06
    24b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <Compare_eepromMultipleValue+0x4fa>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <Compare_eepromMultipleValue+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6f 81       	ldd	r22, Y+7	; 0x07
    24c6:	78 85       	ldd	r23, Y+8	; 0x08
    24c8:	89 85       	ldd	r24, Y+9	; 0x09
    24ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9e 83       	std	Y+6, r25	; 0x06
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	8d 81       	ldd	r24, Y+5	; 0x05
    24da:	9e 81       	ldd	r25, Y+6	; 0x06
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	9a 81       	ldd	r25, Y+2	; 0x02
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <Compare_eepromMultipleValue+0x542>
    24e8:	9a 83       	std	Y+2, r25	; 0x02
    24ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	for(i = 0 ;i < 5; i++){
    24ec:	fe 01       	movw	r30, r28
    24ee:	e8 5b       	subi	r30, 0xB8	; 184
    24f0:	ff 4f       	sbci	r31, 0xFF	; 255
    24f2:	10 82       	st	Z, r1
    24f4:	30 c0       	rjmp	.+96     	; 0x2556 <Compare_eepromMultipleValue+0x5b4>
		if(valArray[i] == arr[i]){
    24f6:	fe 01       	movw	r30, r28
    24f8:	e8 5b       	subi	r30, 0xB8	; 184
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	80 81       	ld	r24, Z
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	ce 01       	movw	r24, r28
    2504:	87 5b       	subi	r24, 0xB7	; 183
    2506:	9f 4f       	sbci	r25, 0xFF	; 255
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	40 81       	ld	r20, Z
    2510:	fe 01       	movw	r30, r28
    2512:	e8 5b       	subi	r30, 0xB8	; 184
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	fe 01       	movw	r30, r28
    251e:	e2 5b       	subi	r30, 0xB2	; 178
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	80 81       	ld	r24, Z
    2524:	91 81       	ldd	r25, Z+1	; 0x01
    2526:	fc 01       	movw	r30, r24
    2528:	e2 0f       	add	r30, r18
    252a:	f3 1f       	adc	r31, r19
    252c:	80 81       	ld	r24, Z
    252e:	48 17       	cp	r20, r24
    2530:	49 f4       	brne	.+18     	; 0x2544 <Compare_eepromMultipleValue+0x5a2>
			eepromEqualityFlag += 1;
    2532:	de 01       	movw	r26, r28
    2534:	a9 5b       	subi	r26, 0xB9	; 185
    2536:	bf 4f       	sbci	r27, 0xFF	; 255
    2538:	fe 01       	movw	r30, r28
    253a:	e9 5b       	subi	r30, 0xB9	; 185
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	8f 5f       	subi	r24, 0xFF	; 255
    2542:	8c 93       	st	X, r24
	_delay_ms(10);

	EEPROM_readByte(0x0315, &valArray[4]);
	_delay_ms(10);

	for(i = 0 ;i < 5; i++){
    2544:	de 01       	movw	r26, r28
    2546:	a8 5b       	subi	r26, 0xB8	; 184
    2548:	bf 4f       	sbci	r27, 0xFF	; 255
    254a:	fe 01       	movw	r30, r28
    254c:	e8 5b       	subi	r30, 0xB8	; 184
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	80 81       	ld	r24, Z
    2552:	8f 5f       	subi	r24, 0xFF	; 255
    2554:	8c 93       	st	X, r24
    2556:	fe 01       	movw	r30, r28
    2558:	e8 5b       	subi	r30, 0xB8	; 184
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	85 30       	cpi	r24, 0x05	; 5
    2560:	50 f2       	brcs	.-108    	; 0x24f6 <Compare_eepromMultipleValue+0x554>
		if(valArray[i] == arr[i]){
			eepromEqualityFlag += 1;
		}
	}
	return eepromEqualityFlag;
    2562:	fe 01       	movw	r30, r28
    2564:	e9 5b       	subi	r30, 0xB9	; 185
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 81       	ld	r24, Z
}
    256a:	c1 5b       	subi	r28, 0xB1	; 177
    256c:	df 4f       	sbci	r29, 0xFF	; 255
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	08 95       	ret

00002582 <Timer1_INT>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Timer1_INT(void){
    2582:	df 93       	push	r29
    2584:	cf 93       	push	r28
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62

	/* To count seconds increament till 10 */
	g_timer1_10SecFlag++;
    258a:	80 91 6a 00 	lds	r24, 0x006A
    258e:	8f 5f       	subi	r24, 0xFF	; 255
    2590:	80 93 6a 00 	sts	0x006A, r24

	/* Counter to count 1 Minute */
	g_timer1_1MinFlag++;
    2594:	80 91 6b 00 	lds	r24, 0x006B
    2598:	8f 5f       	subi	r24, 0xFF	; 255
    259a:	80 93 6b 00 	sts	0x006B, r24

	PORTD ^= (1 << 7);
    259e:	a2 e3       	ldi	r26, 0x32	; 50
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e2 e3       	ldi	r30, 0x32	; 50
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	90 81       	ld	r25, Z
    25a8:	80 e8       	ldi	r24, 0x80	; 128
    25aa:	89 27       	eor	r24, r25
    25ac:	8c 93       	st	X, r24

}
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <__vector_9>:
static volatile void (*g_callBackPtrTimer2)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    25b4:	1f 92       	push	r1
    25b6:	0f 92       	push	r0
    25b8:	0f b6       	in	r0, 0x3f	; 63
    25ba:	0f 92       	push	r0
    25bc:	11 24       	eor	r1, r1
    25be:	2f 93       	push	r18
    25c0:	3f 93       	push	r19
    25c2:	4f 93       	push	r20
    25c4:	5f 93       	push	r21
    25c6:	6f 93       	push	r22
    25c8:	7f 93       	push	r23
    25ca:	8f 93       	push	r24
    25cc:	9f 93       	push	r25
    25ce:	af 93       	push	r26
    25d0:	bf 93       	push	r27
    25d2:	ef 93       	push	r30
    25d4:	ff 93       	push	r31
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer0 != NULL_PTR){
    25de:	80 91 6e 00 	lds	r24, 0x006E
    25e2:	90 91 6f 00 	lds	r25, 0x006F
    25e6:	00 97       	sbiw	r24, 0x00	; 0
    25e8:	29 f0       	breq	.+10     	; 0x25f4 <__vector_9+0x40>

		 /* Call the Call Back function for Timer0 Overflow mode */
		(*g_callBackPtrTimer0)();
    25ea:	e0 91 6e 00 	lds	r30, 0x006E
    25ee:	f0 91 6f 00 	lds	r31, 0x006F
    25f2:	09 95       	icall

	}
}
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	ff 91       	pop	r31
    25fa:	ef 91       	pop	r30
    25fc:	bf 91       	pop	r27
    25fe:	af 91       	pop	r26
    2600:	9f 91       	pop	r25
    2602:	8f 91       	pop	r24
    2604:	7f 91       	pop	r23
    2606:	6f 91       	pop	r22
    2608:	5f 91       	pop	r21
    260a:	4f 91       	pop	r20
    260c:	3f 91       	pop	r19
    260e:	2f 91       	pop	r18
    2610:	0f 90       	pop	r0
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	0f 90       	pop	r0
    2616:	1f 90       	pop	r1
    2618:	18 95       	reti

0000261a <__vector_19>:

ISR(TIMER0_COMP_vect){
    261a:	1f 92       	push	r1
    261c:	0f 92       	push	r0
    261e:	0f b6       	in	r0, 0x3f	; 63
    2620:	0f 92       	push	r0
    2622:	11 24       	eor	r1, r1
    2624:	2f 93       	push	r18
    2626:	3f 93       	push	r19
    2628:	4f 93       	push	r20
    262a:	5f 93       	push	r21
    262c:	6f 93       	push	r22
    262e:	7f 93       	push	r23
    2630:	8f 93       	push	r24
    2632:	9f 93       	push	r25
    2634:	af 93       	push	r26
    2636:	bf 93       	push	r27
    2638:	ef 93       	push	r30
    263a:	ff 93       	push	r31
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer0 != NULL_PTR){
    2644:	80 91 6e 00 	lds	r24, 0x006E
    2648:	90 91 6f 00 	lds	r25, 0x006F
    264c:	00 97       	sbiw	r24, 0x00	; 0
    264e:	29 f0       	breq	.+10     	; 0x265a <__vector_19+0x40>

		 /* Call the Call Back function for Timer0 CTC mode */
		(*g_callBackPtrTimer0)();
    2650:	e0 91 6e 00 	lds	r30, 0x006E
    2654:	f0 91 6f 00 	lds	r31, 0x006F
    2658:	09 95       	icall
	}
}
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	ff 91       	pop	r31
    2660:	ef 91       	pop	r30
    2662:	bf 91       	pop	r27
    2664:	af 91       	pop	r26
    2666:	9f 91       	pop	r25
    2668:	8f 91       	pop	r24
    266a:	7f 91       	pop	r23
    266c:	6f 91       	pop	r22
    266e:	5f 91       	pop	r21
    2670:	4f 91       	pop	r20
    2672:	3f 91       	pop	r19
    2674:	2f 91       	pop	r18
    2676:	0f 90       	pop	r0
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	0f 90       	pop	r0
    267c:	1f 90       	pop	r1
    267e:	18 95       	reti

00002680 <__vector_8>:

ISR(TIMER1_OVF_vect){
    2680:	1f 92       	push	r1
    2682:	0f 92       	push	r0
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	0f 92       	push	r0
    2688:	11 24       	eor	r1, r1
    268a:	2f 93       	push	r18
    268c:	3f 93       	push	r19
    268e:	4f 93       	push	r20
    2690:	5f 93       	push	r21
    2692:	6f 93       	push	r22
    2694:	7f 93       	push	r23
    2696:	8f 93       	push	r24
    2698:	9f 93       	push	r25
    269a:	af 93       	push	r26
    269c:	bf 93       	push	r27
    269e:	ef 93       	push	r30
    26a0:	ff 93       	push	r31
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer1 != NULL_PTR){
    26aa:	80 91 70 00 	lds	r24, 0x0070
    26ae:	90 91 71 00 	lds	r25, 0x0071
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	29 f0       	breq	.+10     	; 0x26c0 <__vector_8+0x40>

		 /* Call the Call Back function for Timer1 Overflow mode */
		(*g_callBackPtrTimer1)();
    26b6:	e0 91 70 00 	lds	r30, 0x0070
    26ba:	f0 91 71 00 	lds	r31, 0x0071
    26be:	09 95       	icall
	}
}
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	ff 91       	pop	r31
    26c6:	ef 91       	pop	r30
    26c8:	bf 91       	pop	r27
    26ca:	af 91       	pop	r26
    26cc:	9f 91       	pop	r25
    26ce:	8f 91       	pop	r24
    26d0:	7f 91       	pop	r23
    26d2:	6f 91       	pop	r22
    26d4:	5f 91       	pop	r21
    26d6:	4f 91       	pop	r20
    26d8:	3f 91       	pop	r19
    26da:	2f 91       	pop	r18
    26dc:	0f 90       	pop	r0
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	0f 90       	pop	r0
    26e2:	1f 90       	pop	r1
    26e4:	18 95       	reti

000026e6 <__vector_6>:

ISR(TIMER1_COMPA_vect){
    26e6:	1f 92       	push	r1
    26e8:	0f 92       	push	r0
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	0f 92       	push	r0
    26ee:	11 24       	eor	r1, r1
    26f0:	2f 93       	push	r18
    26f2:	3f 93       	push	r19
    26f4:	4f 93       	push	r20
    26f6:	5f 93       	push	r21
    26f8:	6f 93       	push	r22
    26fa:	7f 93       	push	r23
    26fc:	8f 93       	push	r24
    26fe:	9f 93       	push	r25
    2700:	af 93       	push	r26
    2702:	bf 93       	push	r27
    2704:	ef 93       	push	r30
    2706:	ff 93       	push	r31
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
	//PORTD ^= (1<<7);
	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer1 != NULL_PTR){
    2710:	80 91 70 00 	lds	r24, 0x0070
    2714:	90 91 71 00 	lds	r25, 0x0071
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	29 f0       	breq	.+10     	; 0x2726 <__vector_6+0x40>

		 /* Call the Call Back function for Timer1 CTC Channel A mode */
		(*g_callBackPtrTimer1)();
    271c:	e0 91 70 00 	lds	r30, 0x0070
    2720:	f0 91 71 00 	lds	r31, 0x0071
    2724:	09 95       	icall
	}
}
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	ff 91       	pop	r31
    272c:	ef 91       	pop	r30
    272e:	bf 91       	pop	r27
    2730:	af 91       	pop	r26
    2732:	9f 91       	pop	r25
    2734:	8f 91       	pop	r24
    2736:	7f 91       	pop	r23
    2738:	6f 91       	pop	r22
    273a:	5f 91       	pop	r21
    273c:	4f 91       	pop	r20
    273e:	3f 91       	pop	r19
    2740:	2f 91       	pop	r18
    2742:	0f 90       	pop	r0
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	0f 90       	pop	r0
    2748:	1f 90       	pop	r1
    274a:	18 95       	reti

0000274c <__vector_7>:

ISR(TIMER1_COMPB_vect){
    274c:	1f 92       	push	r1
    274e:	0f 92       	push	r0
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	0f 92       	push	r0
    2754:	11 24       	eor	r1, r1
    2756:	2f 93       	push	r18
    2758:	3f 93       	push	r19
    275a:	4f 93       	push	r20
    275c:	5f 93       	push	r21
    275e:	6f 93       	push	r22
    2760:	7f 93       	push	r23
    2762:	8f 93       	push	r24
    2764:	9f 93       	push	r25
    2766:	af 93       	push	r26
    2768:	bf 93       	push	r27
    276a:	ef 93       	push	r30
    276c:	ff 93       	push	r31
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer1 != NULL_PTR){
    2776:	80 91 70 00 	lds	r24, 0x0070
    277a:	90 91 71 00 	lds	r25, 0x0071
    277e:	00 97       	sbiw	r24, 0x00	; 0
    2780:	29 f0       	breq	.+10     	; 0x278c <__vector_7+0x40>

		 /* Call the Call Back function for Timer1 CTC Channel B mode */
		(*g_callBackPtrTimer1)();
    2782:	e0 91 70 00 	lds	r30, 0x0070
    2786:	f0 91 71 00 	lds	r31, 0x0071
    278a:	09 95       	icall
	}
}
    278c:	cf 91       	pop	r28
    278e:	df 91       	pop	r29
    2790:	ff 91       	pop	r31
    2792:	ef 91       	pop	r30
    2794:	bf 91       	pop	r27
    2796:	af 91       	pop	r26
    2798:	9f 91       	pop	r25
    279a:	8f 91       	pop	r24
    279c:	7f 91       	pop	r23
    279e:	6f 91       	pop	r22
    27a0:	5f 91       	pop	r21
    27a2:	4f 91       	pop	r20
    27a4:	3f 91       	pop	r19
    27a6:	2f 91       	pop	r18
    27a8:	0f 90       	pop	r0
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	0f 90       	pop	r0
    27ae:	1f 90       	pop	r1
    27b0:	18 95       	reti

000027b2 <__vector_4>:

ISR(TIMER2_OVF_vect){
    27b2:	1f 92       	push	r1
    27b4:	0f 92       	push	r0
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	0f 92       	push	r0
    27ba:	11 24       	eor	r1, r1
    27bc:	2f 93       	push	r18
    27be:	3f 93       	push	r19
    27c0:	4f 93       	push	r20
    27c2:	5f 93       	push	r21
    27c4:	6f 93       	push	r22
    27c6:	7f 93       	push	r23
    27c8:	8f 93       	push	r24
    27ca:	9f 93       	push	r25
    27cc:	af 93       	push	r26
    27ce:	bf 93       	push	r27
    27d0:	ef 93       	push	r30
    27d2:	ff 93       	push	r31
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer2 != NULL_PTR){
    27dc:	80 91 72 00 	lds	r24, 0x0072
    27e0:	90 91 73 00 	lds	r25, 0x0073
    27e4:	00 97       	sbiw	r24, 0x00	; 0
    27e6:	29 f0       	breq	.+10     	; 0x27f2 <__vector_4+0x40>

		 /* Call the Call Back function for Timer2 Overflow mode */
		(*g_callBackPtrTimer2)();
    27e8:	e0 91 72 00 	lds	r30, 0x0072
    27ec:	f0 91 73 00 	lds	r31, 0x0073
    27f0:	09 95       	icall
	}
}
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	ff 91       	pop	r31
    27f8:	ef 91       	pop	r30
    27fa:	bf 91       	pop	r27
    27fc:	af 91       	pop	r26
    27fe:	9f 91       	pop	r25
    2800:	8f 91       	pop	r24
    2802:	7f 91       	pop	r23
    2804:	6f 91       	pop	r22
    2806:	5f 91       	pop	r21
    2808:	4f 91       	pop	r20
    280a:	3f 91       	pop	r19
    280c:	2f 91       	pop	r18
    280e:	0f 90       	pop	r0
    2810:	0f be       	out	0x3f, r0	; 63
    2812:	0f 90       	pop	r0
    2814:	1f 90       	pop	r1
    2816:	18 95       	reti

00002818 <__vector_3>:

ISR(TIMER2_COMP_vect){
    2818:	1f 92       	push	r1
    281a:	0f 92       	push	r0
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	0f 92       	push	r0
    2820:	11 24       	eor	r1, r1
    2822:	2f 93       	push	r18
    2824:	3f 93       	push	r19
    2826:	4f 93       	push	r20
    2828:	5f 93       	push	r21
    282a:	6f 93       	push	r22
    282c:	7f 93       	push	r23
    282e:	8f 93       	push	r24
    2830:	9f 93       	push	r25
    2832:	af 93       	push	r26
    2834:	bf 93       	push	r27
    2836:	ef 93       	push	r30
    2838:	ff 93       	push	r31
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer2 != NULL_PTR){
    2842:	80 91 72 00 	lds	r24, 0x0072
    2846:	90 91 73 00 	lds	r25, 0x0073
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	29 f0       	breq	.+10     	; 0x2858 <__vector_3+0x40>

		 /* Call the Call Back function for Timer2 CTC mode */
		(*g_callBackPtrTimer2)();
    284e:	e0 91 72 00 	lds	r30, 0x0072
    2852:	f0 91 73 00 	lds	r31, 0x0073
    2856:	09 95       	icall
	}
}
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	ff 91       	pop	r31
    285e:	ef 91       	pop	r30
    2860:	bf 91       	pop	r27
    2862:	af 91       	pop	r26
    2864:	9f 91       	pop	r25
    2866:	8f 91       	pop	r24
    2868:	7f 91       	pop	r23
    286a:	6f 91       	pop	r22
    286c:	5f 91       	pop	r21
    286e:	4f 91       	pop	r20
    2870:	3f 91       	pop	r19
    2872:	2f 91       	pop	r18
    2874:	0f 90       	pop	r0
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	0f 90       	pop	r0
    287a:	1f 90       	pop	r1
    287c:	18 95       	reti

0000287e <Timer_init>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer_init(const Timer_ConfigType * config_Ptr){
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	62 97       	sbiw	r28, 0x12	; 18
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	9a 83       	std	Y+2, r25	; 0x02
    2894:	89 83       	std	Y+1, r24	; 0x01

	switch(config_Ptr -> TimerID){
    2896:	e9 81       	ldd	r30, Y+1	; 0x01
    2898:	fa 81       	ldd	r31, Y+2	; 0x02
    289a:	80 81       	ld	r24, Z
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	3a 8b       	std	Y+18, r19	; 0x12
    28a2:	29 8b       	std	Y+17, r18	; 0x11
    28a4:	89 89       	ldd	r24, Y+17	; 0x11
    28a6:	9a 89       	ldd	r25, Y+18	; 0x12
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	91 05       	cpc	r25, r1
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <Timer_init+0x32>
    28ae:	8c c0       	rjmp	.+280    	; 0x29c8 <Timer_init+0x14a>
    28b0:	29 89       	ldd	r18, Y+17	; 0x11
    28b2:	3a 89       	ldd	r19, Y+18	; 0x12
    28b4:	22 30       	cpi	r18, 0x02	; 2
    28b6:	31 05       	cpc	r19, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <Timer_init+0x3e>
    28ba:	55 c1       	rjmp	.+682    	; 0x2b66 <Timer_init+0x2e8>
    28bc:	89 89       	ldd	r24, Y+17	; 0x11
    28be:	9a 89       	ldd	r25, Y+18	; 0x12
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <Timer_init+0x48>
    28c4:	c9 c1       	rjmp	.+914    	; 0x2c58 <Timer_init+0x3da>

	case TIMER_ID_0:

		/* Clear Registers before do anything */
		TCCR0 &= 0x00;
    28c6:	e3 e5       	ldi	r30, 0x53	; 83
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	90 81       	ld	r25, Z
    28cc:	e3 e5       	ldi	r30, 0x53	; 83
    28ce:	f0 e0       	ldi	r31, 0x00	; 0
    28d0:	10 82       	st	Z, r1
		TCNT0 &= 0x00;
    28d2:	e2 e5       	ldi	r30, 0x52	; 82
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	20 81       	ld	r18, Z
    28d8:	e2 e5       	ldi	r30, 0x52	; 82
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	10 82       	st	Z, r1
		OCR0  &= 0x00;
    28de:	ec e5       	ldi	r30, 0x5C	; 92
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	30 81       	ld	r19, Z
    28e4:	ec e5       	ldi	r30, 0x5C	; 92
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	10 82       	st	Z, r1
		/*
		 * Set Initial Value to count from it
		 * (8 bit Timer so & with 0xFF to ensure
		 * start value does not exceed 255)
		*/
		TCNT0 = ((config_Ptr -> InitialValue) & 0xFF);
    28ea:	a2 e5       	ldi	r26, 0x52	; 82
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e9 81       	ldd	r30, Y+1	; 0x01
    28f0:	fa 81       	ldd	r31, Y+2	; 0x02
    28f2:	85 81       	ldd	r24, Z+5	; 0x05
    28f4:	96 81       	ldd	r25, Z+6	; 0x06
    28f6:	8c 93       	st	X, r24
		/*
		 * Set Compare Match Value
		 * (8 bit Timer so & with 0xFF to ensure
		 * Compare match value does not exceed 255)
		*/
		OCR0  = ((config_Ptr -> CompareValue) & 0xFF);
    28f8:	ac e5       	ldi	r26, 0x5C	; 92
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e9 81       	ldd	r30, Y+1	; 0x01
    28fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2900:	87 81       	ldd	r24, Z+7	; 0x07
    2902:	90 85       	ldd	r25, Z+8	; 0x08
    2904:	8c 93       	st	X, r24

		/* Choose Non PWM Mode */
		TCCR0 = (1 << FOC0);
    2906:	e3 e5       	ldi	r30, 0x53	; 83
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 e8       	ldi	r24, 0x80	; 128
    290c:	80 83       	st	Z, r24

		/* Check if O/P needed for Output compare match */
		/* Check for OC0 */
		if((config_Ptr -> OutputPin) == OC0_PB3){
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	83 81       	ldd	r24, Z+3	; 0x03
    2914:	83 30       	cpi	r24, 0x03	; 3
    2916:	39 f4       	brne	.+14     	; 0x2926 <Timer_init+0xa8>

			DDRB |= (1 << OC0_PB3);
    2918:	a7 e3       	ldi	r26, 0x37	; 55
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	e7 e3       	ldi	r30, 0x37	; 55
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	88 60       	ori	r24, 0x08	; 8
    2924:	8c 93       	st	X, r24
		}

		/* Check which timer mode is chosen */
		if( (config_Ptr -> TimerMode ) == NORMAL_MODE) {
    2926:	e9 81       	ldd	r30, Y+1	; 0x01
    2928:	fa 81       	ldd	r31, Y+2	; 0x02
    292a:	81 81       	ldd	r24, Z+1	; 0x01
    292c:	88 23       	and	r24, r24
    292e:	41 f4       	brne	.+16     	; 0x2940 <Timer_init+0xc2>

		/*	 Enable Normal Mode Timer Interrupt */
			TIMSK |= (1 << TOIE0);
    2930:	a9 e5       	ldi	r26, 0x59	; 89
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e9 e5       	ldi	r30, 0x59	; 89
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	81 60       	ori	r24, 0x01	; 1
    293c:	8c 93       	st	X, r24
    293e:	0c c0       	rjmp	.+24     	; 0x2958 <Timer_init+0xda>
		}
		else if ( (config_Ptr -> TimerMode) == CTC_MODE){
    2940:	e9 81       	ldd	r30, Y+1	; 0x01
    2942:	fa 81       	ldd	r31, Y+2	; 0x02
    2944:	81 81       	ldd	r24, Z+1	; 0x01
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	39 f4       	brne	.+14     	; 0x2958 <Timer_init+0xda>

		/*	 Enable CTC Mode Timer Interrupt */
			TIMSK |= (1 << OCIE0);
    294a:	a9 e5       	ldi	r26, 0x59	; 89
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e9 e5       	ldi	r30, 0x59	; 89
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	82 60       	ori	r24, 0x02	; 2
    2956:	8c 93       	st	X, r24
		}

		/* Choose Timer Mode (Normal or CTC Mode) */
		TCCR0 = ( (TCCR0 & ~(0x48) ) | ( ( (config_Ptr -> TimerMode) << WGM00) ) );
    2958:	a3 e5       	ldi	r26, 0x53	; 83
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e3 e5       	ldi	r30, 0x53	; 83
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	28 2f       	mov	r18, r24
    2964:	27 7b       	andi	r18, 0xB7	; 183
    2966:	e9 81       	ldd	r30, Y+1	; 0x01
    2968:	fa 81       	ldd	r31, Y+2	; 0x02
    296a:	81 81       	ldd	r24, Z+1	; 0x01
    296c:	88 2f       	mov	r24, r24
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	00 24       	eor	r0, r0
    2972:	96 95       	lsr	r25
    2974:	87 95       	ror	r24
    2976:	07 94       	ror	r0
    2978:	96 95       	lsr	r25
    297a:	87 95       	ror	r24
    297c:	07 94       	ror	r0
    297e:	98 2f       	mov	r25, r24
    2980:	80 2d       	mov	r24, r0
    2982:	82 2b       	or	r24, r18
    2984:	8c 93       	st	X, r24


		/* Choose which operation should be done when compare match occures */
		TCCR0 = ( (TCCR0 & 0xCF) | ( (config_Ptr -> CompareMatchMode) << COM00) );
    2986:	a3 e5       	ldi	r26, 0x53	; 83
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e3 e5       	ldi	r30, 0x53	; 83
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	28 2f       	mov	r18, r24
    2992:	2f 7c       	andi	r18, 0xCF	; 207
    2994:	e9 81       	ldd	r30, Y+1	; 0x01
    2996:	fa 81       	ldd	r31, Y+2	; 0x02
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	88 2f       	mov	r24, r24
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	82 95       	swap	r24
    29a0:	92 95       	swap	r25
    29a2:	90 7f       	andi	r25, 0xF0	; 240
    29a4:	98 27       	eor	r25, r24
    29a6:	80 7f       	andi	r24, 0xF0	; 240
    29a8:	98 27       	eor	r25, r24
    29aa:	82 2b       	or	r24, r18
    29ac:	8c 93       	st	X, r24


		/* Select Timer Operating Clock */
		TCCR0 = ( (TCCR0 & 0xF8) | (config_Ptr -> Prescaler) );
    29ae:	a3 e5       	ldi	r26, 0x53	; 83
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e3 e5       	ldi	r30, 0x53	; 83
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	98 2f       	mov	r25, r24
    29ba:	98 7f       	andi	r25, 0xF8	; 248
    29bc:	e9 81       	ldd	r30, Y+1	; 0x01
    29be:	fa 81       	ldd	r31, Y+2	; 0x02
    29c0:	84 81       	ldd	r24, Z+4	; 0x04
    29c2:	89 2b       	or	r24, r25
    29c4:	8c 93       	st	X, r24
    29c6:	48 c1       	rjmp	.+656    	; 0x2c58 <Timer_init+0x3da>
		break;

	case TIMER_ID_1:

		/* Clear Registers before do anything */
		TCCR1A &= 0x00;
    29c8:	ef e4       	ldi	r30, 0x4F	; 79
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	ef e4       	ldi	r30, 0x4F	; 79
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	10 82       	st	Z, r1
		TCCR1B &= 0x00;
    29d4:	ee e4       	ldi	r30, 0x4E	; 78
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	90 81       	ld	r25, Z
    29da:	ee e4       	ldi	r30, 0x4E	; 78
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	10 82       	st	Z, r1

		/* 16 bit Registers */
		TCNT1  &= 0x0000;
    29e0:	ec e4       	ldi	r30, 0x4C	; 76
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	20 81       	ld	r18, Z
    29e6:	31 81       	ldd	r19, Z+1	; 0x01
    29e8:	ec e4       	ldi	r30, 0x4C	; 76
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	11 82       	std	Z+1, r1	; 0x01
    29ee:	10 82       	st	Z, r1
		OCR1A  &= 0x0000;
    29f0:	ea e4       	ldi	r30, 0x4A	; 74
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	ea e4       	ldi	r30, 0x4A	; 74
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	11 82       	std	Z+1, r1	; 0x01
    29fe:	10 82       	st	Z, r1
		OCR1B  &= 0x0000;
    2a00:	e8 e4       	ldi	r30, 0x48	; 72
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	20 81       	ld	r18, Z
    2a06:	31 81       	ldd	r19, Z+1	; 0x01
    2a08:	e8 e4       	ldi	r30, 0x48	; 72
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	11 82       	std	Z+1, r1	; 0x01
    2a0e:	10 82       	st	Z, r1

		/*
		 * Set Initial Value to count from it
		 * (16 bit Timer so no need to check variable size)
		*/
		TCNT1 = ( (config_Ptr -> InitialValue) );
    2a10:	ac e4       	ldi	r26, 0x4C	; 76
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e9 81       	ldd	r30, Y+1	; 0x01
    2a16:	fa 81       	ldd	r31, Y+2	; 0x02
    2a18:	85 81       	ldd	r24, Z+5	; 0x05
    2a1a:	96 81       	ldd	r25, Z+6	; 0x06
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24


		/* Choose Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    2a22:	ef e4       	ldi	r30, 0x4F	; 79
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	8c e0       	ldi	r24, 0x0C	; 12
    2a28:	80 83       	st	Z, r24

		/* Check if O/P needed for Output compare match */

		/* Check for OC1A */
		if((config_Ptr -> OutputPin) == OC1A_PD5){
    2a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2e:	83 81       	ldd	r24, Z+3	; 0x03
    2a30:	85 30       	cpi	r24, 0x05	; 5
    2a32:	41 f4       	brne	.+16     	; 0x2a44 <Timer_init+0x1c6>

			DDRD |= (1 << OC1A_PD5);
    2a34:	a1 e3       	ldi	r26, 0x31	; 49
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e1 e3       	ldi	r30, 0x31	; 49
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 62       	ori	r24, 0x20	; 32
    2a40:	8c 93       	st	X, r24
    2a42:	0c c0       	rjmp	.+24     	; 0x2a5c <Timer_init+0x1de>
		}

		/* Check for OC1B */
		else if ((config_Ptr -> OutputPin) == OC1B_PD4){
    2a44:	e9 81       	ldd	r30, Y+1	; 0x01
    2a46:	fa 81       	ldd	r31, Y+2	; 0x02
    2a48:	83 81       	ldd	r24, Z+3	; 0x03
    2a4a:	84 30       	cpi	r24, 0x04	; 4
    2a4c:	39 f4       	brne	.+14     	; 0x2a5c <Timer_init+0x1de>

			DDRD |= (1 << OC1B_PD4);
    2a4e:	a1 e3       	ldi	r26, 0x31	; 49
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	e1 e3       	ldi	r30, 0x31	; 49
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	80 61       	ori	r24, 0x10	; 16
    2a5a:	8c 93       	st	X, r24
		}

		/* Check which timer mode is chosen */
		if( (config_Ptr -> TimerMode ) == NORMAL_MODE) {
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	81 81       	ldd	r24, Z+1	; 0x01
    2a62:	88 23       	and	r24, r24
    2a64:	41 f4       	brne	.+16     	; 0x2a76 <Timer_init+0x1f8>

			/* Enable Normal Mode Timer Interrupt */
			TIMSK |= (1 << TOIE1);
    2a66:	a9 e5       	ldi	r26, 0x59	; 89
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e9 e5       	ldi	r30, 0x59	; 89
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	84 60       	ori	r24, 0x04	; 4
    2a72:	8c 93       	st	X, r24
    2a74:	56 c0       	rjmp	.+172    	; 0x2b22 <Timer_init+0x2a4>
		}
		else if ( (config_Ptr -> TimerMode) == CTC_MODE_CHANNEL_A){
    2a76:	e9 81       	ldd	r30, Y+1	; 0x01
    2a78:	fa 81       	ldd	r31, Y+2	; 0x02
    2a7a:	81 81       	ldd	r24, Z+1	; 0x01
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	41 f5       	brne	.+80     	; 0x2ad0 <Timer_init+0x252>

			/*
			 * Set Compare Match Value for Channel A
			 * (16 bit Timer so no need to check variable size)
			*/
			OCR1A  = ((config_Ptr -> CompareValue));
    2a80:	aa e4       	ldi	r26, 0x4A	; 74
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	87 81       	ldd	r24, Z+7	; 0x07
    2a8a:	90 85       	ldd	r25, Z+8	; 0x08
    2a8c:	11 96       	adiw	r26, 0x01	; 1
    2a8e:	9c 93       	st	X, r25
    2a90:	8e 93       	st	-X, r24

			/* Enable CTC Mode Channel A Timer Interrupt */
			TIMSK |= (1 << OCIE1A);
    2a92:	a9 e5       	ldi	r26, 0x59	; 89
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e9 e5       	ldi	r30, 0x59	; 89
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 61       	ori	r24, 0x10	; 16
    2a9e:	8c 93       	st	X, r24

			/* Choose which operation should be done when compare match occures
			 * If Channel A Chosen */
			TCCR1A = ( (TCCR1A & 0x3F) | ( (config_Ptr -> CompareMatchMode) << COM1A0) );
    2aa0:	af e4       	ldi	r26, 0x4F	; 79
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	ef e4       	ldi	r30, 0x4F	; 79
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	28 2f       	mov	r18, r24
    2aac:	2f 73       	andi	r18, 0x3F	; 63
    2aae:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	00 24       	eor	r0, r0
    2aba:	96 95       	lsr	r25
    2abc:	87 95       	ror	r24
    2abe:	07 94       	ror	r0
    2ac0:	96 95       	lsr	r25
    2ac2:	87 95       	ror	r24
    2ac4:	07 94       	ror	r0
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	80 2d       	mov	r24, r0
    2aca:	82 2b       	or	r24, r18
    2acc:	8c 93       	st	X, r24
    2ace:	29 c0       	rjmp	.+82     	; 0x2b22 <Timer_init+0x2a4>

		}

		else if ( (config_Ptr -> TimerMode) == CTC_MODE_CHANNEL_B){
    2ad0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad4:	81 81       	ldd	r24, Z+1	; 0x01
    2ad6:	83 30       	cpi	r24, 0x03	; 3
    2ad8:	21 f5       	brne	.+72     	; 0x2b22 <Timer_init+0x2a4>

			/*
			 * Set Compare Match Value for Channel B
			 * (16 bit Timer so no need to check variable size)
			*/
			OCR1B  = ((config_Ptr -> CompareValue));
    2ada:	a8 e4       	ldi	r26, 0x48	; 72
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae2:	87 81       	ldd	r24, Z+7	; 0x07
    2ae4:	90 85       	ldd	r25, Z+8	; 0x08
    2ae6:	11 96       	adiw	r26, 0x01	; 1
    2ae8:	9c 93       	st	X, r25
    2aea:	8e 93       	st	-X, r24

			/* Enable CTC Mode Channel B Timer Interrupt */
			TIMSK |= (1 << OCIE1B);
    2aec:	a9 e5       	ldi	r26, 0x59	; 89
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	e9 e5       	ldi	r30, 0x59	; 89
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	88 60       	ori	r24, 0x08	; 8
    2af8:	8c 93       	st	X, r24

			/* Choose which operation should be done when compare match occures
			 * If Channel B Chosen */
			TCCR1A = ( (TCCR1A & 0xCF) | ( (config_Ptr -> CompareMatchMode) << COM1B0) );
    2afa:	af e4       	ldi	r26, 0x4F	; 79
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	ef e4       	ldi	r30, 0x4F	; 79
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	28 2f       	mov	r18, r24
    2b06:	2f 7c       	andi	r18, 0xCF	; 207
    2b08:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	88 2f       	mov	r24, r24
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	82 95       	swap	r24
    2b14:	92 95       	swap	r25
    2b16:	90 7f       	andi	r25, 0xF0	; 240
    2b18:	98 27       	eor	r25, r24
    2b1a:	80 7f       	andi	r24, 0xF0	; 240
    2b1c:	98 27       	eor	r25, r24
    2b1e:	82 2b       	or	r24, r18
    2b20:	8c 93       	st	X, r24

		}


		/* Choose Timer Mode (Normal or CTC Mode) */
		TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (config_Ptr -> TimerMode) >> 1) << WGM12)  );
    2b22:	ae e4       	ldi	r26, 0x4E	; 78
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	ee e4       	ldi	r30, 0x4E	; 78
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	28 2f       	mov	r18, r24
    2b2e:	27 7e       	andi	r18, 0xE7	; 231
    2b30:	e9 81       	ldd	r30, Y+1	; 0x01
    2b32:	fa 81       	ldd	r31, Y+2	; 0x02
    2b34:	81 81       	ldd	r24, Z+1	; 0x01
    2b36:	86 95       	lsr	r24
    2b38:	88 2f       	mov	r24, r24
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	88 0f       	add	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	88 0f       	add	r24, r24
    2b42:	99 1f       	adc	r25, r25
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	82 2b       	or	r24, r18
    2b4a:	8c 93       	st	X, r24

		/* Select Timer Operating Clock */
		TCCR1B = ( ( TCCR1B & 0xF8 ) | (config_Ptr -> Prescaler) );
    2b4c:	ae e4       	ldi	r26, 0x4E	; 78
    2b4e:	b0 e0       	ldi	r27, 0x00	; 0
    2b50:	ee e4       	ldi	r30, 0x4E	; 78
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	98 2f       	mov	r25, r24
    2b58:	98 7f       	andi	r25, 0xF8	; 248
    2b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5e:	84 81       	ldd	r24, Z+4	; 0x04
    2b60:	89 2b       	or	r24, r25
    2b62:	8c 93       	st	X, r24
    2b64:	79 c0       	rjmp	.+242    	; 0x2c58 <Timer_init+0x3da>
		break;

	case TIMER_ID_2:

		/* Clear Registers before do anything */
		TCCR2 &= 0x00;
    2b66:	e5 e4       	ldi	r30, 0x45	; 69
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	30 81       	ld	r19, Z
    2b6c:	e5 e4       	ldi	r30, 0x45	; 69
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	10 82       	st	Z, r1
		TCNT2 &= 0x00;
    2b72:	e4 e4       	ldi	r30, 0x44	; 68
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	e4 e4       	ldi	r30, 0x44	; 68
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	10 82       	st	Z, r1
		OCR2  &= 0x00;
    2b7e:	e3 e4       	ldi	r30, 0x43	; 67
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	90 81       	ld	r25, Z
    2b84:	e3 e4       	ldi	r30, 0x43	; 67
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	10 82       	st	Z, r1
		/*
		 * Set Initial Value to count from it
		 * (8 bit Timer so & with 0xFF to ensure
		 * start value does not exceed 255)
		*/
		TCNT2 = ((config_Ptr -> InitialValue) & 0xFF);
    2b8a:	a4 e4       	ldi	r26, 0x44	; 68
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b90:	fa 81       	ldd	r31, Y+2	; 0x02
    2b92:	85 81       	ldd	r24, Z+5	; 0x05
    2b94:	96 81       	ldd	r25, Z+6	; 0x06
    2b96:	8c 93       	st	X, r24
		/*
		 * Set Compare Match Value
		 * (8 bit Timer so & with 0xFF to ensure
		 * Compare match value does not exceed 255)
		*/
		OCR2  = ((config_Ptr -> CompareValue) & 0xFF);
    2b98:	a3 e4       	ldi	r26, 0x43	; 67
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ba0:	87 81       	ldd	r24, Z+7	; 0x07
    2ba2:	90 85       	ldd	r25, Z+8	; 0x08
    2ba4:	8c 93       	st	X, r24

		/* Choose Non PWM Mode */
		TCCR2 = (1 << FOC2);
    2ba6:	e5 e4       	ldi	r30, 0x45	; 69
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	80 e8       	ldi	r24, 0x80	; 128
    2bac:	80 83       	st	Z, r24

		/* Check which timer mode is chosen */
		if( (config_Ptr -> TimerMode ) == NORMAL_MODE) {
    2bae:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb2:	81 81       	ldd	r24, Z+1	; 0x01
    2bb4:	88 23       	and	r24, r24
    2bb6:	41 f4       	brne	.+16     	; 0x2bc8 <Timer_init+0x34a>

		/*	 Enable Normal Mode Timer Interrupt */
			TIMSK |= (1 << TOIE2);
    2bb8:	a9 e5       	ldi	r26, 0x59	; 89
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e9 e5       	ldi	r30, 0x59	; 89
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 64       	ori	r24, 0x40	; 64
    2bc4:	8c 93       	st	X, r24
    2bc6:	0c c0       	rjmp	.+24     	; 0x2be0 <Timer_init+0x362>
		}
		else if ( (config_Ptr -> TimerMode) == CTC_MODE){
    2bc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bca:	fa 81       	ldd	r31, Y+2	; 0x02
    2bcc:	81 81       	ldd	r24, Z+1	; 0x01
    2bce:	81 30       	cpi	r24, 0x01	; 1
    2bd0:	39 f4       	brne	.+14     	; 0x2be0 <Timer_init+0x362>

		/*	 Enable CTC Mode Timer Interrupt */
			TIMSK |= (1 << OCIE2);
    2bd2:	a9 e5       	ldi	r26, 0x59	; 89
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e9 e5       	ldi	r30, 0x59	; 89
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 68       	ori	r24, 0x80	; 128
    2bde:	8c 93       	st	X, r24
		}

		/* Choose Timer Mode (Normal or CTC Mode) */
		TCCR2 |= ( (TCCR2 & ~(0x48) ) | ( ( (config_Ptr -> TimerMode) << WGM20) ) );
    2be0:	a5 e4       	ldi	r26, 0x45	; 69
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e5 e4       	ldi	r30, 0x45	; 69
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	38 2f       	mov	r19, r24
    2bec:	e5 e4       	ldi	r30, 0x45	; 69
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	27 7b       	andi	r18, 0xB7	; 183
    2bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfa:	81 81       	ldd	r24, Z+1	; 0x01
    2bfc:	88 2f       	mov	r24, r24
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	00 24       	eor	r0, r0
    2c02:	96 95       	lsr	r25
    2c04:	87 95       	ror	r24
    2c06:	07 94       	ror	r0
    2c08:	96 95       	lsr	r25
    2c0a:	87 95       	ror	r24
    2c0c:	07 94       	ror	r0
    2c0e:	98 2f       	mov	r25, r24
    2c10:	80 2d       	mov	r24, r0
    2c12:	82 2b       	or	r24, r18
    2c14:	83 2b       	or	r24, r19
    2c16:	8c 93       	st	X, r24

		/* Choose which operation should be done when compare match occures */
		TCCR2 = ( (TCCR2 & 0xCF) | (config_Ptr -> CompareMatchMode) << COM20);
    2c18:	a5 e4       	ldi	r26, 0x45	; 69
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e5 e4       	ldi	r30, 0x45	; 69
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	28 2f       	mov	r18, r24
    2c24:	2f 7c       	andi	r18, 0xCF	; 207
    2c26:	e9 81       	ldd	r30, Y+1	; 0x01
    2c28:	fa 81       	ldd	r31, Y+2	; 0x02
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	82 95       	swap	r24
    2c32:	92 95       	swap	r25
    2c34:	90 7f       	andi	r25, 0xF0	; 240
    2c36:	98 27       	eor	r25, r24
    2c38:	80 7f       	andi	r24, 0xF0	; 240
    2c3a:	98 27       	eor	r25, r24
    2c3c:	82 2b       	or	r24, r18
    2c3e:	8c 93       	st	X, r24

		/* Select Timer Operating Clock */
		TCCR2 = ( (TCCR2 & 0xF8) |(config_Ptr -> Prescaler) );
    2c40:	a5 e4       	ldi	r26, 0x45	; 69
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e5 e4       	ldi	r30, 0x45	; 69
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	98 2f       	mov	r25, r24
    2c4c:	98 7f       	andi	r25, 0xF8	; 248
    2c4e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c50:	fa 81       	ldd	r31, Y+2	; 0x02
    2c52:	84 81       	ldd	r24, Z+4	; 0x04
    2c54:	89 2b       	or	r24, r25
    2c56:	8c 93       	st	X, r24

		break;
	}


}
    2c58:	62 96       	adiw	r28, 0x12	; 18
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	cf 91       	pop	r28
    2c66:	df 91       	pop	r29
    2c68:	08 95       	ret

00002c6a <Timer0_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer0_setCallBack(void (*f_ptr)(void)){
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <Timer0_setCallBack+0x6>
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	9a 83       	std	Y+2, r25	; 0x02
    2c76:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTimer0 = f_ptr;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	90 93 6f 00 	sts	0x006F, r25
    2c80:	80 93 6e 00 	sts	0x006E, r24
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	cf 91       	pop	r28
    2c8a:	df 91       	pop	r29
    2c8c:	08 95       	ret

00002c8e <Timer1_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer1_setCallBack(void (*f_ptr)(void)){
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <Timer1_setCallBack+0x6>
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTimer1 = f_ptr;
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	90 93 71 00 	sts	0x0071, r25
    2ca4:	80 93 70 00 	sts	0x0070, r24
}
    2ca8:	0f 90       	pop	r0
    2caa:	0f 90       	pop	r0
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <Timer2_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer2_setCallBack(void (*f_ptr)(void)){
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <Timer2_setCallBack+0x6>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	9a 83       	std	Y+2, r25	; 0x02
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTimer2 = f_ptr;
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	90 93 73 00 	sts	0x0073, r25
    2cc8:	80 93 72 00 	sts	0x0072, r24
}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <Timer_stop>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer_stop(uint8 timerID){
    2cd6:	df 93       	push	r29
    2cd8:	cf 93       	push	r28
    2cda:	00 d0       	rcall	.+0      	; 0x2cdc <Timer_stop+0x6>
    2cdc:	0f 92       	push	r0
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	89 83       	std	Y+1, r24	; 0x01

	switch(timerID){
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	3b 83       	std	Y+3, r19	; 0x03
    2cec:	2a 83       	std	Y+2, r18	; 0x02
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	89 f0       	breq	.+34     	; 0x2d1a <Timer_stop+0x44>
    2cf8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cfa:	3b 81       	ldd	r19, Y+3	; 0x03
    2cfc:	22 30       	cpi	r18, 0x02	; 2
    2cfe:	31 05       	cpc	r19, r1
    2d00:	a1 f0       	breq	.+40     	; 0x2d2a <Timer_stop+0x54>
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	9b 81       	ldd	r25, Y+3	; 0x03
    2d06:	00 97       	sbiw	r24, 0x00	; 0
    2d08:	b9 f4       	brne	.+46     	; 0x2d38 <Timer_stop+0x62>

	case TIMER_ID_0:

		/* Stop Clock on timer 0 */
		TCCR0 &= ~(0x07);
    2d0a:	a3 e5       	ldi	r26, 0x53	; 83
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	e3 e5       	ldi	r30, 0x53	; 83
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	88 7f       	andi	r24, 0xF8	; 248
    2d16:	8c 93       	st	X, r24
    2d18:	0f c0       	rjmp	.+30     	; 0x2d38 <Timer_stop+0x62>
	break;

	case TIMER_ID_1:

		/* Stop Clock on timer 1 */
		TCCR1B &= ~(0x07);
    2d1a:	ae e4       	ldi	r26, 0x4E	; 78
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	ee e4       	ldi	r30, 0x4E	; 78
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	88 7f       	andi	r24, 0xF8	; 248
    2d26:	8c 93       	st	X, r24
    2d28:	07 c0       	rjmp	.+14     	; 0x2d38 <Timer_stop+0x62>
	break;

	case TIMER_ID_2:

		/* Stop Clock on timer 0 */
		TCCR2 &= ~(0x07);
    2d2a:	a5 e4       	ldi	r26, 0x45	; 69
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	e5 e4       	ldi	r30, 0x45	; 69
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	88 7f       	andi	r24, 0xF8	; 248
    2d36:	8c 93       	st	X, r24
	break;
	}

}
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <__vector_11>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(USART_RXC_vect){
    2d44:	1f 92       	push	r1
    2d46:	0f 92       	push	r0
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	0f 92       	push	r0
    2d4c:	11 24       	eor	r1, r1
    2d4e:	2f 93       	push	r18
    2d50:	3f 93       	push	r19
    2d52:	4f 93       	push	r20
    2d54:	5f 93       	push	r21
    2d56:	6f 93       	push	r22
    2d58:	7f 93       	push	r23
    2d5a:	8f 93       	push	r24
    2d5c:	9f 93       	push	r25
    2d5e:	af 93       	push	r26
    2d60:	bf 93       	push	r27
    2d62:	ef 93       	push	r30
    2d64:	ff 93       	push	r31
    2d66:	df 93       	push	r29
    2d68:	cf 93       	push	r28
    2d6a:	cd b7       	in	r28, 0x3d	; 61
    2d6c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrUartRx != NULL_PTR){
    2d6e:	80 91 74 00 	lds	r24, 0x0074
    2d72:	90 91 75 00 	lds	r25, 0x0075
    2d76:	00 97       	sbiw	r24, 0x00	; 0
    2d78:	29 f0       	breq	.+10     	; 0x2d84 <__vector_11+0x40>

		 /* Call the Call Back function for UART Rx Interrupt */
		(*g_callBackPtrUartRx)();
    2d7a:	e0 91 74 00 	lds	r30, 0x0074
    2d7e:	f0 91 75 00 	lds	r31, 0x0075
    2d82:	09 95       	icall
	}
}
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	ff 91       	pop	r31
    2d8a:	ef 91       	pop	r30
    2d8c:	bf 91       	pop	r27
    2d8e:	af 91       	pop	r26
    2d90:	9f 91       	pop	r25
    2d92:	8f 91       	pop	r24
    2d94:	7f 91       	pop	r23
    2d96:	6f 91       	pop	r22
    2d98:	5f 91       	pop	r21
    2d9a:	4f 91       	pop	r20
    2d9c:	3f 91       	pop	r19
    2d9e:	2f 91       	pop	r18
    2da0:	0f 90       	pop	r0
    2da2:	0f be       	out	0x3f, r0	; 63
    2da4:	0f 90       	pop	r0
    2da6:	1f 90       	pop	r1
    2da8:	18 95       	reti

00002daa <__vector_13>:

ISR(USART_TXC_vect){
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	2f 93       	push	r18
    2db6:	3f 93       	push	r19
    2db8:	4f 93       	push	r20
    2dba:	5f 93       	push	r21
    2dbc:	6f 93       	push	r22
    2dbe:	7f 93       	push	r23
    2dc0:	8f 93       	push	r24
    2dc2:	9f 93       	push	r25
    2dc4:	af 93       	push	r26
    2dc6:	bf 93       	push	r27
    2dc8:	ef 93       	push	r30
    2dca:	ff 93       	push	r31
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrUartRx != NULL_PTR){
    2dd4:	80 91 74 00 	lds	r24, 0x0074
    2dd8:	90 91 75 00 	lds	r25, 0x0075
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	29 f0       	breq	.+10     	; 0x2dea <__vector_13+0x40>

		 /* Call the Call Back function for UART Tx Interrupt */
		(*g_callBackPtrUartTx)();
    2de0:	e0 91 76 00 	lds	r30, 0x0076
    2de4:	f0 91 77 00 	lds	r31, 0x0077
    2de8:	09 95       	icall
	}
}
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	ff 91       	pop	r31
    2df0:	ef 91       	pop	r30
    2df2:	bf 91       	pop	r27
    2df4:	af 91       	pop	r26
    2df6:	9f 91       	pop	r25
    2df8:	8f 91       	pop	r24
    2dfa:	7f 91       	pop	r23
    2dfc:	6f 91       	pop	r22
    2dfe:	5f 91       	pop	r21
    2e00:	4f 91       	pop	r20
    2e02:	3f 91       	pop	r19
    2e04:	2f 91       	pop	r18
    2e06:	0f 90       	pop	r0
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	0f 90       	pop	r0
    2e0c:	1f 90       	pop	r1
    2e0e:	18 95       	reti

00002e10 <UART_init>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_init(const UART_ConfigType* config_Ptr)
{
    2e10:	0f 93       	push	r16
    2e12:	1f 93       	push	r17
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    2e1c:	27 97       	sbiw	r28, 0x07	; 7
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize All registers with zeros */
	UCSRA &= 0x00;
    2e2c:	eb e2       	ldi	r30, 0x2B	; 43
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	eb e2       	ldi	r30, 0x2B	; 43
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	10 82       	st	Z, r1
	UCSRB &= 0x00;
    2e38:	ea e2       	ldi	r30, 0x2A	; 42
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	ea e2       	ldi	r30, 0x2A	; 42
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	10 82       	st	Z, r1
	UCSRC &= 0x00;
    2e44:	e0 e4       	ldi	r30, 0x40	; 64
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	e0 e4       	ldi	r30, 0x40	; 64
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	10 82       	st	Z, r1
	UBRRH &= 0x00;
    2e50:	e0 e4       	ldi	r30, 0x40	; 64
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	e0 e4       	ldi	r30, 0x40	; 64
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	10 82       	st	Z, r1
	UBRRL &= 0x00;
    2e5c:	e9 e2       	ldi	r30, 0x29	; 41
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	e9 e2       	ldi	r30, 0x29	; 41
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	10 82       	st	Z, r1

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    2e68:	eb e2       	ldi	r30, 0x2B	; 43
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	80 83       	st	Z, r24

	/* Enable UART Tx, Rx  */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    2e70:	ea e2       	ldi	r30, 0x2A	; 42
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	88 e1       	ldi	r24, 0x18	; 24
    2e76:	80 83       	st	Z, r24

	/* Chose Operating Mode (Tx Interrupt, Rx Interrupt, both, or None) */
	UCSRB = ( (UCSRB & 0x3F) | ( (config_Ptr -> InterruptMode) << TXCIE) );
    2e78:	aa e2       	ldi	r26, 0x2A	; 42
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	ea e2       	ldi	r30, 0x2A	; 42
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	28 2f       	mov	r18, r24
    2e84:	2f 73       	andi	r18, 0x3F	; 63
    2e86:	e9 81       	ldd	r30, Y+1	; 0x01
    2e88:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	00 24       	eor	r0, r0
    2e92:	96 95       	lsr	r25
    2e94:	87 95       	ror	r24
    2e96:	07 94       	ror	r0
    2e98:	96 95       	lsr	r25
    2e9a:	87 95       	ror	r24
    2e9c:	07 94       	ror	r0
    2e9e:	98 2f       	mov	r25, r24
    2ea0:	80 2d       	mov	r24, r0
    2ea2:	82 2b       	or	r24, r18
    2ea4:	8c 93       	st	X, r24

	/*
	 * Enable UCSRC Register
	 * Choose Asyncronous Mode
	*/
	UCSRC = (1 << URSEL);
    2ea6:	e0 e4       	ldi	r30, 0x40	; 64
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 e8       	ldi	r24, 0x80	; 128
    2eac:	80 83       	st	Z, r24

	/* Choose Parity Mode (Disabled, Even, or odd parity) */
	UCSRC = ( (UCSRC & 0xCF) | ( (config_Ptr -> ParityMode) << UPM0) );
    2eae:	a0 e4       	ldi	r26, 0x40	; 64
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	e0 e4       	ldi	r30, 0x40	; 64
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	28 2f       	mov	r18, r24
    2eba:	2f 7c       	andi	r18, 0xCF	; 207
    2ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	88 2f       	mov	r24, r24
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	82 95       	swap	r24
    2ec8:	92 95       	swap	r25
    2eca:	90 7f       	andi	r25, 0xF0	; 240
    2ecc:	98 27       	eor	r25, r24
    2ece:	80 7f       	andi	r24, 0xF0	; 240
    2ed0:	98 27       	eor	r25, r24
    2ed2:	82 2b       	or	r24, r18
    2ed4:	8c 93       	st	X, r24

	/* Choose Stop bits number (1 bit or 2 bits) */
	UCSRC = ( (UCSRC & 0xF7) | ( (config_Ptr -> StopBit) << USBS) );
    2ed6:	a0 e4       	ldi	r26, 0x40	; 64
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e0 e4       	ldi	r30, 0x40	; 64
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	27 7f       	andi	r18, 0xF7	; 247
    2ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee8:	81 81       	ldd	r24, Z+1	; 0x01
    2eea:	88 2f       	mov	r24, r24
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	88 0f       	add	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	88 0f       	add	r24, r24
    2ef4:	99 1f       	adc	r25, r25
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	82 2b       	or	r24, r18
    2efc:	8c 93       	st	X, r24

	/* Choose 8 bit mode */
	UCSRC = ( (UCSRC & 0xF9) | (EIGHT_BIT_CHAR_SIZE << UCSZ0) );
    2efe:	a0 e4       	ldi	r26, 0x40	; 64
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e0 e4       	ldi	r30, 0x40	; 64
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	86 60       	ori	r24, 0x06	; 6
    2f0a:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ( ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1) >> 8 );
    2f0c:	00 e4       	ldi	r16, 0x40	; 64
    2f0e:	10 e0       	ldi	r17, 0x00	; 0
    2f10:	e9 81       	ldd	r30, Y+1	; 0x01
    2f12:	fa 81       	ldd	r31, Y+2	; 0x02
    2f14:	83 81       	ldd	r24, Z+3	; 0x03
    2f16:	94 81       	ldd	r25, Z+4	; 0x04
    2f18:	a5 81       	ldd	r26, Z+5	; 0x05
    2f1a:	b6 81       	ldd	r27, Z+6	; 0x06
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	aa 1f       	adc	r26, r26
    2f22:	bb 1f       	adc	r27, r27
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	aa 1f       	adc	r26, r26
    2f2a:	bb 1f       	adc	r27, r27
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	aa 1f       	adc	r26, r26
    2f32:	bb 1f       	adc	r27, r27
    2f34:	9c 01       	movw	r18, r24
    2f36:	ad 01       	movw	r20, r26
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	92 e1       	ldi	r25, 0x12	; 18
    2f3c:	aa e7       	ldi	r26, 0x7A	; 122
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodsi4>
    2f48:	da 01       	movw	r26, r20
    2f4a:	c9 01       	movw	r24, r18
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	a1 09       	sbc	r26, r1
    2f50:	b1 09       	sbc	r27, r1
    2f52:	89 2f       	mov	r24, r25
    2f54:	9a 2f       	mov	r25, r26
    2f56:	ab 2f       	mov	r26, r27
    2f58:	bb 27       	eor	r27, r27
    2f5a:	f8 01       	movw	r30, r16
    2f5c:	80 83       	st	Z, r24
	UBRRL = ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1);
    2f5e:	09 e2       	ldi	r16, 0x29	; 41
    2f60:	10 e0       	ldi	r17, 0x00	; 0
    2f62:	e9 81       	ldd	r30, Y+1	; 0x01
    2f64:	fa 81       	ldd	r31, Y+2	; 0x02
    2f66:	83 81       	ldd	r24, Z+3	; 0x03
    2f68:	94 81       	ldd	r25, Z+4	; 0x04
    2f6a:	a5 81       	ldd	r26, Z+5	; 0x05
    2f6c:	b6 81       	ldd	r27, Z+6	; 0x06
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	aa 1f       	adc	r26, r26
    2f74:	bb 1f       	adc	r27, r27
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	aa 1f       	adc	r26, r26
    2f7c:	bb 1f       	adc	r27, r27
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	aa 1f       	adc	r26, r26
    2f84:	bb 1f       	adc	r27, r27
    2f86:	9c 01       	movw	r18, r24
    2f88:	ad 01       	movw	r20, r26
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	92 e1       	ldi	r25, 0x12	; 18
    2f8e:	aa e7       	ldi	r26, 0x7A	; 122
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 93 18 	call	0x3126	; 0x3126 <__udivmodsi4>
    2f9a:	da 01       	movw	r26, r20
    2f9c:	c9 01       	movw	r24, r18
    2f9e:	81 50       	subi	r24, 0x01	; 1
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	80 83       	st	Z, r24
}
    2fa4:	27 96       	adiw	r28, 0x07	; 7
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	1f 91       	pop	r17
    2fb6:	0f 91       	pop	r16
    2fb8:	08 95       	ret

00002fba <UART_setCallBackTx>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_setCallBackTx(void (*f_ptr)(void)){
    2fba:	df 93       	push	r29
    2fbc:	cf 93       	push	r28
    2fbe:	00 d0       	rcall	.+0      	; 0x2fc0 <UART_setCallBackTx+0x6>
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
    2fc4:	9a 83       	std	Y+2, r25	; 0x02
    2fc6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrUartTx = f_ptr;
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	9a 81       	ldd	r25, Y+2	; 0x02
    2fcc:	90 93 77 00 	sts	0x0077, r25
    2fd0:	80 93 76 00 	sts	0x0076, r24
}
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	08 95       	ret

00002fde <UART_setCallBackRx>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_setCallBackRx(void (*f_ptr)(void)){
    2fde:	df 93       	push	r29
    2fe0:	cf 93       	push	r28
    2fe2:	00 d0       	rcall	.+0      	; 0x2fe4 <UART_setCallBackRx+0x6>
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	9a 83       	std	Y+2, r25	; 0x02
    2fea:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrUartRx = f_ptr;
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff0:	90 93 75 00 	sts	0x0075, r25
    2ff4:	80 93 74 00 	sts	0x0074, r24
}
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	cf 91       	pop	r28
    2ffe:	df 91       	pop	r29
    3000:	08 95       	ret

00003002 <UART_sendByte>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_sendByte(const uint8 data)
{
    3002:	df 93       	push	r29
    3004:	cf 93       	push	r28
    3006:	0f 92       	push	r0
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    300e:	eb e2       	ldi	r30, 0x2B	; 43
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	88 2f       	mov	r24, r24
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	80 72       	andi	r24, 0x20	; 32
    301a:	90 70       	andi	r25, 0x00	; 0
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	b9 f3       	breq	.-18     	; 0x300e <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    3020:	ec e2       	ldi	r30, 0x2C	; 44
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <UART_recieveByte>:
 [in/out]			None

 [Returns]:			Byte recived by UART
**********************************************************************************/
uint8 UART_recieveByte(void)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3038:	eb e2       	ldi	r30, 0x2B	; 43
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	88 23       	and	r24, r24
    3040:	dc f7       	brge	.-10     	; 0x3038 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    3042:	ec e2       	ldi	r30, 0x2C	; 44
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
}
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <UART_sendString>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_sendString(const uint8 *Str)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <UART_sendString+0x6>
    3054:	0f 92       	push	r0
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	9b 83       	std	Y+3, r25	; 0x03
    305c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    305e:	19 82       	std	Y+1, r1	; 0x01
    3060:	0e c0       	rjmp	.+28     	; 0x307e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	28 2f       	mov	r18, r24
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	8a 81       	ldd	r24, Y+2	; 0x02
    306a:	9b 81       	ldd	r25, Y+3	; 0x03
    306c:	fc 01       	movw	r30, r24
    306e:	e2 0f       	add	r30, r18
    3070:	f3 1f       	adc	r31, r19
    3072:	80 81       	ld	r24, Z
    3074:	0e 94 01 18 	call	0x3002	; 0x3002 <UART_sendByte>
		i++;
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	8f 5f       	subi	r24, 0xFF	; 255
    307c:	89 83       	std	Y+1, r24	; 0x01
 [Returns]:			None
**********************************************************************************/
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    307e:	89 81       	ldd	r24, Y+1	; 0x01
    3080:	28 2f       	mov	r18, r24
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	9b 81       	ldd	r25, Y+3	; 0x03
    3088:	fc 01       	movw	r30, r24
    308a:	e2 0f       	add	r30, r18
    308c:	f3 1f       	adc	r31, r19
    308e:	80 81       	ld	r24, Z
    3090:	88 23       	and	r24, r24
    3092:	39 f7       	brne	.-50     	; 0x3062 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	cf 91       	pop	r28
    309c:	df 91       	pop	r29
    309e:	08 95       	ret

000030a0 <UART_receiveString>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_receiveString(uint8 *Str)
{
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <UART_receiveString+0xa>
    30aa:	0f 92       	push	r0
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9b 83       	std	Y+3, r25	; 0x03
    30b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    30b4:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	28 2f       	mov	r18, r24
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	8c 01       	movw	r16, r24
    30c2:	02 0f       	add	r16, r18
    30c4:	13 1f       	adc	r17, r19
    30c6:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    30ca:	f8 01       	movw	r30, r16
    30cc:	80 83       	st	Z, r24
    30ce:	0f c0       	rjmp	.+30     	; 0x30ee <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	8f 5f       	subi	r24, 0xFF	; 255
    30d4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	28 2f       	mov	r18, r24
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	9b 81       	ldd	r25, Y+3	; 0x03
    30e0:	8c 01       	movw	r16, r24
    30e2:	02 0f       	add	r16, r18
    30e4:	13 1f       	adc	r17, r19
    30e6:	0e 94 18 18 	call	0x3030	; 0x3030 <UART_recieveByte>
    30ea:	f8 01       	movw	r30, r16
    30ec:	80 83       	st	Z, r24
**********************************************************************************/
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	8a 81       	ldd	r24, Y+2	; 0x02
    30f6:	9b 81       	ldd	r25, Y+3	; 0x03
    30f8:	fc 01       	movw	r30, r24
    30fa:	e2 0f       	add	r30, r18
    30fc:	f3 1f       	adc	r31, r19
    30fe:	80 81       	ld	r24, Z
    3100:	83 32       	cpi	r24, 0x23	; 35
    3102:	31 f7       	brne	.-52     	; 0x30d0 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	9b 81       	ldd	r25, Y+3	; 0x03
    310e:	fc 01       	movw	r30, r24
    3110:	e2 0f       	add	r30, r18
    3112:	f3 1f       	adc	r31, r19
    3114:	10 82       	st	Z, r1
}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	1f 91       	pop	r17
    3122:	0f 91       	pop	r16
    3124:	08 95       	ret

00003126 <__udivmodsi4>:
    3126:	a1 e2       	ldi	r26, 0x21	; 33
    3128:	1a 2e       	mov	r1, r26
    312a:	aa 1b       	sub	r26, r26
    312c:	bb 1b       	sub	r27, r27
    312e:	fd 01       	movw	r30, r26
    3130:	0d c0       	rjmp	.+26     	; 0x314c <__udivmodsi4_ep>

00003132 <__udivmodsi4_loop>:
    3132:	aa 1f       	adc	r26, r26
    3134:	bb 1f       	adc	r27, r27
    3136:	ee 1f       	adc	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	a2 17       	cp	r26, r18
    313c:	b3 07       	cpc	r27, r19
    313e:	e4 07       	cpc	r30, r20
    3140:	f5 07       	cpc	r31, r21
    3142:	20 f0       	brcs	.+8      	; 0x314c <__udivmodsi4_ep>
    3144:	a2 1b       	sub	r26, r18
    3146:	b3 0b       	sbc	r27, r19
    3148:	e4 0b       	sbc	r30, r20
    314a:	f5 0b       	sbc	r31, r21

0000314c <__udivmodsi4_ep>:
    314c:	66 1f       	adc	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	88 1f       	adc	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	1a 94       	dec	r1
    3156:	69 f7       	brne	.-38     	; 0x3132 <__udivmodsi4_loop>
    3158:	60 95       	com	r22
    315a:	70 95       	com	r23
    315c:	80 95       	com	r24
    315e:	90 95       	com	r25
    3160:	9b 01       	movw	r18, r22
    3162:	ac 01       	movw	r20, r24
    3164:	bd 01       	movw	r22, r26
    3166:	cf 01       	movw	r24, r30
    3168:	08 95       	ret

0000316a <__prologue_saves__>:
    316a:	2f 92       	push	r2
    316c:	3f 92       	push	r3
    316e:	4f 92       	push	r4
    3170:	5f 92       	push	r5
    3172:	6f 92       	push	r6
    3174:	7f 92       	push	r7
    3176:	8f 92       	push	r8
    3178:	9f 92       	push	r9
    317a:	af 92       	push	r10
    317c:	bf 92       	push	r11
    317e:	cf 92       	push	r12
    3180:	df 92       	push	r13
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	ca 1b       	sub	r28, r26
    3194:	db 0b       	sbc	r29, r27
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	09 94       	ijmp

000031a2 <__epilogue_restores__>:
    31a2:	2a 88       	ldd	r2, Y+18	; 0x12
    31a4:	39 88       	ldd	r3, Y+17	; 0x11
    31a6:	48 88       	ldd	r4, Y+16	; 0x10
    31a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    31aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    31ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    31ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    31b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    31b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    31b4:	b9 84       	ldd	r11, Y+9	; 0x09
    31b6:	c8 84       	ldd	r12, Y+8	; 0x08
    31b8:	df 80       	ldd	r13, Y+7	; 0x07
    31ba:	ee 80       	ldd	r14, Y+6	; 0x06
    31bc:	fd 80       	ldd	r15, Y+5	; 0x05
    31be:	0c 81       	ldd	r16, Y+4	; 0x04
    31c0:	1b 81       	ldd	r17, Y+3	; 0x03
    31c2:	aa 81       	ldd	r26, Y+2	; 0x02
    31c4:	b9 81       	ldd	r27, Y+1	; 0x01
    31c6:	ce 0f       	add	r28, r30
    31c8:	d1 1d       	adc	r29, r1
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	ed 01       	movw	r28, r26
    31d6:	08 95       	ret

000031d8 <_exit>:
    31d8:	f8 94       	cli

000031da <__stop_program>:
    31da:	ff cf       	rjmp	.-2      	; 0x31da <__stop_program>
