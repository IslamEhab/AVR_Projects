
Final_Project_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000396e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  0000396e  00003a02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800152  00800152  00003af4  2**0
                  ALLOC
  3 .stab         00003750  00000000  00000000  00003af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015e9  00000000  00000000  00007244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000882d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000896d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008add  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a726  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b611  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__vector_3>
      10:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__vector_6>
      1c:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__vector_7>
      20:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__vector_8>
      24:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 26 1a 	jmp	0x344c	; 0x344c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 91 16 	jmp	0x2d22	; 0x2d22 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 91 0c 	call	0x1922	; 0x1922 <main>
      8a:	0c 94 b5 1c 	jmp	0x396a	; 0x396a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e4       	ldi	r26, 0x4A	; 74
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 1c 	jmp	0x3872	; 0x3872 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a e4       	ldi	r24, 0x4A	; 74
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_Init>:


#include "LCD.h"


void LCD_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	LCD_DDR_COMMAND_REG |= (1 << RS) | (1 << RW) | (1 << E);
     b4e:	a1 e3       	ldi	r26, 0x31	; 49
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e3       	ldi	r30, 0x31	; 49
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8c 61       	ori	r24, 0x1C	; 28
     b5a:	8c 93       	st	X, r24

	LCD_DDR_DATA_REG = 0xFF;
     b5c:	e4 e3       	ldi	r30, 0x34	; 52
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	80 83       	st	Z, r24

	/* 2 Lines, 8 Bit Mode */
	LCD_sendCommand(0x38);
     b64:	88 e3       	ldi	r24, 0x38	; 56
     b66:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCD_sendCommand>

	/* Cursor Off */
	LCD_sendCommand(0x0C);
     b6a:	8c e0       	ldi	r24, 0x0C	; 12
     b6c:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCD_sendCommand>

	/* Clear Screen */
	LCD_sendCommand(0x01);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCD_sendCommand>
}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <LCD_sendCommand>:


void LCD_sendCommand(uint8 command){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	e9 97       	sbiw	r28, 0x39	; 57
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	89 af       	std	Y+57, r24	; 0x39

	/* RS = 0 */
	CLEAR_BIT(LCD_PORT_COMMAND_REG, RS);
     b92:	a2 e3       	ldi	r26, 0x32	; 50
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e2 e3       	ldi	r30, 0x32	; 50
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24

	/* R/W = 0 */
	CLEAR_BIT(LCD_PORT_COMMAND_REG, RW);
     ba0:	a2 e3       	ldi	r26, 0x32	; 50
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e2 e3       	ldi	r30, 0x32	; 50
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	87 7f       	andi	r24, 0xF7	; 247
     bac:	8c 93       	st	X, r24
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	a0 e8       	ldi	r26, 0x80	; 128
     bb4:	bf e3       	ldi	r27, 0x3F	; 63
     bb6:	8d ab       	std	Y+53, r24	; 0x35
     bb8:	9e ab       	std	Y+54, r25	; 0x36
     bba:	af ab       	std	Y+55, r26	; 0x37
     bbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bbe:	6d a9       	ldd	r22, Y+53	; 0x35
     bc0:	7e a9       	ldd	r23, Y+54	; 0x36
     bc2:	8f a9       	ldd	r24, Y+55	; 0x37
     bc4:	98 ad       	ldd	r25, Y+56	; 0x38
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	4a ef       	ldi	r20, 0xFA	; 250
     bcc:	54 e4       	ldi	r21, 0x44	; 68
     bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	89 ab       	std	Y+49, r24	; 0x31
     bd8:	9a ab       	std	Y+50, r25	; 0x32
     bda:	ab ab       	std	Y+51, r26	; 0x33
     bdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bde:	69 a9       	ldd	r22, Y+49	; 0x31
     be0:	7a a9       	ldd	r23, Y+50	; 0x32
     be2:	8b a9       	ldd	r24, Y+51	; 0x33
     be4:	9c a9       	ldd	r25, Y+52	; 0x34
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e8       	ldi	r20, 0x80	; 128
     bec:	5f e3       	ldi	r21, 0x3F	; 63
     bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf2:	88 23       	and	r24, r24
     bf4:	2c f4       	brge	.+10     	; 0xc00 <LCD_sendCommand+0x84>
		__ticks = 1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	98 ab       	std	Y+48, r25	; 0x30
     bfc:	8f a7       	std	Y+47, r24	; 0x2f
     bfe:	3f c0       	rjmp	.+126    	; 0xc7e <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
     c00:	69 a9       	ldd	r22, Y+49	; 0x31
     c02:	7a a9       	ldd	r23, Y+50	; 0x32
     c04:	8b a9       	ldd	r24, Y+51	; 0x33
     c06:	9c a9       	ldd	r25, Y+52	; 0x34
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	3f ef       	ldi	r19, 0xFF	; 255
     c0c:	4f e7       	ldi	r20, 0x7F	; 127
     c0e:	57 e4       	ldi	r21, 0x47	; 71
     c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c14:	18 16       	cp	r1, r24
     c16:	4c f5       	brge	.+82     	; 0xc6a <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c18:	6d a9       	ldd	r22, Y+53	; 0x35
     c1a:	7e a9       	ldd	r23, Y+54	; 0x36
     c1c:	8f a9       	ldd	r24, Y+55	; 0x37
     c1e:	98 ad       	ldd	r25, Y+56	; 0x38
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e2       	ldi	r20, 0x20	; 32
     c26:	51 e4       	ldi	r21, 0x41	; 65
     c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	98 ab       	std	Y+48, r25	; 0x30
     c3e:	8f a7       	std	Y+47, r24	; 0x2f
     c40:	0f c0       	rjmp	.+30     	; 0xc60 <LCD_sendCommand+0xe4>
     c42:	88 ec       	ldi	r24, 0xC8	; 200
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9e a7       	std	Y+46, r25	; 0x2e
     c48:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
     c4c:	9e a5       	ldd	r25, Y+46	; 0x2e
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <LCD_sendCommand+0xd2>
     c52:	9e a7       	std	Y+46, r25	; 0x2e
     c54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c56:	8f a5       	ldd	r24, Y+47	; 0x2f
     c58:	98 a9       	ldd	r25, Y+48	; 0x30
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	98 ab       	std	Y+48, r25	; 0x30
     c5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c60:	8f a5       	ldd	r24, Y+47	; 0x2f
     c62:	98 a9       	ldd	r25, Y+48	; 0x30
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	69 f7       	brne	.-38     	; 0xc42 <LCD_sendCommand+0xc6>
     c68:	14 c0       	rjmp	.+40     	; 0xc92 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c6a:	69 a9       	ldd	r22, Y+49	; 0x31
     c6c:	7a a9       	ldd	r23, Y+50	; 0x32
     c6e:	8b a9       	ldd	r24, Y+51	; 0x33
     c70:	9c a9       	ldd	r25, Y+52	; 0x34
     c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	98 ab       	std	Y+48, r25	; 0x30
     c7c:	8f a7       	std	Y+47, r24	; 0x2f
     c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c80:	98 a9       	ldd	r25, Y+48	; 0x30
     c82:	9c a7       	std	Y+44, r25	; 0x2c
     c84:	8b a7       	std	Y+43, r24	; 0x2b
     c86:	8b a5       	ldd	r24, Y+43	; 0x2b
     c88:	9c a5       	ldd	r25, Y+44	; 0x2c
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	f1 f7       	brne	.-4      	; 0xc8a <LCD_sendCommand+0x10e>
     c8e:	9c a7       	std	Y+44, r25	; 0x2c
     c90:	8b a7       	std	Y+43, r24	; 0x2b

	/* delay 50 ns */
	_delay_ms(1);

	/* ENABLE = 1 */
	SET_BIT(LCD_PORT_COMMAND_REG, E);
     c92:	a2 e3       	ldi	r26, 0x32	; 50
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e2 e3       	ldi	r30, 0x32	; 50
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 61       	ori	r24, 0x10	; 16
     c9e:	8c 93       	st	X, r24
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e8       	ldi	r26, 0x80	; 128
     ca6:	bf e3       	ldi	r27, 0x3F	; 63
     ca8:	8f a3       	std	Y+39, r24	; 0x27
     caa:	98 a7       	std	Y+40, r25	; 0x28
     cac:	a9 a7       	std	Y+41, r26	; 0x29
     cae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb0:	6f a1       	ldd	r22, Y+39	; 0x27
     cb2:	78 a5       	ldd	r23, Y+40	; 0x28
     cb4:	89 a5       	ldd	r24, Y+41	; 0x29
     cb6:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	4a ef       	ldi	r20, 0xFA	; 250
     cbe:	54 e4       	ldi	r21, 0x44	; 68
     cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	8b a3       	std	Y+35, r24	; 0x23
     cca:	9c a3       	std	Y+36, r25	; 0x24
     ccc:	ad a3       	std	Y+37, r26	; 0x25
     cce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cd0:	6b a1       	ldd	r22, Y+35	; 0x23
     cd2:	7c a1       	ldd	r23, Y+36	; 0x24
     cd4:	8d a1       	ldd	r24, Y+37	; 0x25
     cd6:	9e a1       	ldd	r25, Y+38	; 0x26
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e8       	ldi	r20, 0x80	; 128
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce4:	88 23       	and	r24, r24
     ce6:	2c f4       	brge	.+10     	; 0xcf2 <LCD_sendCommand+0x176>
		__ticks = 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9a a3       	std	Y+34, r25	; 0x22
     cee:	89 a3       	std	Y+33, r24	; 0x21
     cf0:	3f c0       	rjmp	.+126    	; 0xd70 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     cf2:	6b a1       	ldd	r22, Y+35	; 0x23
     cf4:	7c a1       	ldd	r23, Y+36	; 0x24
     cf6:	8d a1       	ldd	r24, Y+37	; 0x25
     cf8:	9e a1       	ldd	r25, Y+38	; 0x26
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	3f ef       	ldi	r19, 0xFF	; 255
     cfe:	4f e7       	ldi	r20, 0x7F	; 127
     d00:	57 e4       	ldi	r21, 0x47	; 71
     d02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d06:	18 16       	cp	r1, r24
     d08:	4c f5       	brge	.+82     	; 0xd5c <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0a:	6f a1       	ldd	r22, Y+39	; 0x27
     d0c:	78 a5       	ldd	r23, Y+40	; 0x28
     d0e:	89 a5       	ldd	r24, Y+41	; 0x29
     d10:	9a a5       	ldd	r25, Y+42	; 0x2a
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e2       	ldi	r20, 0x20	; 32
     d18:	51 e4       	ldi	r21, 0x41	; 65
     d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	bc 01       	movw	r22, r24
     d24:	cd 01       	movw	r24, r26
     d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	9a a3       	std	Y+34, r25	; 0x22
     d30:	89 a3       	std	Y+33, r24	; 0x21
     d32:	0f c0       	rjmp	.+30     	; 0xd52 <LCD_sendCommand+0x1d6>
     d34:	88 ec       	ldi	r24, 0xC8	; 200
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	98 a3       	std	Y+32, r25	; 0x20
     d3a:	8f 8f       	std	Y+31, r24	; 0x1f
     d3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d3e:	98 a1       	ldd	r25, Y+32	; 0x20
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <LCD_sendCommand+0x1c4>
     d44:	98 a3       	std	Y+32, r25	; 0x20
     d46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d48:	89 a1       	ldd	r24, Y+33	; 0x21
     d4a:	9a a1       	ldd	r25, Y+34	; 0x22
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	9a a3       	std	Y+34, r25	; 0x22
     d50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d52:	89 a1       	ldd	r24, Y+33	; 0x21
     d54:	9a a1       	ldd	r25, Y+34	; 0x22
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	69 f7       	brne	.-38     	; 0xd34 <LCD_sendCommand+0x1b8>
     d5a:	14 c0       	rjmp	.+40     	; 0xd84 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5c:	6b a1       	ldd	r22, Y+35	; 0x23
     d5e:	7c a1       	ldd	r23, Y+36	; 0x24
     d60:	8d a1       	ldd	r24, Y+37	; 0x25
     d62:	9e a1       	ldd	r25, Y+38	; 0x26
     d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	9a a3       	std	Y+34, r25	; 0x22
     d6e:	89 a3       	std	Y+33, r24	; 0x21
     d70:	89 a1       	ldd	r24, Y+33	; 0x21
     d72:	9a a1       	ldd	r25, Y+34	; 0x22
     d74:	9e 8f       	std	Y+30, r25	; 0x1e
     d76:	8d 8f       	std	Y+29, r24	; 0x1d
     d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <LCD_sendCommand+0x200>
     d80:	9e 8f       	std	Y+30, r25	; 0x1e
     d82:	8d 8f       	std	Y+29, r24	; 0x1d

	/* delay 190 ns */
	_delay_ms(1);

	/* DATA BUS = Command  */
	LCD_PORT_DATA_REG = command;
     d84:	e5 e3       	ldi	r30, 0x35	; 53
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 ad       	ldd	r24, Y+57	; 0x39
     d8a:	80 83       	st	Z, r24
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e8       	ldi	r26, 0x80	; 128
     d92:	bf e3       	ldi	r27, 0x3F	; 63
     d94:	89 8f       	std	Y+25, r24	; 0x19
     d96:	9a 8f       	std	Y+26, r25	; 0x1a
     d98:	ab 8f       	std	Y+27, r26	; 0x1b
     d9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9c:	69 8d       	ldd	r22, Y+25	; 0x19
     d9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a ef       	ldi	r20, 0xFA	; 250
     daa:	54 e4       	ldi	r21, 0x44	; 68
     dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8d 8b       	std	Y+21, r24	; 0x15
     db6:	9e 8b       	std	Y+22, r25	; 0x16
     db8:	af 8b       	std	Y+23, r26	; 0x17
     dba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dbc:	6d 89       	ldd	r22, Y+21	; 0x15
     dbe:	7e 89       	ldd	r23, Y+22	; 0x16
     dc0:	8f 89       	ldd	r24, Y+23	; 0x17
     dc2:	98 8d       	ldd	r25, Y+24	; 0x18
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f4       	brge	.+10     	; 0xdde <LCD_sendCommand+0x262>
		__ticks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 8b       	std	Y+20, r25	; 0x14
     dda:	8b 8b       	std	Y+19, r24	; 0x13
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
     dde:	6d 89       	ldd	r22, Y+21	; 0x15
     de0:	7e 89       	ldd	r23, Y+22	; 0x16
     de2:	8f 89       	ldd	r24, Y+23	; 0x17
     de4:	98 8d       	ldd	r25, Y+24	; 0x18
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df2:	18 16       	cp	r1, r24
     df4:	4c f5       	brge	.+82     	; 0xe48 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df6:	69 8d       	ldd	r22, Y+25	; 0x19
     df8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9c 8b       	std	Y+20, r25	; 0x14
     e1c:	8b 8b       	std	Y+19, r24	; 0x13
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <LCD_sendCommand+0x2c2>
     e20:	88 ec       	ldi	r24, 0xC8	; 200
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9a 8b       	std	Y+18, r25	; 0x12
     e26:	89 8b       	std	Y+17, r24	; 0x11
     e28:	89 89       	ldd	r24, Y+17	; 0x11
     e2a:	9a 89       	ldd	r25, Y+18	; 0x12
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <LCD_sendCommand+0x2b0>
     e30:	9a 8b       	std	Y+18, r25	; 0x12
     e32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	8b 89       	ldd	r24, Y+19	; 0x13
     e36:	9c 89       	ldd	r25, Y+20	; 0x14
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9c 8b       	std	Y+20, r25	; 0x14
     e3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3e:	8b 89       	ldd	r24, Y+19	; 0x13
     e40:	9c 89       	ldd	r25, Y+20	; 0x14
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	69 f7       	brne	.-38     	; 0xe20 <LCD_sendCommand+0x2a4>
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e48:	6d 89       	ldd	r22, Y+21	; 0x15
     e4a:	7e 89       	ldd	r23, Y+22	; 0x16
     e4c:	8f 89       	ldd	r24, Y+23	; 0x17
     e4e:	98 8d       	ldd	r25, Y+24	; 0x18
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9c 8b       	std	Y+20, r25	; 0x14
     e5a:	8b 8b       	std	Y+19, r24	; 0x13
     e5c:	8b 89       	ldd	r24, Y+19	; 0x13
     e5e:	9c 89       	ldd	r25, Y+20	; 0x14
     e60:	98 8b       	std	Y+16, r25	; 0x10
     e62:	8f 87       	std	Y+15, r24	; 0x0f
     e64:	8f 85       	ldd	r24, Y+15	; 0x0f
     e66:	98 89       	ldd	r25, Y+16	; 0x10
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <LCD_sendCommand+0x2ec>
     e6c:	98 8b       	std	Y+16, r25	; 0x10
     e6e:	8f 87       	std	Y+15, r24	; 0x0f

	/* delay 100 ns */
	_delay_ms(1);

	/* Enable = 0 */
	CLEAR_BIT(LCD_PORT_COMMAND_REG, E);
     e70:	a2 e3       	ldi	r26, 0x32	; 50
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	e2 e3       	ldi	r30, 0x32	; 50
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	8f 7e       	andi	r24, 0xEF	; 239
     e7c:	8c 93       	st	X, r24
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a0 e8       	ldi	r26, 0x80	; 128
     e84:	bf e3       	ldi	r27, 0x3F	; 63
     e86:	8b 87       	std	Y+11, r24	; 0x0b
     e88:	9c 87       	std	Y+12, r25	; 0x0c
     e8a:	ad 87       	std	Y+13, r26	; 0x0d
     e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	4a ef       	ldi	r20, 0xFA	; 250
     e9c:	54 e4       	ldi	r21, 0x44	; 68
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	a9 87       	std	Y+9, r26	; 0x09
     eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eae:	6f 81       	ldd	r22, Y+7	; 0x07
     eb0:	78 85       	ldd	r23, Y+8	; 0x08
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	2c f4       	brge	.+10     	; 0xed0 <LCD_sendCommand+0x354>
		__ticks = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	3f c0       	rjmp	.+126    	; 0xf4e <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
     ed0:	6f 81       	ldd	r22, Y+7	; 0x07
     ed2:	78 85       	ldd	r23, Y+8	; 0x08
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	4c f5       	brge	.+82     	; 0xf3a <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e2       	ldi	r20, 0x20	; 32
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <LCD_sendCommand+0x3b4>
     f12:	88 ec       	ldi	r24, 0xC8	; 200
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <LCD_sendCommand+0x3a2>
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f7       	brne	.-38     	; 0xf12 <LCD_sendCommand+0x396>
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <LCD_sendCommand+0x3de>
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
}
     f62:	e9 96       	adiw	r28, 0x39	; 57
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 chr){
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	e9 97       	sbiw	r28, 0x39	; 57
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	89 af       	std	Y+57, r24	; 0x39

	/* RS = 1 */
	SET_BIT(LCD_PORT_COMMAND_REG, RS);
     f8a:	a2 e3       	ldi	r26, 0x32	; 50
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e2 e3       	ldi	r30, 0x32	; 50
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	84 60       	ori	r24, 0x04	; 4
     f96:	8c 93       	st	X, r24

	/* R/W = 0 */
	CLEAR_BIT(LCD_PORT_COMMAND_REG, RW);
     f98:	a2 e3       	ldi	r26, 0x32	; 50
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 e3       	ldi	r30, 0x32	; 50
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	87 7f       	andi	r24, 0xF7	; 247
     fa4:	8c 93       	st	X, r24
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	8d ab       	std	Y+53, r24	; 0x35
     fb0:	9e ab       	std	Y+54, r25	; 0x36
     fb2:	af ab       	std	Y+55, r26	; 0x37
     fb4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6d a9       	ldd	r22, Y+53	; 0x35
     fb8:	7e a9       	ldd	r23, Y+54	; 0x36
     fba:	8f a9       	ldd	r24, Y+55	; 0x37
     fbc:	98 ad       	ldd	r25, Y+56	; 0x38
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	89 ab       	std	Y+49, r24	; 0x31
     fd0:	9a ab       	std	Y+50, r25	; 0x32
     fd2:	ab ab       	std	Y+51, r26	; 0x33
     fd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fd6:	69 a9       	ldd	r22, Y+49	; 0x31
     fd8:	7a a9       	ldd	r23, Y+50	; 0x32
     fda:	8b a9       	ldd	r24, Y+51	; 0x33
     fdc:	9c a9       	ldd	r25, Y+52	; 0x34
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <LCD_displayCharacter+0x84>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	98 ab       	std	Y+48, r25	; 0x30
     ff4:	8f a7       	std	Y+47, r24	; 0x2f
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
     ff8:	69 a9       	ldd	r22, Y+49	; 0x31
     ffa:	7a a9       	ldd	r23, Y+50	; 0x32
     ffc:	8b a9       	ldd	r24, Y+51	; 0x33
     ffe:	9c a9       	ldd	r25, Y+52	; 0x34
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6d a9       	ldd	r22, Y+53	; 0x35
    1012:	7e a9       	ldd	r23, Y+54	; 0x36
    1014:	8f a9       	ldd	r24, Y+55	; 0x37
    1016:	98 ad       	ldd	r25, Y+56	; 0x38
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	98 ab       	std	Y+48, r25	; 0x30
    1036:	8f a7       	std	Y+47, r24	; 0x2f
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <LCD_displayCharacter+0xe4>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9e a7       	std	Y+46, r25	; 0x2e
    1040:	8d a7       	std	Y+45, r24	; 0x2d
    1042:	8d a5       	ldd	r24, Y+45	; 0x2d
    1044:	9e a5       	ldd	r25, Y+46	; 0x2e
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <LCD_displayCharacter+0xd2>
    104a:	9e a7       	std	Y+46, r25	; 0x2e
    104c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1050:	98 a9       	ldd	r25, Y+48	; 0x30
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	98 ab       	std	Y+48, r25	; 0x30
    1056:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8f a5       	ldd	r24, Y+47	; 0x2f
    105a:	98 a9       	ldd	r25, Y+48	; 0x30
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <LCD_displayCharacter+0xc6>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	69 a9       	ldd	r22, Y+49	; 0x31
    1064:	7a a9       	ldd	r23, Y+50	; 0x32
    1066:	8b a9       	ldd	r24, Y+51	; 0x33
    1068:	9c a9       	ldd	r25, Y+52	; 0x34
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	98 ab       	std	Y+48, r25	; 0x30
    1074:	8f a7       	std	Y+47, r24	; 0x2f
    1076:	8f a5       	ldd	r24, Y+47	; 0x2f
    1078:	98 a9       	ldd	r25, Y+48	; 0x30
    107a:	9c a7       	std	Y+44, r25	; 0x2c
    107c:	8b a7       	std	Y+43, r24	; 0x2b
    107e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1080:	9c a5       	ldd	r25, Y+44	; 0x2c
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCD_displayCharacter+0x10e>
    1086:	9c a7       	std	Y+44, r25	; 0x2c
    1088:	8b a7       	std	Y+43, r24	; 0x2b

	/* delay 50 ns */
	_delay_ms(1);

	/* ENABLE = 1 */
	SET_BIT(LCD_PORT_COMMAND_REG, E);
    108a:	a2 e3       	ldi	r26, 0x32	; 50
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e2 e3       	ldi	r30, 0x32	; 50
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	80 61       	ori	r24, 0x10	; 16
    1096:	8c 93       	st	X, r24
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e8       	ldi	r26, 0x80	; 128
    109e:	bf e3       	ldi	r27, 0x3F	; 63
    10a0:	8f a3       	std	Y+39, r24	; 0x27
    10a2:	98 a7       	std	Y+40, r25	; 0x28
    10a4:	a9 a7       	std	Y+41, r26	; 0x29
    10a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	6f a1       	ldd	r22, Y+39	; 0x27
    10aa:	78 a5       	ldd	r23, Y+40	; 0x28
    10ac:	89 a5       	ldd	r24, Y+41	; 0x29
    10ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4a ef       	ldi	r20, 0xFA	; 250
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	8b a3       	std	Y+35, r24	; 0x23
    10c2:	9c a3       	std	Y+36, r25	; 0x24
    10c4:	ad a3       	std	Y+37, r26	; 0x25
    10c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10c8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ca:	7c a1       	ldd	r23, Y+36	; 0x24
    10cc:	8d a1       	ldd	r24, Y+37	; 0x25
    10ce:	9e a1       	ldd	r25, Y+38	; 0x26
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	2c f4       	brge	.+10     	; 0x10ea <LCD_displayCharacter+0x176>
		__ticks = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9a a3       	std	Y+34, r25	; 0x22
    10e6:	89 a3       	std	Y+33, r24	; 0x21
    10e8:	3f c0       	rjmp	.+126    	; 0x1168 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    10ea:	6b a1       	ldd	r22, Y+35	; 0x23
    10ec:	7c a1       	ldd	r23, Y+36	; 0x24
    10ee:	8d a1       	ldd	r24, Y+37	; 0x25
    10f0:	9e a1       	ldd	r25, Y+38	; 0x26
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	57 e4       	ldi	r21, 0x47	; 71
    10fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	4c f5       	brge	.+82     	; 0x1154 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1102:	6f a1       	ldd	r22, Y+39	; 0x27
    1104:	78 a5       	ldd	r23, Y+40	; 0x28
    1106:	89 a5       	ldd	r24, Y+41	; 0x29
    1108:	9a a5       	ldd	r25, Y+42	; 0x2a
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
    112a:	0f c0       	rjmp	.+30     	; 0x114a <LCD_displayCharacter+0x1d6>
    112c:	88 ec       	ldi	r24, 0xC8	; 200
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	98 a3       	std	Y+32, r25	; 0x20
    1132:	8f 8f       	std	Y+31, r24	; 0x1f
    1134:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1136:	98 a1       	ldd	r25, Y+32	; 0x20
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <LCD_displayCharacter+0x1c4>
    113c:	98 a3       	std	Y+32, r25	; 0x20
    113e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1140:	89 a1       	ldd	r24, Y+33	; 0x21
    1142:	9a a1       	ldd	r25, Y+34	; 0x22
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9a a3       	std	Y+34, r25	; 0x22
    1148:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114a:	89 a1       	ldd	r24, Y+33	; 0x21
    114c:	9a a1       	ldd	r25, Y+34	; 0x22
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	69 f7       	brne	.-38     	; 0x112c <LCD_displayCharacter+0x1b8>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1154:	6b a1       	ldd	r22, Y+35	; 0x23
    1156:	7c a1       	ldd	r23, Y+36	; 0x24
    1158:	8d a1       	ldd	r24, Y+37	; 0x25
    115a:	9e a1       	ldd	r25, Y+38	; 0x26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9a a3       	std	Y+34, r25	; 0x22
    1166:	89 a3       	std	Y+33, r24	; 0x21
    1168:	89 a1       	ldd	r24, Y+33	; 0x21
    116a:	9a a1       	ldd	r25, Y+34	; 0x22
    116c:	9e 8f       	std	Y+30, r25	; 0x1e
    116e:	8d 8f       	std	Y+29, r24	; 0x1d
    1170:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1172:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <LCD_displayCharacter+0x200>
    1178:	9e 8f       	std	Y+30, r25	; 0x1e
    117a:	8d 8f       	std	Y+29, r24	; 0x1d

	/* delay 190 ns */
	_delay_ms(1);

	/* DATA BUS = Command  */
	LCD_PORT_DATA_REG = chr;
    117c:	e5 e3       	ldi	r30, 0x35	; 53
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	89 ad       	ldd	r24, Y+57	; 0x39
    1182:	80 83       	st	Z, r24
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e8       	ldi	r26, 0x80	; 128
    118a:	bf e3       	ldi	r27, 0x3F	; 63
    118c:	89 8f       	std	Y+25, r24	; 0x19
    118e:	9a 8f       	std	Y+26, r25	; 0x1a
    1190:	ab 8f       	std	Y+27, r26	; 0x1b
    1192:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	69 8d       	ldd	r22, Y+25	; 0x19
    1196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a ef       	ldi	r20, 0xFA	; 250
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8d 8b       	std	Y+21, r24	; 0x15
    11ae:	9e 8b       	std	Y+22, r25	; 0x16
    11b0:	af 8b       	std	Y+23, r26	; 0x17
    11b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b4:	6d 89       	ldd	r22, Y+21	; 0x15
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <LCD_displayCharacter+0x262>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9c 8b       	std	Y+20, r25	; 0x14
    11d2:	8b 8b       	std	Y+19, r24	; 0x13
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	69 8d       	ldd	r22, Y+25	; 0x19
    11f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <LCD_displayCharacter+0x2c2>
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9a 8b       	std	Y+18, r25	; 0x12
    121e:	89 8b       	std	Y+17, r24	; 0x11
    1220:	89 89       	ldd	r24, Y+17	; 0x11
    1222:	9a 89       	ldd	r25, Y+18	; 0x12
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCD_displayCharacter+0x2b0>
    1228:	9a 8b       	std	Y+18, r25	; 0x12
    122a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8b 89       	ldd	r24, Y+19	; 0x13
    122e:	9c 89       	ldd	r25, Y+20	; 0x14
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9c 8b       	std	Y+20, r25	; 0x14
    1234:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8b 89       	ldd	r24, Y+19	; 0x13
    1238:	9c 89       	ldd	r25, Y+20	; 0x14
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <LCD_displayCharacter+0x2a4>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	6d 89       	ldd	r22, Y+21	; 0x15
    1242:	7e 89       	ldd	r23, Y+22	; 0x16
    1244:	8f 89       	ldd	r24, Y+23	; 0x17
    1246:	98 8d       	ldd	r25, Y+24	; 0x18
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9c 8b       	std	Y+20, r25	; 0x14
    1252:	8b 8b       	std	Y+19, r24	; 0x13
    1254:	8b 89       	ldd	r24, Y+19	; 0x13
    1256:	9c 89       	ldd	r25, Y+20	; 0x14
    1258:	98 8b       	std	Y+16, r25	; 0x10
    125a:	8f 87       	std	Y+15, r24	; 0x0f
    125c:	8f 85       	ldd	r24, Y+15	; 0x0f
    125e:	98 89       	ldd	r25, Y+16	; 0x10
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <LCD_displayCharacter+0x2ec>
    1264:	98 8b       	std	Y+16, r25	; 0x10
    1266:	8f 87       	std	Y+15, r24	; 0x0f

	/* delay 100 ns */
	_delay_ms(1);

	/* Enable = 0 */
	CLEAR_BIT(LCD_PORT_COMMAND_REG, E);
    1268:	a2 e3       	ldi	r26, 0x32	; 50
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7e       	andi	r24, 0xEF	; 239
    1274:	8c 93       	st	X, r24
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	a0 e8       	ldi	r26, 0x80	; 128
    127c:	bf e3       	ldi	r27, 0x3F	; 63
    127e:	8b 87       	std	Y+11, r24	; 0x0b
    1280:	9c 87       	std	Y+12, r25	; 0x0c
    1282:	ad 87       	std	Y+13, r26	; 0x0d
    1284:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a ef       	ldi	r20, 0xFA	; 250
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	8f 83       	std	Y+7, r24	; 0x07
    12a0:	98 87       	std	Y+8, r25	; 0x08
    12a2:	a9 87       	std	Y+9, r26	; 0x09
    12a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a6:	6f 81       	ldd	r22, Y+7	; 0x07
    12a8:	78 85       	ldd	r23, Y+8	; 0x08
    12aa:	89 85       	ldd	r24, Y+9	; 0x09
    12ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	5f e3       	ldi	r21, 0x3F	; 63
    12b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ba:	88 23       	and	r24, r24
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <LCD_displayCharacter+0x354>
		__ticks = 1;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	3f c0       	rjmp	.+126    	; 0x1346 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3f ef       	ldi	r19, 0xFF	; 255
    12d4:	4f e7       	ldi	r20, 0x7F	; 127
    12d6:	57 e4       	ldi	r21, 0x47	; 71
    12d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12dc:	18 16       	cp	r1, r24
    12de:	4c f5       	brge	.+82     	; 0x1332 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <LCD_displayCharacter+0x3b4>
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_displayCharacter+0x3a2>
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	69 f7       	brne	.-38     	; 0x130a <LCD_displayCharacter+0x396>
    1330:	14 c0       	rjmp	.+40     	; 0x135a <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1332:	6f 81       	ldd	r22, Y+7	; 0x07
    1334:	78 85       	ldd	r23, Y+8	; 0x08
    1336:	89 85       	ldd	r24, Y+9	; 0x09
    1338:	9a 85       	ldd	r25, Y+10	; 0x0a
    133a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	9a 81       	ldd	r25, Y+2	; 0x02
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_displayCharacter+0x3de>
    1356:	9a 83       	std	Y+2, r25	; 0x02
    1358:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(1);
}
    135a:	e9 96       	adiw	r28, 0x39	; 57
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <LCD_displayString>:

void LCD_displayString(const uint8 *Str)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <LCD_displayString+0x6>
    1372:	0f 92       	push	r0
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	9b 83       	std	Y+3, r25	; 0x03
    137a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	0e c0       	rjmp	.+28     	; 0x139c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	fc 01       	movw	r30, r24
    138c:	e2 0f       	add	r30, r18
    138e:	f3 1f       	adc	r31, r19
    1390:	80 81       	ld	r24, Z
    1392:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>
		i++;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	fc 01       	movw	r30, r24
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
    13ac:	80 81       	ld	r24, Z
    13ae:	88 23       	and	r24, r24
    13b0:	39 f7       	brne	.-50     	; 0x1380 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <LCD_goToRowColumn+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <LCD_goToRowColumn+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	8a 83       	std	Y+2, r24	; 0x02
    13ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	3d 83       	std	Y+5, r19	; 0x05
    13d8:	2c 83       	std	Y+4, r18	; 0x04
    13da:	8c 81       	ldd	r24, Y+4	; 0x04
    13dc:	9d 81       	ldd	r25, Y+5	; 0x05
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	91 05       	cpc	r25, r1
    13e2:	c1 f0       	breq	.+48     	; 0x1414 <LCD_goToRowColumn+0x56>
    13e4:	2c 81       	ldd	r18, Y+4	; 0x04
    13e6:	3d 81       	ldd	r19, Y+5	; 0x05
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <LCD_goToRowColumn+0x3a>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	61 f0       	breq	.+24     	; 0x140e <LCD_goToRowColumn+0x50>
    13f6:	19 c0       	rjmp	.+50     	; 0x142a <LCD_goToRowColumn+0x6c>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	69 f0       	breq	.+26     	; 0x141c <LCD_goToRowColumn+0x5e>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	91 05       	cpc	r25, r1
    140a:	61 f0       	breq	.+24     	; 0x1424 <LCD_goToRowColumn+0x66>
    140c:	0e c0       	rjmp	.+28     	; 0x142a <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	0b c0       	rjmp	.+22     	; 0x142a <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	80 5c       	subi	r24, 0xC0	; 192
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	07 c0       	rjmp	.+14     	; 0x142a <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	80 5f       	subi	r24, 0xF0	; 240
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	03 c0       	rjmp	.+6      	; 0x142a <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	80 5b       	subi	r24, 0xB0	; 176
    1428:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	80 68       	ori	r24, 0x80	; 128
    142e:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCD_sendCommand>
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <LCD_displayStringRowColumn+0x6>
    1448:	00 d0       	rcall	.+0      	; 0x144a <LCD_displayStringRowColumn+0x8>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	6a 83       	std	Y+2, r22	; 0x02
    1452:	5c 83       	std	Y+4, r21	; 0x04
    1454:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	6a 81       	ldd	r22, Y+2	; 0x02
    145a:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
}
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	62 97       	sbiw	r28, 0x12	; 18
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	9a 8b       	std	Y+18, r25	; 0x12
    148a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    148c:	89 89       	ldd	r24, Y+17	; 0x11
    148e:	9a 89       	ldd	r25, Y+18	; 0x12
    1490:	9e 01       	movw	r18, r28
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	b9 01       	movw	r22, r18
    1498:	4a e0       	ldi	r20, 0x0A	; 10
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <itoa>
   LCD_displayString(buff);
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
}
    14a8:	62 96       	adiw	r28, 0x12	; 18
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0e 94 be 05 	call	0xb7c	; 0xb7c <LCD_sendCommand>
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <__vector_17>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TWI_vect){
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	2f 93       	push	r18
    14da:	3f 93       	push	r19
    14dc:	4f 93       	push	r20
    14de:	5f 93       	push	r21
    14e0:	6f 93       	push	r22
    14e2:	7f 93       	push	r23
    14e4:	8f 93       	push	r24
    14e6:	9f 93       	push	r25
    14e8:	af 93       	push	r26
    14ea:	bf 93       	push	r27
    14ec:	ef 93       	push	r30
    14ee:	ff 93       	push	r31
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTWI != NULL_PTR){
    14f8:	80 91 52 01 	lds	r24, 0x0152
    14fc:	90 91 53 01 	lds	r25, 0x0153
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	29 f0       	breq	.+10     	; 0x150e <__vector_17+0x40>

		/* Call the Call Back function for TWI Interrupt */
		(*g_callBackPtrTWI)();		/* Another way of calling g_callBackPtrTWI(); */
    1504:	e0 91 52 01 	lds	r30, 0x0152
    1508:	f0 91 53 01 	lds	r31, 0x0153
    150c:	09 95       	icall
	}
}
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	ff 91       	pop	r31
    1514:	ef 91       	pop	r30
    1516:	bf 91       	pop	r27
    1518:	af 91       	pop	r26
    151a:	9f 91       	pop	r25
    151c:	8f 91       	pop	r24
    151e:	7f 91       	pop	r23
    1520:	6f 91       	pop	r22
    1522:	5f 91       	pop	r21
    1524:	4f 91       	pop	r20
    1526:	3f 91       	pop	r19
    1528:	2f 91       	pop	r18
    152a:	0f 90       	pop	r0
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	0f 90       	pop	r0
    1530:	1f 90       	pop	r1
    1532:	18 95       	reti

00001534 <TWI_init>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_init(const TWI_ConfigType* config_Ptr){
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	27 97       	sbiw	r28, 0x07	; 7
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	9b 83       	std	Y+3, r25	; 0x03
    1552:	8a 83       	std	Y+2, r24	; 0x02

	uint8 bitRateCalculation;
	/* Clear all registers before doing  anything */
	TWBR &= 0x00;
    1554:	e0 e2       	ldi	r30, 0x20	; 32
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	e0 e2       	ldi	r30, 0x20	; 32
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	10 82       	st	Z, r1
	TWCR &= 0x00;
    1560:	e6 e5       	ldi	r30, 0x56	; 86
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	e6 e5       	ldi	r30, 0x56	; 86
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	10 82       	st	Z, r1
	TWDR &= 0x00;
    156c:	e3 e2       	ldi	r30, 0x23	; 35
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	e3 e2       	ldi	r30, 0x23	; 35
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	10 82       	st	Z, r1
	TWAR &= 0x00;
    1578:	e2 e2       	ldi	r30, 0x22	; 34
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	e2 e2       	ldi	r30, 0x22	; 34
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	10 82       	st	Z, r1

	/* Bit rate calculations */
	bitRateCalculation = ( ( (F_CPU) - ( (config_Ptr -> BitRate) * 16) ) / (2 * (config_Ptr -> BitRate) ) );
    1584:	ea 81       	ldd	r30, Y+2	; 0x02
    1586:	fb 81       	ldd	r31, Y+3	; 0x03
    1588:	21 81       	ldd	r18, Z+1	; 0x01
    158a:	32 81       	ldd	r19, Z+2	; 0x02
    158c:	43 81       	ldd	r20, Z+3	; 0x03
    158e:	54 81       	ldd	r21, Z+4	; 0x04
    1590:	80 e2       	ldi	r24, 0x20	; 32
    1592:	91 ea       	ldi	r25, 0xA1	; 161
    1594:	a7 e0       	ldi	r26, 0x07	; 7
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	82 1b       	sub	r24, r18
    159a:	93 0b       	sbc	r25, r19
    159c:	a4 0b       	sbc	r26, r20
    159e:	b5 0b       	sbc	r27, r21
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	aa 1f       	adc	r26, r26
    15a6:	bb 1f       	adc	r27, r27
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	7c 01       	movw	r14, r24
    15c2:	8d 01       	movw	r16, r26
    15c4:	ea 81       	ldd	r30, Y+2	; 0x02
    15c6:	fb 81       	ldd	r31, Y+3	; 0x03
    15c8:	81 81       	ldd	r24, Z+1	; 0x01
    15ca:	92 81       	ldd	r25, Z+2	; 0x02
    15cc:	a3 81       	ldd	r26, Z+3	; 0x03
    15ce:	b4 81       	ldd	r27, Z+4	; 0x04
    15d0:	9c 01       	movw	r18, r24
    15d2:	ad 01       	movw	r20, r26
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	44 1f       	adc	r20, r20
    15da:	55 1f       	adc	r21, r21
    15dc:	c8 01       	movw	r24, r16
    15de:	b7 01       	movw	r22, r14
    15e0:	0e 94 17 1c 	call	0x382e	; 0x382e <__udivmodsi4>
    15e4:	da 01       	movw	r26, r20
    15e6:	c9 01       	movw	r24, r18
    15e8:	89 83       	std	Y+1, r24	; 0x01

	/* Check if number is Bigger than zero or not */
	if(bitRateCalculation >= 0){

		/*Bit Rate calculation proper with this clock*/
		TWBR = bitRateCalculation;
    15ea:	e0 e2       	ldi	r30, 0x20	; 32
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	80 83       	st	Z, r24
		bitRateCalculation = ( ( (F_CPU) - ( (NORMAL_MODE_100KB) * 16) ) / (2 * (NORMAL_MODE_100KB) ) );
		TWBR = bitRateCalculation;
	}

	/* Zero Prescaler */
	TWSR = 0x00;
    15f2:	e1 e2       	ldi	r30, 0x21	; 33
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	10 82       	st	Z, r1
     * Two Wire Bus address my address
     * if any master device want to call me: 0x1
     * (used in case this MC is a slave device)
     *  General Call Recognition: Off
    */
    TWAR = ( (config_Ptr -> Address) & 0xFE);
    15f8:	a2 e2       	ldi	r26, 0x22	; 34
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ea 81       	ldd	r30, Y+2	; 0x02
    15fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1600:	80 81       	ld	r24, Z
    1602:	8e 7f       	andi	r24, 0xFE	; 254
    1604:	8c 93       	st	X, r24

    /* Choose Operating mode (Interrupt or polling) */
    TWCR = ( (config_Ptr -> InterruptMode) );
    1606:	a6 e5       	ldi	r26, 0x56	; 86
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ea 81       	ldd	r30, Y+2	; 0x02
    160c:	fb 81       	ldd	r31, Y+3	; 0x03
    160e:	85 81       	ldd	r24, Z+5	; 0x05
    1610:	8c 93       	st	X, r24

    /* Enable TWI Module */
    TWCR = (1<<TWEN);
    1612:	e6 e5       	ldi	r30, 0x56	; 86
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	80 83       	st	Z, r24

}
    161a:	27 96       	adiw	r28, 0x07	; 7
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	08 95       	ret

00001634 <TWI_start>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_start(void){
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * - Clear the TWINT flag before sending the start bit TWINT=1
	 * - send the start bit by TWSTA=1
	 * - Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    163c:	e6 e5       	ldi	r30, 0x56	; 86
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	84 ea       	ldi	r24, 0xA4	; 164
    1642:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1644:	e6 e5       	ldi	r30, 0x56	; 86
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	88 23       	and	r24, r24
    164c:	dc f7       	brge	.-10     	; 0x1644 <TWI_start+0x10>
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <TWI_stop>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_stop(void){
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    /*
	 * - Clear the TWINT flag before sending the stop bit TWINT=1
	 * - send the stop bit by TWSTO=1
	 * - Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    165c:	e6 e5       	ldi	r30, 0x56	; 86
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	84 e9       	ldi	r24, 0x94	; 148
    1662:	80 83       	st	Z, r24
}
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <TWI_write>:

 [in/out]]			None

 [Returns]:]		None
**********************************************************************************/
void TWI_write(uint8 data){
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01

	/* Put data On TWI data Register */
    TWDR = data;
    1676:	e3 e2       	ldi	r30, 0x23	; 35
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	80 83       	st	Z, r24

    /*
	 * - Clear the TWINT flag before sending the data TWINT=1
	 * - Enable TWI Module TWEN=1
	*/
    TWCR = (1 << TWINT) | (1 << TWEN);
    167e:	e6 e5       	ldi	r30, 0x56	; 86
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	84 e8       	ldi	r24, 0x84	; 132
    1684:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1686:	e6 e5       	ldi	r30, 0x56	; 86
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 23       	and	r24, r24
    168e:	dc f7       	brge	.-10     	; 0x1686 <TWI_write+0x1c>
}
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <TWI_readWithACK>:

 [in/out]			None

 [Returns]:			Data which will be read
**********************************************************************************/
uint8 TWI_readWithACK(void){
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * - Clear the TWINT flag before reading the data TWINT=1
	 * - Enable sending ACK after reading or receiving data TWEA=1
	 * - Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    16a0:	e6 e5       	ldi	r30, 0x56	; 86
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	84 ec       	ldi	r24, 0xC4	; 196
    16a6:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16a8:	e6 e5       	ldi	r30, 0x56	; 86
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	88 23       	and	r24, r24
    16b0:	dc f7       	brge	.-10     	; 0x16a8 <TWI_readWithACK+0x10>

    /* Read Data */
    return TWDR;
    16b2:	e3 e2       	ldi	r30, 0x23	; 35
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
}
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <TWI_readWithNACK>:

 [in/out]			None

 [Returns]:			Data which will be read
**********************************************************************************/
uint8 TWI_readWithNACK(void){
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    16c6:	e6 e5       	ldi	r30, 0x56	; 86
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	84 e8       	ldi	r24, 0x84	; 132
    16cc:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16ce:	e6 e5       	ldi	r30, 0x56	; 86
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	dc f7       	brge	.-10     	; 0x16ce <TWI_readWithNACK+0x10>

    /* Read Data */
    return TWDR;
    16d8:	e3 e2       	ldi	r30, 0x23	; 35
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <TWI_getStatus>:

 [in/out]			None

 [Returns]:			Status of the bus
**********************************************************************************/
uint8 TWI_getStatus(void){
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62

    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    16ee:	e1 e2       	ldi	r30, 0x21	; 33
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	88 7f       	andi	r24, 0xF8	; 248
    16f6:	89 83       	std	Y+1, r24	; 0x01

    return status;
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <TWI_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void TWI_setCallBack(void (*f_ptr)(void)){
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	00 d0       	rcall	.+0      	; 0x1708 <TWI_setCallBack+0x6>
    1708:	cd b7       	in	r28, 0x3d	; 61
    170a:	de b7       	in	r29, 0x3e	; 62
    170c:	9a 83       	std	Y+2, r25	; 0x02
    170e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTWI = f_ptr;
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	90 93 53 01 	sts	0x0153, r25
    1718:	80 93 52 01 	sts	0x0152, r24
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <KeyPad_getPressedKey>:
/*
 * Description: Function to know which button pressed on keypad
 * @Param:		None
 * @Return:		Pressed Button (uint8)
 */
uint8 KeyPad_getPressedKey(void){
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <KeyPad_getPressedKey+0x6>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;

	/* Super loop to give the user time to press the key */
	while(1){
		/* Columns Loop */
		for(col = 0; col < N_COL; col++){
    1730:	19 82       	std	Y+1, r1	; 0x01
    1732:	4c c0       	rjmp	.+152    	; 0x17cc <KeyPad_getPressedKey+0xa6>
			 * Each time only 1 column will be active (Output)
			 * Other columns will be inactive (Input).
			 * Also, clear output register(PORT) to enable
			 * internal Pull up resistor for rows
			 */
			KEYPAD_PORT_DIR = (0x10 << col);
    1734:	ea e3       	ldi	r30, 0x3A	; 58
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	80 e1       	ldi	r24, 0x10	; 16
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <KeyPad_getPressedKey+0x22>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	2a 95       	dec	r18
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <KeyPad_getPressedKey+0x1e>
    174c:	80 83       	st	Z, r24

			KEYPAD_PORT_OUT = (~(0x10 << col));
    174e:	eb e3       	ldi	r30, 0x3B	; 59
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	80 e1       	ldi	r24, 0x10	; 16
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <KeyPad_getPressedKey+0x3e>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <KeyPad_getPressedKey+0x3a>
    1768:	80 95       	com	r24
    176a:	80 83       	st	Z, r24

			/* Rows Loop */
			for(row = 0; row < N_ROW; row++){
    176c:	1a 82       	std	Y+2, r1	; 0x02
    176e:	28 c0       	rjmp	.+80     	; 0x17c0 <KeyPad_getPressedKey+0x9a>
				/*
				 * We're using internal pull up, so
				 * when button pressed, its corresponding
				 * value on PINA Register should be 0
				 */
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN, row)){
    1770:	e9 e3       	ldi	r30, 0x39	; 57
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <KeyPad_getPressedKey+0x62>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <KeyPad_getPressedKey+0x5e>
    178c:	ca 01       	movw	r24, r20
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	91 f4       	brne	.+36     	; 0x17ba <KeyPad_getPressedKey+0x94>
					#if (N_COL == 3)
						return KeyPad_4x3_keyMapping( ((row*N_COL) + col + 1) );
					#elif(N_COL == 4)
						return KeyPad_4x4_keyMapping( ((row*N_COL) + col + 1) );
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	98 2f       	mov	r25, r24
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	89 0f       	add	r24, r25
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <KeyPad_4x4_keyMapping>
				}
			}
		}
	}

}
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret
			KEYPAD_PORT_DIR = (0x10 << col);

			KEYPAD_PORT_OUT = (~(0x10 << col));

			/* Rows Loop */
			for(row = 0; row < N_ROW; row++){
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	a8 f2       	brcs	.-86     	; 0x1770 <KeyPad_getPressedKey+0x4a>
	uint8 row, col;

	/* Super loop to give the user time to press the key */
	while(1){
		/* Columns Loop */
		for(col = 0; col < N_COL; col++){
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	84 30       	cpi	r24, 0x04	; 4
    17d0:	08 f4       	brcc	.+2      	; 0x17d4 <KeyPad_getPressedKey+0xae>
    17d2:	b0 cf       	rjmp	.-160    	; 0x1734 <KeyPad_getPressedKey+0xe>
    17d4:	ad cf       	rjmp	.-166    	; 0x1730 <KeyPad_getPressedKey+0xa>

000017d6 <KeyPad_4x4_keyMapping>:
/*
 * Description: Helper Function to know which button pressed on 4x4 keypad
 * @Param:		Pressed Button on HW Matrix
 * @Return:		Actual value of Pressed Button (uint8)
 */
static uint8 KeyPad_4x4_keyMapping(uint8 button){
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <KeyPad_4x4_keyMapping+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <KeyPad_4x4_keyMapping+0x8>
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	89 83       	std	Y+1, r24	; 0x01

	switch(button){
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3c 83       	std	Y+4, r19	; 0x04
    17ec:	2b 83       	std	Y+3, r18	; 0x03
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	88 30       	cpi	r24, 0x08	; 8
    17f4:	91 05       	cpc	r25, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <KeyPad_4x4_keyMapping+0x24>
    17f8:	70 c0       	rjmp	.+224    	; 0x18da <KeyPad_4x4_keyMapping+0x104>
    17fa:	2b 81       	ldd	r18, Y+3	; 0x03
    17fc:	3c 81       	ldd	r19, Y+4	; 0x04
    17fe:	29 30       	cpi	r18, 0x09	; 9
    1800:	31 05       	cpc	r19, r1
    1802:	5c f5       	brge	.+86     	; 0x185a <KeyPad_4x4_keyMapping+0x84>
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	84 30       	cpi	r24, 0x04	; 4
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <KeyPad_4x4_keyMapping+0x3a>
    180e:	59 c0       	rjmp	.+178    	; 0x18c2 <KeyPad_4x4_keyMapping+0xec>
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	25 30       	cpi	r18, 0x05	; 5
    1816:	31 05       	cpc	r19, r1
    1818:	9c f4       	brge	.+38     	; 0x1840 <KeyPad_4x4_keyMapping+0x6a>
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <KeyPad_4x4_keyMapping+0x50>
    1824:	48 c0       	rjmp	.+144    	; 0x18b6 <KeyPad_4x4_keyMapping+0xe0>
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	23 30       	cpi	r18, 0x03	; 3
    182c:	31 05       	cpc	r19, r1
    182e:	0c f0       	brlt	.+2      	; 0x1832 <KeyPad_4x4_keyMapping+0x5c>
    1830:	45 c0       	rjmp	.+138    	; 0x18bc <KeyPad_4x4_keyMapping+0xe6>
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <KeyPad_4x4_keyMapping+0x68>
    183c:	39 c0       	rjmp	.+114    	; 0x18b0 <KeyPad_4x4_keyMapping+0xda>
    183e:	67 c0       	rjmp	.+206    	; 0x190e <KeyPad_4x4_keyMapping+0x138>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	26 30       	cpi	r18, 0x06	; 6
    1846:	31 05       	cpc	r19, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <KeyPad_4x4_keyMapping+0x76>
    184a:	41 c0       	rjmp	.+130    	; 0x18ce <KeyPad_4x4_keyMapping+0xf8>
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	87 30       	cpi	r24, 0x07	; 7
    1852:	91 05       	cpc	r25, r1
    1854:	0c f0       	brlt	.+2      	; 0x1858 <KeyPad_4x4_keyMapping+0x82>
    1856:	3e c0       	rjmp	.+124    	; 0x18d4 <KeyPad_4x4_keyMapping+0xfe>
    1858:	37 c0       	rjmp	.+110    	; 0x18c8 <KeyPad_4x4_keyMapping+0xf2>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	2c 30       	cpi	r18, 0x0C	; 12
    1860:	31 05       	cpc	r19, r1
    1862:	09 f4       	brne	.+2      	; 0x1866 <KeyPad_4x4_keyMapping+0x90>
    1864:	46 c0       	rjmp	.+140    	; 0x18f2 <KeyPad_4x4_keyMapping+0x11c>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	8d 30       	cpi	r24, 0x0D	; 13
    186c:	91 05       	cpc	r25, r1
    186e:	5c f4       	brge	.+22     	; 0x1886 <KeyPad_4x4_keyMapping+0xb0>
    1870:	2b 81       	ldd	r18, Y+3	; 0x03
    1872:	3c 81       	ldd	r19, Y+4	; 0x04
    1874:	2a 30       	cpi	r18, 0x0A	; 10
    1876:	31 05       	cpc	r19, r1
    1878:	b1 f1       	breq	.+108    	; 0x18e6 <KeyPad_4x4_keyMapping+0x110>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	8b 30       	cpi	r24, 0x0B	; 11
    1880:	91 05       	cpc	r25, r1
    1882:	a4 f5       	brge	.+104    	; 0x18ec <KeyPad_4x4_keyMapping+0x116>
    1884:	2d c0       	rjmp	.+90     	; 0x18e0 <KeyPad_4x4_keyMapping+0x10a>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	2e 30       	cpi	r18, 0x0E	; 14
    188c:	31 05       	cpc	r19, r1
    188e:	b9 f1       	breq	.+110    	; 0x18fe <KeyPad_4x4_keyMapping+0x128>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	8e 30       	cpi	r24, 0x0E	; 14
    1896:	91 05       	cpc	r25, r1
    1898:	7c f1       	brlt	.+94     	; 0x18f8 <KeyPad_4x4_keyMapping+0x122>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	2f 30       	cpi	r18, 0x0F	; 15
    18a0:	31 05       	cpc	r19, r1
    18a2:	79 f1       	breq	.+94     	; 0x1902 <KeyPad_4x4_keyMapping+0x12c>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	80 31       	cpi	r24, 0x10	; 16
    18aa:	91 05       	cpc	r25, r1
    18ac:	69 f1       	breq	.+90     	; 0x1908 <KeyPad_4x4_keyMapping+0x132>
    18ae:	2f c0       	rjmp	.+94     	; 0x190e <KeyPad_4x4_keyMapping+0x138>
	case 1: return 7;
    18b0:	97 e0       	ldi	r25, 0x07	; 7
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	2e c0       	rjmp	.+92     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 2: return 8;
    18b6:	28 e0       	ldi	r18, 0x08	; 8
    18b8:	2a 83       	std	Y+2, r18	; 0x02
    18ba:	2b c0       	rjmp	.+86     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 3: return 9;
    18bc:	39 e0       	ldi	r19, 0x09	; 9
    18be:	3a 83       	std	Y+2, r19	; 0x02
    18c0:	28 c0       	rjmp	.+80     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 4: return '%'; // ASCII Code of %
    18c2:	85 e2       	ldi	r24, 0x25	; 37
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	25 c0       	rjmp	.+74     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 5: return 4;
    18c8:	94 e0       	ldi	r25, 0x04	; 4
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	22 c0       	rjmp	.+68     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 6: return 5;
    18ce:	25 e0       	ldi	r18, 0x05	; 5
    18d0:	2a 83       	std	Y+2, r18	; 0x02
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 7: return 6;
    18d4:	36 e0       	ldi	r19, 0x06	; 6
    18d6:	3a 83       	std	Y+2, r19	; 0x02
    18d8:	1c c0       	rjmp	.+56     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 8: return '*'; /* ASCII Code of '*' */
    18da:	8a e2       	ldi	r24, 0x2A	; 42
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	19 c0       	rjmp	.+50     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 9: return 1;
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	16 c0       	rjmp	.+44     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 10: return 2;
    18e6:	22 e0       	ldi	r18, 0x02	; 2
    18e8:	2a 83       	std	Y+2, r18	; 0x02
    18ea:	13 c0       	rjmp	.+38     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 11: return 3;
    18ec:	33 e0       	ldi	r19, 0x03	; 3
    18ee:	3a 83       	std	Y+2, r19	; 0x02
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 12: return '-'; /* ASCII Code of '-' */
    18f2:	8d e2       	ldi	r24, 0x2D	; 45
    18f4:	8a 83       	std	Y+2, r24	; 0x02
    18f6:	0d c0       	rjmp	.+26     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 13: return 13;  /* ASCII of Enter */
    18f8:	9d e0       	ldi	r25, 0x0D	; 13
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	0a c0       	rjmp	.+20     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 14: return 0;
    18fe:	1a 82       	std	Y+2, r1	; 0x02
    1900:	08 c0       	rjmp	.+16     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 15: return '='; /* ASCII Code of '=' */
    1902:	2d e3       	ldi	r18, 0x3D	; 61
    1904:	2a 83       	std	Y+2, r18	; 0x02
    1906:	05 c0       	rjmp	.+10     	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	case 16: return '+'; /* ASCII Code of '+' */
    1908:	3b e2       	ldi	r19, 0x2B	; 43
    190a:	3a 83       	std	Y+2, r19	; 0x02
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <KeyPad_4x4_keyMapping+0x13c>
			break;
	default: return button;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	8a 83       	std	Y+2, r24	; 0x02
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <main>:


/************************************************************************
  	  	  	  	  	  	  	  Main Function
 ***********************************************************************/
int main(void){
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	6e 97       	sbiw	r28, 0x1e	; 30
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61

	/* UART Structure for its configurations */
	UART_ConfigType uart_Struct;

	/* Timer1 Tick every 1 Second */
	timer1_Strut.TimerID 			= TIMER_ID_1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	8f 87       	std	Y+15, r24	; 0x0f
	timer1_Strut.TimerMode			= CTC_MODE_CHANNEL_A;
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	88 8b       	std	Y+16, r24	; 0x10
	timer1_Strut.CompareMatchMode	= NORMAL;
    193e:	19 8a       	std	Y+17, r1	; 0x11
	timer1_Strut.OutputPin			= NONE;
    1940:	1a 8a       	std	Y+18, r1	; 0x12
	timer1_Strut.Prescaler			= FCPU_OVER_1024;
    1942:	85 e0       	ldi	r24, 0x05	; 5
    1944:	8b 8b       	std	Y+19, r24	; 0x13
	timer1_Strut.InitialValue		= 0;
    1946:	1d 8a       	std	Y+21, r1	; 0x15
    1948:	1c 8a       	std	Y+20, r1	; 0x14
	timer1_Strut.CompareValue		= 7900;
    194a:	8c ed       	ldi	r24, 0xDC	; 220
    194c:	9e e1       	ldi	r25, 0x1E	; 30
    194e:	9f 8b       	std	Y+23, r25	; 0x17
    1950:	8e 8b       	std	Y+22, r24	; 0x16

	uart_Struct.BaudRate			= 9600;
    1952:	80 e8       	ldi	r24, 0x80	; 128
    1954:	95 e2       	ldi	r25, 0x25	; 37
    1956:	a0 e0       	ldi	r26, 0x00	; 0
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	8b 8f       	std	Y+27, r24	; 0x1b
    195c:	9c 8f       	std	Y+28, r25	; 0x1c
    195e:	ad 8f       	std	Y+29, r26	; 0x1d
    1960:	be 8f       	std	Y+30, r27	; 0x1e
	uart_Struct.InterruptMode		= POLLING;
    1962:	18 8e       	std	Y+24, r1	; 0x18
	uart_Struct.ParityMode			= NO_PARIT_BITS;
    1964:	1a 8e       	std	Y+26, r1	; 0x1a
	uart_Struct.StopBit				= STOP_BIT_1_BIT;
    1966:	19 8e       	std	Y+25, r1	; 0x19

	/* LCD Initialization */
	LCD_Init();
    1968:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_Init>

	/* Led for Testing */
	DDRD |= (1 << PD7);
    196c:	a1 e3       	ldi	r26, 0x31	; 49
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e1 e3       	ldi	r30, 0x31	; 49
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 68       	ori	r24, 0x80	; 128
    1978:	8c 93       	st	X, r24

	/* Initial State OFF */
	PORTD &= ~(1 << PD7);
    197a:	a2 e3       	ldi	r26, 0x32	; 50
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e2 e3       	ldi	r30, 0x32	; 50
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8f 77       	andi	r24, 0x7F	; 127
    1986:	8c 93       	st	X, r24

	/* Enable Global Interrupt */
	SREG |= (1<<7);
    1988:	af e5       	ldi	r26, 0x5F	; 95
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	ef e5       	ldi	r30, 0x5F	; 95
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	8c 93       	st	X, r24

	/* Timer 1 Initialization */
	Timer_init(&timer1_Strut);
    1996:	ce 01       	movw	r24, r28
    1998:	0f 96       	adiw	r24, 0x0f	; 15
    199a:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <Timer_init>

	/* CallBack Function for timer 1 CTC Channel A Interrupt Function */
	Timer1_setCallBack(Timer1_INT);
    199e:	85 e4       	ldi	r24, 0x45	; 69
    19a0:	96 e1       	ldi	r25, 0x16	; 22
    19a2:	0e 94 cb 19 	call	0x3396	; 0x3396 <Timer1_setCallBack>

	/* UART Initialization */
	UART_init(&uart_Struct);
    19a6:	ce 01       	movw	r24, r28
    19a8:	48 96       	adiw	r24, 0x18	; 24
    19aa:	0e 94 8c 1a 	call	0x3518	; 0x3518 <UART_init>


	/* Send an ACK For other MC to start UART */
	UART_sendByte(M1_READY) ;
    19ae:	80 e1       	ldi	r24, 0x10	; 16
    19b0:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Start from first Pixel */
	LCD_goToRowColumn(0,0);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>


	LCD_clearScreen();
    19bc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Application Code");
    19c0:	80 e6       	ldi	r24, 0x60	; 96
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	aa ef       	ldi	r26, 0xFA	; 250
    19ce:	b3 e4       	ldi	r27, 0x43	; 67
    19d0:	8b 87       	std	Y+11, r24	; 0x0b
    19d2:	9c 87       	std	Y+12, r25	; 0x0c
    19d4:	ad 87       	std	Y+13, r26	; 0x0d
    19d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19da:	7c 85       	ldd	r23, Y+12	; 0x0c
    19dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19de:	9e 85       	ldd	r25, Y+14	; 0x0e
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a ef       	ldi	r20, 0xFA	; 250
    19e6:	54 e4       	ldi	r21, 0x44	; 68
    19e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	8f 83       	std	Y+7, r24	; 0x07
    19f2:	98 87       	std	Y+8, r25	; 0x08
    19f4:	a9 87       	std	Y+9, r26	; 0x09
    19f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f8:	6f 81       	ldd	r22, Y+7	; 0x07
    19fa:	78 85       	ldd	r23, Y+8	; 0x08
    19fc:	89 85       	ldd	r24, Y+9	; 0x09
    19fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <main+0xf8>
		__ticks = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	3f c0       	rjmp	.+126    	; 0x1a98 <main+0x176>
	else if (__tmp > 65535)
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	4c f5       	brge	.+82     	; 0x1a84 <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e2       	ldi	r20, 0x20	; 32
    1a40:	51 e4       	ldi	r21, 0x41	; 65
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	8d 83       	std	Y+5, r24	; 0x05
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <main+0x158>
    1a5c:	88 ec       	ldi	r24, 0xC8	; 200
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9c 83       	std	Y+4, r25	; 0x04
    1a62:	8b 83       	std	Y+3, r24	; 0x03
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	9c 81       	ldd	r25, Y+4	; 0x04
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <main+0x146>
    1a6c:	9c 83       	std	Y+4, r25	; 0x04
    1a6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	8d 81       	ldd	r24, Y+5	; 0x05
    1a72:	9e 81       	ldd	r25, Y+6	; 0x06
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	69 f7       	brne	.-38     	; 0x1a5c <main+0x13a>
    1a82:	14 c0       	rjmp	.+40     	; 0x1aac <main+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	6f 81       	ldd	r22, Y+7	; 0x07
    1a86:	78 85       	ldd	r23, Y+8	; 0x08
    1a88:	89 85       	ldd	r24, Y+9	; 0x09
    1a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <main+0x182>
    1aa8:	9a 83       	std	Y+2, r25	; 0x02
    1aaa:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	/* Check if there are no previos password saved */
		if(UART_recieveByte() == NO_PREVIOS_PASSWORDS)
    1aac:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    1ab0:	80 32       	cpi	r24, 0x20	; 32
    1ab2:	39 f4       	brne	.+14     	; 0x1ac2 <main+0x1a0>
				/*
				 * Execute at least once
				 * if the password is incorrect
				 * you will hault here
				 */
				Step1_setPassword();
    1ab4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <Step1_setPassword>
			}while(g_step1FinishFlag == 1);
    1ab8:	80 91 58 01 	lds	r24, 0x0158
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	d1 f3       	breq	.-12     	; 0x1ab4 <main+0x192>
    1ac0:	08 c0       	rjmp	.+16     	; 0x1ad2 <main+0x1b0>
		}

		/* There is a previos password saved */
		else if(UART_recieveByte() == PREVIOUS_PASSWORD_DETECTED){
    1ac2:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    1ac6:	83 32       	cpi	r24, 0x23	; 35
    1ac8:	21 f4       	brne	.+8      	; 0x1ad2 <main+0x1b0>
			LCD_displayString((uint8*)"Previous password");
    1aca:	81 e7       	ldi	r24, 0x71	; 113
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
		 * Execute at least once
		 * if the password is incorrect
		 * you will hault here
		*/
		do{
			Step2_mainCode();
    1ad2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Step2_mainCode>
    1ad6:	fd cf       	rjmp	.-6      	; 0x1ad2 <main+0x1b0>

00001ad8 <Step1_setPassword>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Step1_setPassword(void){
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	a8 97       	sbiw	r28, 0x28	; 40
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61

	/* Array to hold keypad pressed buttons */
	uint8 keypadPassword[5] = {0};
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	fe 01       	movw	r30, r28
    1af0:	7f 96       	adiw	r30, 0x1f	; 31
    1af2:	df 01       	movw	r26, r30
    1af4:	98 2f       	mov	r25, r24
    1af6:	1d 92       	st	X+, r1
    1af8:	9a 95       	dec	r25
    1afa:	e9 f7       	brne	.-6      	; 0x1af6 <Step1_setPassword+0x1e>

	/* Array to check if both passwords are correct or not */
	uint8 keypadCheckPassword[5] = {0};
    1afc:	85 e0       	ldi	r24, 0x05	; 5
    1afe:	fe 01       	movw	r30, r28
    1b00:	b4 96       	adiw	r30, 0x24	; 36
    1b02:	df 01       	movw	r26, r30
    1b04:	98 2f       	mov	r25, r24
    1b06:	1d 92       	st	X+, r1
    1b08:	9a 95       	dec	r25
    1b0a:	e9 f7       	brne	.-6      	; 0x1b06 <Step1_setPassword+0x2e>

	/* Counter Variable */
	uint8 i = 0;
    1b0c:	1e 8e       	std	Y+30, r1	; 0x1e

	/* Counter flag for password checking */
	uint8 flag = 0;
    1b0e:	1d 8e       	std	Y+29, r1	; 0x1d

	/* Clear Screen */
	LCD_clearScreen();
    1b10:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_goToRowColumn(0,0);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

	/*
	 * There are no previos password saved
	 * So, we need to save a new one
	 */
	LCD_displayString((uint8*)"Enter New Pass");
    1b1c:	83 e8       	ldi	r24, 0x83	; 131
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

	/* Go to Second row on the screen */
	LCD_goToRowColumn(1,0);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

	/* Function to get the password twice to check it */
	flag = Enter_password(keypadPassword, keypadCheckPassword);
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	4f 96       	adiw	r24, 0x1f	; 31
    1b30:	9e 01       	movw	r18, r28
    1b32:	2c 5d       	subi	r18, 0xDC	; 220
    1b34:	3f 4f       	sbci	r19, 0xFF	; 255
    1b36:	b9 01       	movw	r22, r18
    1b38:	0e 94 c0 11 	call	0x2380	; 0x2380 <Enter_password>
    1b3c:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Check if both passwords are correct or not */
	if(flag == 5){
    1b3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b40:	85 30       	cpi	r24, 0x05	; 5
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <Step1_setPassword+0x6e>
    1b44:	19 c1       	rjmp	.+562    	; 0x1d78 <Step1_setPassword+0x2a0>
		/* Both Passwords are correct */

		/* Clear calling flag */
		g_step1FinishFlag = 0;
    1b46:	10 92 58 01 	sts	0x0158, r1

		/* Clear the screen */
		LCD_clearScreen();
    1b4a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

		LCD_displayString((uint8*)"Correct!!");
    1b4e:	82 e9       	ldi	r24, 0x92	; 146
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	aa e7       	ldi	r26, 0x7A	; 122
    1b5c:	b4 e4       	ldi	r27, 0x44	; 68
    1b5e:	89 8f       	std	Y+25, r24	; 0x19
    1b60:	9a 8f       	std	Y+26, r25	; 0x1a
    1b62:	ab 8f       	std	Y+27, r26	; 0x1b
    1b64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a ef       	ldi	r20, 0xFA	; 250
    1b74:	54 e4       	ldi	r21, 0x44	; 68
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8d 8b       	std	Y+21, r24	; 0x15
    1b80:	9e 8b       	std	Y+22, r25	; 0x16
    1b82:	af 8b       	std	Y+23, r26	; 0x17
    1b84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <Step1_setPassword+0xd0>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
    1ba6:	3f c0       	rjmp	.+126    	; 0x1c26 <Step1_setPassword+0x14e>
	else if (__tmp > 65535)
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	4c f5       	brge	.+82     	; 0x1c12 <Step1_setPassword+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9c 8b       	std	Y+20, r25	; 0x14
    1be6:	8b 8b       	std	Y+19, r24	; 0x13
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <Step1_setPassword+0x130>
    1bea:	88 ec       	ldi	r24, 0xC8	; 200
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9a 8b       	std	Y+18, r25	; 0x12
    1bf0:	89 8b       	std	Y+17, r24	; 0x11
    1bf2:	89 89       	ldd	r24, Y+17	; 0x11
    1bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <Step1_setPassword+0x11e>
    1bfa:	9a 8b       	std	Y+18, r25	; 0x12
    1bfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <Step1_setPassword+0x112>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <Step1_setPassword+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	98 8b       	std	Y+16, r25	; 0x10
    1c2c:	8f 87       	std	Y+15, r24	; 0x0f
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <Step1_setPassword+0x15a>
    1c36:	98 8b       	std	Y+16, r25	; 0x10
    1c38:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1000);

		/* Send Ack to UART to start receiving the new password */
		UART_sendByte(NEW_PASSWORD_TO_BE_SAVED);
    1c3a:	81 e2       	ldi	r24, 0x21	; 33
    1c3c:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

		/* Send Password to Control ECU by UART */
		for(i = 0; i < 5; i++){
    1c40:	1e 8e       	std	Y+30, r1	; 0x1e
    1c42:	0e c0       	rjmp	.+28     	; 0x1c60 <Step1_setPassword+0x188>

			/* Send Password Byte by byte to Control ECU by UART*/
			UART_sendByte(keypadPassword[i]);
    1c44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	4f 96       	adiw	r24, 0x1f	; 31
    1c4e:	fc 01       	movw	r30, r24
    1c50:	e2 0f       	add	r30, r18
    1c52:	f3 1f       	adc	r31, r19
    1c54:	80 81       	ld	r24, Z
    1c56:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

		/* Send Ack to UART to start receiving the new password */
		UART_sendByte(NEW_PASSWORD_TO_BE_SAVED);

		/* Send Password to Control ECU by UART */
		for(i = 0; i < 5; i++){
    1c5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c5c:	8f 5f       	subi	r24, 0xFF	; 255
    1c5e:	8e 8f       	std	Y+30, r24	; 0x1e
    1c60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c62:	85 30       	cpi	r24, 0x05	; 5
    1c64:	78 f3       	brcs	.-34     	; 0x1c44 <Step1_setPassword+0x16c>
			/* Send Password Byte by byte to Control ECU by UART*/
			UART_sendByte(keypadPassword[i]);
		}

		/* Waiting for Control ECU to finish computation on passwords */
		while(UART_recieveByte() != M1_READY );
    1c66:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    1c6a:	80 31       	cpi	r24, 0x10	; 16
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <Step1_setPassword+0x18e>

		/* Check if password saved successfully on eeprom or not */
		if(UART_recieveByte() == NEW_PASSWORD_SAVED_SUCCESSFULLY){
    1c6e:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    1c72:	82 32       	cpi	r24, 0x22	; 34
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <Step1_setPassword+0x1a0>
    1c76:	79 c0       	rjmp	.+242    	; 0x1d6a <Step1_setPassword+0x292>

			/* Password Saved Successfully */
			LCD_clearScreen();
    1c78:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

			LCD_displayString((uint8*)"Password Saved!");
    1c7c:	8c e9       	ldi	r24, 0x9C	; 156
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	aa e7       	ldi	r26, 0x7A	; 122
    1c8a:	b4 e4       	ldi	r27, 0x44	; 68
    1c8c:	8b 87       	std	Y+11, r24	; 0x0b
    1c8e:	9c 87       	std	Y+12, r25	; 0x0c
    1c90:	ad 87       	std	Y+13, r26	; 0x0d
    1c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	98 87       	std	Y+8, r25	; 0x08
    1cb0:	a9 87       	std	Y+9, r26	; 0x09
    1cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <Step1_setPassword+0x1fe>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <Step1_setPassword+0x27c>
	else if (__tmp > 65535)
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <Step1_setPassword+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <Step1_setPassword+0x25e>
    1d18:	88 ec       	ldi	r24, 0xC8	; 200
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <Step1_setPassword+0x24c>
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <Step1_setPassword+0x240>
    1d3e:	1f c0       	rjmp	.+62     	; 0x1d7e <Step1_setPassword+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <Step1_setPassword+0x288>
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01
    1d68:	0a c0       	rjmp	.+20     	; 0x1d7e <Step1_setPassword+0x2a6>
			_delay_ms(1000);
		}

		else{
			/* Password Not Saved! */
			LCD_clearScreen();
    1d6a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

			LCD_displayString((uint8*)"Password NOT");
    1d6e:	8c ea       	ldi	r24, 0xAC	; 172
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <Step1_setPassword+0x2a6>

		/*
		 * Set a calling flag to get back to this function
		 * if both passwords are not matched
	     */
		g_step1FinishFlag = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	80 93 58 01 	sts	0x0158, r24
	}

}
    1d7e:	a8 96       	adiw	r28, 0x28	; 40
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	08 95       	ret

00001d90 <Step2_mainCode>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Step2_mainCode(void){
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	e6 97       	sbiw	r28, 0x36	; 54
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61

uint8 keyPressed = 0;
    1da4:	1c a6       	std	Y+44, r1	; 0x2c

/* Array to hold keypad pressed buttons */
uint8 keypadPassword[5] = {0};
    1da6:	85 e0       	ldi	r24, 0x05	; 5
    1da8:	fe 01       	movw	r30, r28
    1daa:	bd 96       	adiw	r30, 0x2d	; 45
    1dac:	df 01       	movw	r26, r30
    1dae:	98 2f       	mov	r25, r24
    1db0:	1d 92       	st	X+, r1
    1db2:	9a 95       	dec	r25
    1db4:	e9 f7       	brne	.-6      	; 0x1db0 <Step2_mainCode+0x20>

/* Array to check if both passwords are correct or not */
uint8 keypadCheckPassword[5] = {0};
    1db6:	85 e0       	ldi	r24, 0x05	; 5
    1db8:	fe 01       	movw	r30, r28
    1dba:	f2 96       	adiw	r30, 0x32	; 50
    1dbc:	df 01       	movw	r26, r30
    1dbe:	98 2f       	mov	r25, r24
    1dc0:	1d 92       	st	X+, r1
    1dc2:	9a 95       	dec	r25
    1dc4:	e9 f7       	brne	.-6      	; 0x1dc0 <Step2_mainCode+0x30>

/* Counter flag for password checking */
uint8 flag = 0;
    1dc6:	1b a6       	std	Y+43, r1	; 0x2b

/* Clear Screen */
LCD_clearScreen();
    1dc8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

/* '+' Sign to change Password */
LCD_displayString((uint8*)"+: Change Pass");
    1dcc:	89 eb       	ldi	r24, 0xB9	; 185
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

/* '-' Sign to Open Door (Step 3) */
LCD_displayStringRowColumn(1,0, "-: Open Door");
    1dd4:	28 ec       	ldi	r18, 0xC8	; 200
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCD_displayStringRowColumn>

/* Saving Input from User */
keyPressed = KeyPad_getPressedKey();
    1de2:	0e 94 93 0b 	call	0x1726	; 0x1726 <KeyPad_getPressedKey>
    1de6:	8c a7       	std	Y+44, r24	; 0x2c
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	a6 e9       	ldi	r26, 0x96	; 150
    1dee:	b3 e4       	ldi	r27, 0x43	; 67
    1df0:	8f a3       	std	Y+39, r24	; 0x27
    1df2:	98 a7       	std	Y+40, r25	; 0x28
    1df4:	a9 a7       	std	Y+41, r26	; 0x29
    1df6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dfa:	78 a5       	ldd	r23, Y+40	; 0x28
    1dfc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4a ef       	ldi	r20, 0xFA	; 250
    1e06:	54 e4       	ldi	r21, 0x44	; 68
    1e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	8b a3       	std	Y+35, r24	; 0x23
    1e12:	9c a3       	std	Y+36, r25	; 0x24
    1e14:	ad a3       	std	Y+37, r26	; 0x25
    1e16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e18:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <Step2_mainCode+0xaa>
		__ticks = 1;
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9a a3       	std	Y+34, r25	; 0x22
    1e36:	89 a3       	std	Y+33, r24	; 0x21
    1e38:	3f c0       	rjmp	.+126    	; 0x1eb8 <Step2_mainCode+0x128>
	else if (__tmp > 65535)
    1e3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e40:	9e a1       	ldd	r25, Y+38	; 0x26
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	3f ef       	ldi	r19, 0xFF	; 255
    1e46:	4f e7       	ldi	r20, 0x7F	; 127
    1e48:	57 e4       	ldi	r21, 0x47	; 71
    1e4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4e:	18 16       	cp	r1, r24
    1e50:	4c f5       	brge	.+82     	; 0x1ea4 <Step2_mainCode+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e52:	6f a1       	ldd	r22, Y+39	; 0x27
    1e54:	78 a5       	ldd	r23, Y+40	; 0x28
    1e56:	89 a5       	ldd	r24, Y+41	; 0x29
    1e58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 e2       	ldi	r20, 0x20	; 32
    1e60:	51 e4       	ldi	r21, 0x41	; 65
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	cd 01       	movw	r24, r26
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9a a3       	std	Y+34, r25	; 0x22
    1e78:	89 a3       	std	Y+33, r24	; 0x21
    1e7a:	0f c0       	rjmp	.+30     	; 0x1e9a <Step2_mainCode+0x10a>
    1e7c:	88 ec       	ldi	r24, 0xC8	; 200
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	98 a3       	std	Y+32, r25	; 0x20
    1e82:	8f 8f       	std	Y+31, r24	; 0x1f
    1e84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e86:	98 a1       	ldd	r25, Y+32	; 0x20
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <Step2_mainCode+0xf8>
    1e8c:	98 a3       	std	Y+32, r25	; 0x20
    1e8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e90:	89 a1       	ldd	r24, Y+33	; 0x21
    1e92:	9a a1       	ldd	r25, Y+34	; 0x22
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	9a a3       	std	Y+34, r25	; 0x22
    1e98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <Step2_mainCode+0xec>
    1ea2:	14 c0       	rjmp	.+40     	; 0x1ecc <Step2_mainCode+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    1eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9a a3       	std	Y+34, r25	; 0x22
    1eb6:	89 a3       	std	Y+33, r24	; 0x21
    1eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eba:	9a a1       	ldd	r25, Y+34	; 0x22
    1ebc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ebe:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <Step2_mainCode+0x134>
    1ec8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eca:	8d 8f       	std	Y+29, r24	; 0x1d

/* Delay to avoid inputting 2 times */
_delay_ms(300);

/* Check for '+' Sign which is change password */
if(keyPressed == '+'){
    1ecc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ece:	8b 32       	cpi	r24, 0x2B	; 43
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <Step2_mainCode+0x144>
    1ed2:	1e c1       	rjmp	.+572    	; 0x2110 <Step2_mainCode+0x380>

	UART_sendByte(M1_READY);
    1ed4:	80 e1       	ldi	r24, 0x10	; 16
    1ed6:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	UART_sendByte(OVER_WRITE_OLD_PASSWORD);
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	LCD_clearScreen();
    1ee0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Change Password");
    1ee4:	85 ed       	ldi	r24, 0xD5	; 213
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	aa e7       	ldi	r26, 0x7A	; 122
    1ef2:	b4 e4       	ldi	r27, 0x44	; 68
    1ef4:	89 8f       	std	Y+25, r24	; 0x19
    1ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    1efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	69 8d       	ldd	r22, Y+25	; 0x19
    1efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8d 8b       	std	Y+21, r24	; 0x15
    1f16:	9e 8b       	std	Y+22, r25	; 0x16
    1f18:	af 8b       	std	Y+23, r26	; 0x17
    1f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <Step2_mainCode+0x1ae>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <Step2_mainCode+0x22c>
	else if (__tmp > 65535)
    1f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f40:	7e 89       	ldd	r23, Y+22	; 0x16
    1f42:	8f 89       	ldd	r24, Y+23	; 0x17
    1f44:	98 8d       	ldd	r25, Y+24	; 0x18
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <Step2_mainCode+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <Step2_mainCode+0x20e>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <Step2_mainCode+0x1fc>
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <Step2_mainCode+0x1f0>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <Step2_mainCode+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
    1fc2:	8f 87       	std	Y+15, r24	; 0x0f
    1fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc6:	98 89       	ldd	r25, Y+16	; 0x10
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <Step2_mainCode+0x238>
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1000);

	/* Go to check password function */
	 Password_check();
    1fd0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Password_check>

	 /*
	  * Check for theif flag
	  * (if Password is wrong 3 times consecutively)
	 */
	 if(g_theifFlag == 0){
    1fd4:	80 91 56 01 	lds	r24, 0x0156
    1fd8:	88 23       	and	r24, r24
    1fda:	09 f0       	breq	.+2      	; 0x1fde <Step2_mainCode+0x24e>
    1fdc:	9e c0       	rjmp	.+316    	; 0x211a <Step2_mainCode+0x38a>

		LCD_clearScreen();
    1fde:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

		LCD_displayString((uint8*)"Correct Pass");
    1fe2:	85 ee       	ldi	r24, 0xE5	; 229
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	aa ef       	ldi	r26, 0xFA	; 250
    1ff0:	b3 e4       	ldi	r27, 0x43	; 67
    1ff2:	8b 87       	std	Y+11, r24	; 0x0b
    1ff4:	9c 87       	std	Y+12, r25	; 0x0c
    1ff6:	ad 87       	std	Y+13, r26	; 0x0d
    1ff8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ffc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2000:	9e 85       	ldd	r25, Y+14	; 0x0e
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8f 83       	std	Y+7, r24	; 0x07
    2014:	98 87       	std	Y+8, r25	; 0x08
    2016:	a9 87       	std	Y+9, r26	; 0x09
    2018:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <Step2_mainCode+0x2ac>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9e 83       	std	Y+6, r25	; 0x06
    2038:	8d 83       	std	Y+5, r24	; 0x05
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <Step2_mainCode+0x32a>
	else if (__tmp > 65535)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <Step2_mainCode+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6b 85       	ldd	r22, Y+11	; 0x0b
    2056:	7c 85       	ldd	r23, Y+12	; 0x0c
    2058:	8d 85       	ldd	r24, Y+13	; 0x0d
    205a:	9e 85       	ldd	r25, Y+14	; 0x0e
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	0f c0       	rjmp	.+30     	; 0x209c <Step2_mainCode+0x30c>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <Step2_mainCode+0x2fa>
    208e:	9c 83       	std	Y+4, r25	; 0x04
    2090:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <Step2_mainCode+0x2ee>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <Step2_mainCode+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9e 83       	std	Y+6, r25	; 0x06
    20b8:	8d 83       	std	Y+5, r24	; 0x05
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <Step2_mainCode+0x336>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(500);

		/* Proceed to get the new password */
		LCD_clearScreen();
    20ce:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

		LCD_displayString((uint8*)"Enter New Pass");
    20d2:	83 e8       	ldi	r24, 0x83	; 131
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

		/* Go to Second row on the screen */
		LCD_goToRowColumn(1,0);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

		/* Function to get the password twice to check it */
		flag = Enter_password(keypadPassword, keypadCheckPassword);
    20e2:	ce 01       	movw	r24, r28
    20e4:	8d 96       	adiw	r24, 0x2d	; 45
    20e6:	9e 01       	movw	r18, r28
    20e8:	2e 5c       	subi	r18, 0xCE	; 206
    20ea:	3f 4f       	sbci	r19, 0xFF	; 255
    20ec:	b9 01       	movw	r22, r18
    20ee:	0e 94 c0 11 	call	0x2380	; 0x2380 <Enter_password>
    20f2:	8b a7       	std	Y+43, r24	; 0x2b

		/* Check if both passwords are correct or not */
		if(flag == 5){
    20f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f6:	85 30       	cpi	r24, 0x05	; 5
    20f8:	41 f4       	brne	.+16     	; 0x210a <Step2_mainCode+0x37a>
			New_passwordCorrectCode(keypadPassword);
    20fa:	ce 01       	movw	r24, r28
    20fc:	8d 96       	adiw	r24, 0x2d	; 45
    20fe:	0e 94 12 15 	call	0x2a24	; 0x2a24 <New_passwordCorrectCode>
			 * change password function, i should send
			 * M1_READY ACK 3 times due to system latency
			 * so this flag is indication for me that i
			 * finished Step 2 Function code
			*/
			g_step2FinishFlag = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 57 01 	sts	0x0157, r24
    2108:	08 c0       	rjmp	.+16     	; 0x211a <Step2_mainCode+0x38a>
			 * Not the best practice because if user put the password
			 * wrong a lot of time, all this context switching
			 * may goes into stackoverflow.
			 * So, i should think about another way
			 */
			Step2_mainCode();
    210a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <Step2_mainCode>
    210e:	05 c0       	rjmp	.+10     	; 0x211a <Step2_mainCode+0x38a>
		 return;
	 }

}
/* Check for '+' Sign which is Open Door (Step 3) */
else if(keyPressed == '-'){
    2110:	8c a5       	ldd	r24, Y+44	; 0x2c
    2112:	8d 32       	cpi	r24, 0x2D	; 45
    2114:	11 f4       	brne	.+4      	; 0x211a <Step2_mainCode+0x38a>
	Step3_doorManipulation();
    2116:	0e 94 96 10 	call	0x212c	; 0x212c <Step3_doorManipulation>
}
}
    211a:	e6 96       	adiw	r28, 0x36	; 54
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <Step3_doorManipulation>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Step3_doorManipulation(void){
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	6c 97       	sbiw	r28, 0x1c	; 28
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
    2140:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Door Manipul");
    2144:	82 ef       	ldi	r24, 0xF2	; 242
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	aa e7       	ldi	r26, 0x7A	; 122
    2152:	b4 e4       	ldi	r27, 0x44	; 68
    2154:	89 8f       	std	Y+25, r24	; 0x19
    2156:	9a 8f       	std	Y+26, r25	; 0x1a
    2158:	ab 8f       	std	Y+27, r26	; 0x1b
    215a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	69 8d       	ldd	r22, Y+25	; 0x19
    215e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4a ef       	ldi	r20, 0xFA	; 250
    216a:	54 e4       	ldi	r21, 0x44	; 68
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	8d 8b       	std	Y+21, r24	; 0x15
    2176:	9e 8b       	std	Y+22, r25	; 0x16
    2178:	af 8b       	std	Y+23, r26	; 0x17
    217a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e8       	ldi	r20, 0x80	; 128
    218a:	5f e3       	ldi	r21, 0x3F	; 63
    218c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2190:	88 23       	and	r24, r24
    2192:	2c f4       	brge	.+10     	; 0x219e <Step3_doorManipulation+0x72>
		__ticks = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	9c 8b       	std	Y+20, r25	; 0x14
    219a:	8b 8b       	std	Y+19, r24	; 0x13
    219c:	3f c0       	rjmp	.+126    	; 0x221c <Step3_doorManipulation+0xf0>
	else if (__tmp > 65535)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	4c f5       	brge	.+82     	; 0x2208 <Step3_doorManipulation+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	69 8d       	ldd	r22, Y+25	; 0x19
    21b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e2       	ldi	r20, 0x20	; 32
    21c4:	51 e4       	ldi	r21, 0x41	; 65
    21c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	bc 01       	movw	r22, r24
    21d0:	cd 01       	movw	r24, r26
    21d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	9c 8b       	std	Y+20, r25	; 0x14
    21dc:	8b 8b       	std	Y+19, r24	; 0x13
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <Step3_doorManipulation+0xd2>
    21e0:	88 ec       	ldi	r24, 0xC8	; 200
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9a 8b       	std	Y+18, r25	; 0x12
    21e6:	89 8b       	std	Y+17, r24	; 0x11
    21e8:	89 89       	ldd	r24, Y+17	; 0x11
    21ea:	9a 89       	ldd	r25, Y+18	; 0x12
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <Step3_doorManipulation+0xc0>
    21f0:	9a 8b       	std	Y+18, r25	; 0x12
    21f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	8b 89       	ldd	r24, Y+19	; 0x13
    21f6:	9c 89       	ldd	r25, Y+20	; 0x14
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9c 8b       	std	Y+20, r25	; 0x14
    21fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	69 f7       	brne	.-38     	; 0x21e0 <Step3_doorManipulation+0xb4>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <Step3_doorManipulation+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	9c 8b       	std	Y+20, r25	; 0x14
    221a:	8b 8b       	std	Y+19, r24	; 0x13
    221c:	8b 89       	ldd	r24, Y+19	; 0x13
    221e:	9c 89       	ldd	r25, Y+20	; 0x14
    2220:	98 8b       	std	Y+16, r25	; 0x10
    2222:	8f 87       	std	Y+15, r24	; 0x0f
    2224:	8f 85       	ldd	r24, Y+15	; 0x0f
    2226:	98 89       	ldd	r25, Y+16	; 0x10
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <Step3_doorManipulation+0xfc>
    222c:	98 8b       	std	Y+16, r25	; 0x10
    222e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1000);

	/* ACK for Control ECU */
	UART_sendByte(M1_READY);
    2230:	80 e1       	ldi	r24, 0x10	; 16
    2232:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Second time sending due to system latency */
	UART_sendByte(M1_READY);
    2236:	80 e1       	ldi	r24, 0x10	; 16
    2238:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/*  */
	if(g_step2FinishFlag == 1){
    223c:	80 91 57 01 	lds	r24, 0x0157
    2240:	81 30       	cpi	r24, 0x01	; 1
    2242:	29 f4       	brne	.+10     	; 0x224e <Step3_doorManipulation+0x122>
		 * M1_READY ACK 3 times due to system latency
		 * so this flag is indication for me that i
		 * finished Step 2 Function code and now i should
		 * send the ACK for the 3rd time
		*/
		g_step2FinishFlag = 0;
    2244:	10 92 57 01 	sts	0x0157, r1

		/* Third time sending due to system latency */
		UART_sendByte(M1_READY);
    2248:	80 e1       	ldi	r24, 0x10	; 16
    224a:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	}
	/* Telling them that we are in step 3 */
	UART_sendByte(STEP3_DOOR_MANIPULATION);
    224e:	80 e4       	ldi	r24, 0x40	; 64
    2250:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Check for passowrd */
	Password_check();
    2254:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Password_check>

	 /*
	  * Check for theif flag
	  * (if Password is wrong 3 times consecutively)
	 */
	if(g_theifFlag == 0){
    2258:	80 91 56 01 	lds	r24, 0x0156
    225c:	88 23       	and	r24, r24
    225e:	09 f0       	breq	.+2      	; 0x2262 <Step3_doorManipulation+0x136>
    2260:	86 c0       	rjmp	.+268    	; 0x236e <Step3_doorManipulation+0x242>

	LCD_displayStringRowColumn(1,0,"Correct Pass");
    2262:	25 ee       	ldi	r18, 0xE5	; 229
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCD_displayStringRowColumn>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	aa ef       	ldi	r26, 0xFA	; 250
    2276:	b3 e4       	ldi	r27, 0x43	; 67
    2278:	8b 87       	std	Y+11, r24	; 0x0b
    227a:	9c 87       	std	Y+12, r25	; 0x0c
    227c:	ad 87       	std	Y+13, r26	; 0x0d
    227e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6b 85       	ldd	r22, Y+11	; 0x0b
    2282:	7c 85       	ldd	r23, Y+12	; 0x0c
    2284:	8d 85       	ldd	r24, Y+13	; 0x0d
    2286:	9e 85       	ldd	r25, Y+14	; 0x0e
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8f 83       	std	Y+7, r24	; 0x07
    229a:	98 87       	std	Y+8, r25	; 0x08
    229c:	a9 87       	std	Y+9, r26	; 0x09
    229e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a0:	6f 81       	ldd	r22, Y+7	; 0x07
    22a2:	78 85       	ldd	r23, Y+8	; 0x08
    22a4:	89 85       	ldd	r24, Y+9	; 0x09
    22a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <Step3_doorManipulation+0x196>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <Step3_doorManipulation+0x214>
	else if (__tmp > 65535)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <Step3_doorManipulation+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9e 83       	std	Y+6, r25	; 0x06
    2300:	8d 83       	std	Y+5, r24	; 0x05
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <Step3_doorManipulation+0x1f6>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <Step3_doorManipulation+0x1e4>
    2314:	9c 83       	std	Y+4, r25	; 0x04
    2316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <Step3_doorManipulation+0x1d8>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <Step3_doorManipulation+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	9a 81       	ldd	r25, Y+2	; 0x02
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <Step3_doorManipulation+0x220>
    2350:	9a 83       	std	Y+2, r25	; 0x02
    2352:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	LCD_clearScreen();
    2354:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayStringRowColumn(1,0,"Door Opening");
    2358:	2f ef       	ldi	r18, 0xFF	; 255
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	a9 01       	movw	r20, r18
    2362:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCD_displayStringRowColumn>

	/* Correct Password Received */

	/* Open Door for 10 seconds */
	Door_on();
    2366:	0e 94 13 13 	call	0x2626	; 0x2626 <Door_on>

	/* Close Door for 10 Seconds */
	Door_off();
    236a:	0e 94 46 13 	call	0x268c	; 0x268c <Door_off>
	else{
		return;

	}

}
    236e:	6c 96       	adiw	r28, 0x1c	; 28
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <Enter_password>:
 [in/out]			None

 [Returns]:			Counter of correct times
 	 	 	 	 	(It should be 5 because it's a 5 digit password)
 **********************************************************************************/
uint8 Enter_password(uint8* arr1, uint8* arr2){
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	a2 97       	sbiw	r28, 0x22	; 34
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	98 a3       	std	Y+32, r25	; 0x20
    239a:	8f 8f       	std	Y+31, r24	; 0x1f
    239c:	7a a3       	std	Y+34, r23	; 0x22
    239e:	69 a3       	std	Y+33, r22	; 0x21

	uint8 i = 0;
    23a0:	1e 8e       	std	Y+30, r1	; 0x1e

	uint8 FlagtoCheck = 0;
    23a2:	1d 8e       	std	Y+29, r1	; 0x1d
	/*
	 * We need to enter a new password from 5 digits
	 * so, we will receive the 5 digits from keypad,
	 * then it will be sent to the Control ECU UsingF UART
	 */
	for(i = 0; i < 5; i++){
    23a4:	1e 8e       	std	Y+30, r1	; 0x1e
    23a6:	84 c0       	rjmp	.+264    	; 0x24b0 <Enter_password+0x130>

		/* Receive password digit by digit */
		arr1[i] = KeyPad_getPressedKey();
    23a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b0:	98 a1       	ldd	r25, Y+32	; 0x20
    23b2:	8c 01       	movw	r16, r24
    23b4:	02 0f       	add	r16, r18
    23b6:	13 1f       	adc	r17, r19
    23b8:	0e 94 93 0b 	call	0x1726	; 0x1726 <KeyPad_getPressedKey>
    23bc:	f8 01       	movw	r30, r16
    23be:	80 83       	st	Z, r24
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a6 e9       	ldi	r26, 0x96	; 150
    23c6:	b3 e4       	ldi	r27, 0x43	; 67
    23c8:	89 8f       	std	Y+25, r24	; 0x19
    23ca:	9a 8f       	std	Y+26, r25	; 0x1a
    23cc:	ab 8f       	std	Y+27, r26	; 0x1b
    23ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d0:	69 8d       	ldd	r22, Y+25	; 0x19
    23d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a ef       	ldi	r20, 0xFA	; 250
    23de:	54 e4       	ldi	r21, 0x44	; 68
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8d 8b       	std	Y+21, r24	; 0x15
    23ea:	9e 8b       	std	Y+22, r25	; 0x16
    23ec:	af 8b       	std	Y+23, r26	; 0x17
    23ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23f0:	6d 89       	ldd	r22, Y+21	; 0x15
    23f2:	7e 89       	ldd	r23, Y+22	; 0x16
    23f4:	8f 89       	ldd	r24, Y+23	; 0x17
    23f6:	98 8d       	ldd	r25, Y+24	; 0x18
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <Enter_password+0x92>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9c 8b       	std	Y+20, r25	; 0x14
    240e:	8b 8b       	std	Y+19, r24	; 0x13
    2410:	3f c0       	rjmp	.+126    	; 0x2490 <Enter_password+0x110>
	else if (__tmp > 65535)
    2412:	6d 89       	ldd	r22, Y+21	; 0x15
    2414:	7e 89       	ldd	r23, Y+22	; 0x16
    2416:	8f 89       	ldd	r24, Y+23	; 0x17
    2418:	98 8d       	ldd	r25, Y+24	; 0x18
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	4c f5       	brge	.+82     	; 0x247c <Enter_password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242a:	69 8d       	ldd	r22, Y+25	; 0x19
    242c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e2       	ldi	r20, 0x20	; 32
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <Enter_password+0xf2>
    2454:	88 ec       	ldi	r24, 0xC8	; 200
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9a 8b       	std	Y+18, r25	; 0x12
    245a:	89 8b       	std	Y+17, r24	; 0x11
    245c:	89 89       	ldd	r24, Y+17	; 0x11
    245e:	9a 89       	ldd	r25, Y+18	; 0x12
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <Enter_password+0xe0>
    2464:	9a 8b       	std	Y+18, r25	; 0x12
    2466:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2468:	8b 89       	ldd	r24, Y+19	; 0x13
    246a:	9c 89       	ldd	r25, Y+20	; 0x14
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	9c 8b       	std	Y+20, r25	; 0x14
    2470:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	69 f7       	brne	.-38     	; 0x2454 <Enter_password+0xd4>
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <Enter_password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	6d 89       	ldd	r22, Y+21	; 0x15
    247e:	7e 89       	ldd	r23, Y+22	; 0x16
    2480:	8f 89       	ldd	r24, Y+23	; 0x17
    2482:	98 8d       	ldd	r25, Y+24	; 0x18
    2484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9c 8b       	std	Y+20, r25	; 0x14
    248e:	8b 8b       	std	Y+19, r24	; 0x13
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	98 8b       	std	Y+16, r25	; 0x10
    2496:	8f 87       	std	Y+15, r24	; 0x0f
    2498:	8f 85       	ldd	r24, Y+15	; 0x0f
    249a:	98 89       	ldd	r25, Y+16	; 0x10
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <Enter_password+0x11c>
    24a0:	98 8b       	std	Y+16, r25	; 0x10
    24a2:	8f 87       	std	Y+15, r24	; 0x0f

		/* Press time */
		_delay_ms(300);

		/* Indicator for reciving the digit */
		LCD_displayCharacter('*');
    24a4:	8a e2       	ldi	r24, 0x2A	; 42
    24a6:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>
	/*
	 * We need to enter a new password from 5 digits
	 * so, we will receive the 5 digits from keypad,
	 * then it will be sent to the Control ECU UsingF UART
	 */
	for(i = 0; i < 5; i++){
    24aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	8e 8f       	std	Y+30, r24	; 0x1e
    24b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24b2:	85 30       	cpi	r24, 0x05	; 5
    24b4:	08 f4       	brcc	.+2      	; 0x24b8 <Enter_password+0x138>
    24b6:	78 cf       	rjmp	.-272    	; 0x23a8 <Enter_password+0x28>
		/* Indicator for reciving the digit */
		LCD_displayCharacter('*');
	}

	/* Clear Screen to send password again */
	LCD_clearScreen();
    24b8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	/* Telling the user to enter the password again */
	LCD_displayString((uint8*)"Enter pass again: ");
    24bc:	8c e0       	ldi	r24, 0x0C	; 12
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

	/* Go to Second row on the screen */
	LCD_goToRowColumn(1,0);
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

	/*
	 * Getting the  password again to check if both passwords
	 * are correct or not
	 */
	for(i = 0; i < 5; i++){
    24cc:	1e 8e       	std	Y+30, r1	; 0x1e
    24ce:	9b c0       	rjmp	.+310    	; 0x2606 <Enter_password+0x286>

		/* Receive password digit by digit */
		arr2[i] = KeyPad_getPressedKey();
    24d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	89 a1       	ldd	r24, Y+33	; 0x21
    24d8:	9a a1       	ldd	r25, Y+34	; 0x22
    24da:	8c 01       	movw	r16, r24
    24dc:	02 0f       	add	r16, r18
    24de:	13 1f       	adc	r17, r19
    24e0:	0e 94 93 0b 	call	0x1726	; 0x1726 <KeyPad_getPressedKey>
    24e4:	f8 01       	movw	r30, r16
    24e6:	80 83       	st	Z, r24
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a6 e9       	ldi	r26, 0x96	; 150
    24ee:	b3 e4       	ldi	r27, 0x43	; 67
    24f0:	8b 87       	std	Y+11, r24	; 0x0b
    24f2:	9c 87       	std	Y+12, r25	; 0x0c
    24f4:	ad 87       	std	Y+13, r26	; 0x0d
    24f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    24fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	4a ef       	ldi	r20, 0xFA	; 250
    2506:	54 e4       	ldi	r21, 0x44	; 68
    2508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	8f 83       	std	Y+7, r24	; 0x07
    2512:	98 87       	std	Y+8, r25	; 0x08
    2514:	a9 87       	std	Y+9, r26	; 0x09
    2516:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	40 e8       	ldi	r20, 0x80	; 128
    2526:	5f e3       	ldi	r21, 0x3F	; 63
    2528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252c:	88 23       	and	r24, r24
    252e:	2c f4       	brge	.+10     	; 0x253a <Enter_password+0x1ba>
		__ticks = 1;
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	3f c0       	rjmp	.+126    	; 0x25b8 <Enter_password+0x238>
	else if (__tmp > 65535)
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	3f ef       	ldi	r19, 0xFF	; 255
    2546:	4f e7       	ldi	r20, 0x7F	; 127
    2548:	57 e4       	ldi	r21, 0x47	; 71
    254a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254e:	18 16       	cp	r1, r24
    2550:	4c f5       	brge	.+82     	; 0x25a4 <Enter_password+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2552:	6b 85       	ldd	r22, Y+11	; 0x0b
    2554:	7c 85       	ldd	r23, Y+12	; 0x0c
    2556:	8d 85       	ldd	r24, Y+13	; 0x0d
    2558:	9e 85       	ldd	r25, Y+14	; 0x0e
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e2       	ldi	r20, 0x20	; 32
    2560:	51 e4       	ldi	r21, 0x41	; 65
    2562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	0f c0       	rjmp	.+30     	; 0x259a <Enter_password+0x21a>
    257c:	88 ec       	ldi	r24, 0xC8	; 200
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	9c 81       	ldd	r25, Y+4	; 0x04
    2588:	01 97       	sbiw	r24, 0x01	; 1
    258a:	f1 f7       	brne	.-4      	; 0x2588 <Enter_password+0x208>
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259a:	8d 81       	ldd	r24, Y+5	; 0x05
    259c:	9e 81       	ldd	r25, Y+6	; 0x06
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	69 f7       	brne	.-38     	; 0x257c <Enter_password+0x1fc>
    25a2:	14 c0       	rjmp	.+40     	; 0x25cc <Enter_password+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	01 97       	sbiw	r24, 0x01	; 1
    25c6:	f1 f7       	brne	.-4      	; 0x25c4 <Enter_password+0x244>
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01

		/* Press time */
		_delay_ms(300);

		/* Indicator for reciving the digit */
		LCD_displayCharacter('*');
    25cc:	8a e2       	ldi	r24, 0x2A	; 42
    25ce:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>

		/* Check if both passwords are correct or not digit by digit */
		if(arr1[i] == arr2[i]){
    25d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25da:	98 a1       	ldd	r25, Y+32	; 0x20
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	40 81       	ld	r20, Z
    25e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	89 a1       	ldd	r24, Y+33	; 0x21
    25ec:	9a a1       	ldd	r25, Y+34	; 0x22
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	80 81       	ld	r24, Z
    25f6:	48 17       	cp	r20, r24
    25f8:	19 f4       	brne	.+6      	; 0x2600 <Enter_password+0x280>

			/* Increamt the flag, it should be 5 if both are correct */
			FlagtoCheck += 1;
    25fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25fc:	8f 5f       	subi	r24, 0xFF	; 255
    25fe:	8d 8f       	std	Y+29, r24	; 0x1d

	/*
	 * Getting the  password again to check if both passwords
	 * are correct or not
	 */
	for(i = 0; i < 5; i++){
    2600:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	8e 8f       	std	Y+30, r24	; 0x1e
    2606:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2608:	85 30       	cpi	r24, 0x05	; 5
    260a:	08 f4       	brcc	.+2      	; 0x260e <Enter_password+0x28e>
    260c:	61 cf       	rjmp	.-318    	; 0x24d0 <Enter_password+0x150>

			/* Increamt the flag, it should be 5 if both are correct */
			FlagtoCheck += 1;
		}
	}
	return FlagtoCheck;
    260e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2610:	a2 96       	adiw	r28, 0x22	; 34
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	cf 91       	pop	r28
    261e:	df 91       	pop	r29
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	08 95       	ret

00002626 <Door_on>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Door_on(void){
    2626:	df 93       	push	r29
    2628:	cf 93       	push	r28
    262a:	0f 92       	push	r0
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62

	/* Variable used to save global counter flag in ISR */
	uint8_t save_globalNow = 0;
    2630:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    2632:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Door Opening");
    2636:	8f ef       	ldi	r24, 0xFF	; 255
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

	/* Getting the value of the Counter flag now */
	save_globalNow = g_timer1_10SecFlag;
    263e:	80 91 54 01 	lds	r24, 0x0154
    2642:	89 83       	std	Y+1, r24	; 0x01

	/* Send an ACK to the Control ECU to start opening the door */
	UART_sendByte(DOOR_OPEN);
    2644:	85 e4       	ldi	r24, 0x45	; 69
    2646:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>
    264a:	11 c0       	rjmp	.+34     	; 0x266e <Door_on+0x48>
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_10SecFlag < (save_globalNow + 10)){

		LCD_goToRowColumn(1,0);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

		/* Showing the counter value on the LCD */
		LCD_intgerToString((g_timer1_1MinFlag - save_globalNow));
    2654:	80 91 55 01 	lds	r24, 0x0155
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	88 2f       	mov	r24, r24
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	a9 01       	movw	r20, r18
    2664:	48 1b       	sub	r20, r24
    2666:	59 0b       	sbc	r21, r25
    2668:	ca 01       	movw	r24, r20
    266a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_intgerToString>
	 * delay for 10 Seconds to open the door
	 * Here i check for the global counter flag value
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_10SecFlag < (save_globalNow + 10)){
    266e:	80 91 54 01 	lds	r24, 0x0154
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	89 81       	ldd	r24, Y+1	; 0x01
    2678:	88 2f       	mov	r24, r24
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	0a 96       	adiw	r24, 0x0a	; 10
    267e:	28 17       	cp	r18, r24
    2680:	39 07       	cpc	r19, r25
    2682:	24 f3       	brlt	.-56     	; 0x264c <Door_on+0x26>

		/* Showing the counter value on the LCD */
		LCD_intgerToString((g_timer1_1MinFlag - save_globalNow));
	}

}
    2684:	0f 90       	pop	r0
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	08 95       	ret

0000268c <Door_off>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Door_off(void){
    268c:	df 93       	push	r29
    268e:	cf 93       	push	r28
    2690:	0f 92       	push	r0
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62

	/* Variable used to save global counter flag in ISR */
	uint8_t save_globalNow = 0;
    2696:	19 82       	std	Y+1, r1	; 0x01

	LCD_clearScreen();
    2698:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Door Closing");
    269c:	8f e1       	ldi	r24, 0x1F	; 31
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>


	/* Getting the value of the Counter flag now */
	save_globalNow = g_timer1_10SecFlag;
    26a4:	80 91 54 01 	lds	r24, 0x0154
    26a8:	89 83       	std	Y+1, r24	; 0x01

	/* Send an ACK to the Control ECU to start Closing the door */
	UART_sendByte(DOOR_CLOSE);
    26aa:	86 e4       	ldi	r24, 0x46	; 70
    26ac:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>
    26b0:	11 c0       	rjmp	.+34     	; 0x26d4 <Door_off+0x48>
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_10SecFlag < (save_globalNow + 10)){

		LCD_goToRowColumn(1,0);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

		/* Showing the counter value on the LCD */
		LCD_intgerToString((g_timer1_1MinFlag - save_globalNow));
    26ba:	80 91 55 01 	lds	r24, 0x0155
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a9 01       	movw	r20, r18
    26ca:	48 1b       	sub	r20, r24
    26cc:	59 0b       	sbc	r21, r25
    26ce:	ca 01       	movw	r24, r20
    26d0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_intgerToString>
	 * delay for 10 Seconds to close the door
	 * Here i check for the global counter flag value
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_10SecFlag < (save_globalNow + 10)){
    26d4:	80 91 54 01 	lds	r24, 0x0154
    26d8:	28 2f       	mov	r18, r24
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	88 2f       	mov	r24, r24
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	0a 96       	adiw	r24, 0x0a	; 10
    26e4:	28 17       	cp	r18, r24
    26e6:	39 07       	cpc	r19, r25
    26e8:	24 f3       	brlt	.-56     	; 0x26b2 <Door_off+0x26>
		LCD_goToRowColumn(1,0);

		/* Showing the counter value on the LCD */
		LCD_intgerToString((g_timer1_1MinFlag - save_globalNow));
	}
}
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <Password_check>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Password_check(void){
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	a3 97       	sbiw	r28, 0x23	; 35
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61

	/* Variable to save the status of the operations */
	uint8 status = 0;
    270a:	1e 8e       	std	Y+30, r1	; 0x1e

	/* Iteration variable */
	uint8 i = 0;
    270c:	1d 8e       	std	Y+29, r1	; 0x1d

	/* Array to hold the password */
	uint8 PasswordArr[5] = {0};
    270e:	85 e0       	ldi	r24, 0x05	; 5
    2710:	fe 01       	movw	r30, r28
    2712:	7f 96       	adiw	r30, 0x1f	; 31
    2714:	df 01       	movw	r26, r30
    2716:	98 2f       	mov	r25, r24
    2718:	1d 92       	st	X+, r1
    271a:	9a 95       	dec	r25
    271c:	e9 f7       	brne	.-6      	; 0x2718 <Password_check+0x26>
	 * so it wont be a big problem
	*/
	static uint8 Flag_of_Calling = 0;

	/* Enter old password to check */
	LCD_clearScreen();
    271e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Enter Password:");
    2722:	8c e2       	ldi	r24, 0x2C	; 44
    2724:	91 e0       	ldi	r25, 0x01	; 1
    2726:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

	LCD_goToRowColumn(1,0);
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	60 e0       	ldi	r22, 0x00	; 0
    272e:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

	/* Asking to enter password */
	for(i = 0; i < 5; i++){
    2732:	1d 8e       	std	Y+29, r1	; 0x1d
    2734:	84 c0       	rjmp	.+264    	; 0x283e <Password_check+0x14c>

		/* Receive password digit by digit */
		PasswordArr[i] = KeyPad_getPressedKey();
    2736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2738:	08 2f       	mov	r16, r24
    273a:	10 e0       	ldi	r17, 0x00	; 0
    273c:	0e 94 93 0b 	call	0x1726	; 0x1726 <KeyPad_getPressedKey>
    2740:	28 2f       	mov	r18, r24
    2742:	ce 01       	movw	r24, r28
    2744:	4f 96       	adiw	r24, 0x1f	; 31
    2746:	fc 01       	movw	r30, r24
    2748:	e0 0f       	add	r30, r16
    274a:	f1 1f       	adc	r31, r17
    274c:	20 83       	st	Z, r18
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a6 e9       	ldi	r26, 0x96	; 150
    2754:	b3 e4       	ldi	r27, 0x43	; 67
    2756:	89 8f       	std	Y+25, r24	; 0x19
    2758:	9a 8f       	std	Y+26, r25	; 0x1a
    275a:	ab 8f       	std	Y+27, r26	; 0x1b
    275c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	69 8d       	ldd	r22, Y+25	; 0x19
    2760:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2764:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a ef       	ldi	r20, 0xFA	; 250
    276c:	54 e4       	ldi	r21, 0x44	; 68
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8d 8b       	std	Y+21, r24	; 0x15
    2778:	9e 8b       	std	Y+22, r25	; 0x16
    277a:	af 8b       	std	Y+23, r26	; 0x17
    277c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    277e:	6d 89       	ldd	r22, Y+21	; 0x15
    2780:	7e 89       	ldd	r23, Y+22	; 0x16
    2782:	8f 89       	ldd	r24, Y+23	; 0x17
    2784:	98 8d       	ldd	r25, Y+24	; 0x18
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <Password_check+0xae>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9c 8b       	std	Y+20, r25	; 0x14
    279c:	8b 8b       	std	Y+19, r24	; 0x13
    279e:	3f c0       	rjmp	.+126    	; 0x281e <Password_check+0x12c>
	else if (__tmp > 65535)
    27a0:	6d 89       	ldd	r22, Y+21	; 0x15
    27a2:	7e 89       	ldd	r23, Y+22	; 0x16
    27a4:	8f 89       	ldd	r24, Y+23	; 0x17
    27a6:	98 8d       	ldd	r25, Y+24	; 0x18
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	3f ef       	ldi	r19, 0xFF	; 255
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	57 e4       	ldi	r21, 0x47	; 71
    27b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	4c f5       	brge	.+82     	; 0x280a <Password_check+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	69 8d       	ldd	r22, Y+25	; 0x19
    27ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9c 8b       	std	Y+20, r25	; 0x14
    27de:	8b 8b       	std	Y+19, r24	; 0x13
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <Password_check+0x10e>
    27e2:	88 ec       	ldi	r24, 0xC8	; 200
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	9a 8b       	std	Y+18, r25	; 0x12
    27e8:	89 8b       	std	Y+17, r24	; 0x11
    27ea:	89 89       	ldd	r24, Y+17	; 0x11
    27ec:	9a 89       	ldd	r25, Y+18	; 0x12
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <Password_check+0xfc>
    27f2:	9a 8b       	std	Y+18, r25	; 0x12
    27f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9c 8b       	std	Y+20, r25	; 0x14
    27fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2800:	8b 89       	ldd	r24, Y+19	; 0x13
    2802:	9c 89       	ldd	r25, Y+20	; 0x14
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	69 f7       	brne	.-38     	; 0x27e2 <Password_check+0xf0>
    2808:	14 c0       	rjmp	.+40     	; 0x2832 <Password_check+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	6d 89       	ldd	r22, Y+21	; 0x15
    280c:	7e 89       	ldd	r23, Y+22	; 0x16
    280e:	8f 89       	ldd	r24, Y+23	; 0x17
    2810:	98 8d       	ldd	r25, Y+24	; 0x18
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9c 8b       	std	Y+20, r25	; 0x14
    281c:	8b 8b       	std	Y+19, r24	; 0x13
    281e:	8b 89       	ldd	r24, Y+19	; 0x13
    2820:	9c 89       	ldd	r25, Y+20	; 0x14
    2822:	98 8b       	std	Y+16, r25	; 0x10
    2824:	8f 87       	std	Y+15, r24	; 0x0f
    2826:	8f 85       	ldd	r24, Y+15	; 0x0f
    2828:	98 89       	ldd	r25, Y+16	; 0x10
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <Password_check+0x138>
    282e:	98 8b       	std	Y+16, r25	; 0x10
    2830:	8f 87       	std	Y+15, r24	; 0x0f

		/* Press time */
		_delay_ms(300);

		/* Indicator for reciving the digit */
		LCD_displayCharacter('*');
    2832:	8a e2       	ldi	r24, 0x2A	; 42
    2834:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>
	LCD_displayString((uint8*)"Enter Password:");

	LCD_goToRowColumn(1,0);

	/* Asking to enter password */
	for(i = 0; i < 5; i++){
    2838:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	8d 8f       	std	Y+29, r24	; 0x1d
    283e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2840:	85 30       	cpi	r24, 0x05	; 5
    2842:	08 f4       	brcc	.+2      	; 0x2846 <Password_check+0x154>
    2844:	78 cf       	rjmp	.-272    	; 0x2736 <Password_check+0x44>
		/* Indicator for reciving the digit */
		LCD_displayCharacter('*');
	}

	/* Send Ack to UART to start receiving the password to check it*/
	UART_sendByte(CHECK_PASSWORD);
    2846:	81 e4       	ldi	r24, 0x41	; 65
    2848:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Send Password to Control ECU by UART */
	for(i = 0; i < 5; i++){
    284c:	1d 8e       	std	Y+29, r1	; 0x1d
    284e:	0e c0       	rjmp	.+28     	; 0x286c <Password_check+0x17a>

		/* Send Password Byte by byte to Control ECU by UART*/
		UART_sendByte(PasswordArr[i]);
    2850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	ce 01       	movw	r24, r28
    2858:	4f 96       	adiw	r24, 0x1f	; 31
    285a:	fc 01       	movw	r30, r24
    285c:	e2 0f       	add	r30, r18
    285e:	f3 1f       	adc	r31, r19
    2860:	80 81       	ld	r24, Z
    2862:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Send Ack to UART to start receiving the password to check it*/
	UART_sendByte(CHECK_PASSWORD);

	/* Send Password to Control ECU by UART */
	for(i = 0; i < 5; i++){
    2866:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	8d 8f       	std	Y+29, r24	; 0x1d
    286c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    286e:	85 30       	cpi	r24, 0x05	; 5
    2870:	78 f3       	brcs	.-34     	; 0x2850 <Password_check+0x15e>
		/* Send Password Byte by byte to Control ECU by UART*/
		UART_sendByte(PasswordArr[i]);
	}

	/* Wait till Control ECU finishes calculations */
	while(UART_recieveByte() != M1_READY);
    2872:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    2876:	80 31       	cpi	r24, 0x10	; 16
    2878:	e1 f7       	brne	.-8      	; 0x2872 <Password_check+0x180>

	/* Expected to be CORRECT_PASSWORD or INCORRECT_PASSWORD */
	status = UART_recieveByte();
    287a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    287e:	8e 8f       	std	Y+30, r24	; 0x1e

	/* Password checked by Control ECU and it is correct */
	if(status == CORRECT_PASSWORD){
    2880:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2882:	82 34       	cpi	r24, 0x42	; 66
    2884:	09 f0       	breq	.+2      	; 0x2888 <Password_check+0x196>
    2886:	75 c0       	rjmp	.+234    	; 0x2972 <Password_check+0x280>

		/*
		 * Clear g_theifFlag which is responsible of checking
		 * if password is 3 times consecutively wrong
	     */
		g_theifFlag = 0;
    2888:	10 92 56 01 	sts	0x0156, r1
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	aa ef       	ldi	r26, 0xFA	; 250
    2892:	b3 e4       	ldi	r27, 0x43	; 67
    2894:	8b 87       	std	Y+11, r24	; 0x0b
    2896:	9c 87       	std	Y+12, r25	; 0x0c
    2898:	ad 87       	std	Y+13, r26	; 0x0d
    289a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	6b 85       	ldd	r22, Y+11	; 0x0b
    289e:	7c 85       	ldd	r23, Y+12	; 0x0c
    28a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a ef       	ldi	r20, 0xFA	; 250
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8f 83       	std	Y+7, r24	; 0x07
    28b6:	98 87       	std	Y+8, r25	; 0x08
    28b8:	a9 87       	std	Y+9, r26	; 0x09
    28ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28bc:	6f 81       	ldd	r22, Y+7	; 0x07
    28be:	78 85       	ldd	r23, Y+8	; 0x08
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <Password_check+0x1ec>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9e 83       	std	Y+6, r25	; 0x06
    28da:	8d 83       	std	Y+5, r24	; 0x05
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <Password_check+0x26a>
	else if (__tmp > 65535)
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <Password_check+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	0f c0       	rjmp	.+30     	; 0x293e <Password_check+0x24c>
    2920:	88 ec       	ldi	r24, 0xC8	; 200
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9c 83       	std	Y+4, r25	; 0x04
    2926:	8b 83       	std	Y+3, r24	; 0x03
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <Password_check+0x23a>
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9e 83       	std	Y+6, r25	; 0x06
    293c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	8d 81       	ldd	r24, Y+5	; 0x05
    2940:	9e 81       	ldd	r25, Y+6	; 0x06
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <Password_check+0x22e>
    2946:	33 c0       	rjmp	.+102    	; 0x29ae <Password_check+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	6f 81       	ldd	r22, Y+7	; 0x07
    294a:	78 85       	ldd	r23, Y+8	; 0x08
    294c:	89 85       	ldd	r24, Y+9	; 0x09
    294e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9e 83       	std	Y+6, r25	; 0x06
    295a:	8d 83       	std	Y+5, r24	; 0x05
    295c:	8d 81       	ldd	r24, Y+5	; 0x05
    295e:	9e 81       	ldd	r25, Y+6	; 0x06
    2960:	9a 83       	std	Y+2, r25	; 0x02
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	9a 81       	ldd	r25, Y+2	; 0x02
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <Password_check+0x276>
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	1e c0       	rjmp	.+60     	; 0x29ae <Password_check+0x2bc>
		_delay_ms(500);

	}

	/* Password checked by Control ECU and it is incorrect */
	else if(status == INCORRECT_PASSWORD){
    2972:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2974:	83 34       	cpi	r24, 0x43	; 67
    2976:	d9 f4       	brne	.+54     	; 0x29ae <Password_check+0x2bc>
		 * You Still Have 2 times
		 * of putting the password correctly
		 */

		/* Increament Calling counter */
		Flag_of_Calling++;
    2978:	80 91 59 01 	lds	r24, 0x0159
    297c:	8f 5f       	subi	r24, 0xFF	; 255
    297e:	80 93 59 01 	sts	0x0159, r24
		/*
		 * Incorrect Password!!
		 * You Still Have 2 times
		 * of putting the password correctly
		 */
		if(Flag_of_Calling <= 2){
    2982:	80 91 59 01 	lds	r24, 0x0159
    2986:	83 30       	cpi	r24, 0x03	; 3
    2988:	18 f4       	brcc	.+6      	; 0x2990 <Password_check+0x29e>
			 * Not the best practice because if user put the password
			 * wrong a lot of time, all this context switching
			 * may goes into stackoverflow.
			 * So, i should think about another way
			 */
			Password_check();
    298a:	0e 94 79 13 	call	0x26f2	; 0x26f2 <Password_check>
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <Password_check+0x2bc>
		 * Alarm (Buzzer) will turn on for 1 minute
		 */
		else{

			/* Clearing the recalling flag */
			Flag_of_Calling = 0;
    2990:	10 92 59 01 	sts	0x0159, r1


			/* Waiting till Control ECU ACK Which means that it finished its computation */
			while(UART_recieveByte() != M1_READY);
    2994:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    2998:	80 31       	cpi	r24, 0x10	; 16
    299a:	e1 f7       	brne	.-8      	; 0x2994 <Password_check+0x2a2>

			/*
			 * Get a response from Control ECU to check if it knows that
			 * there is a theif on the system or not
			*/
			if(UART_recieveByte() == (PASSWORD_WRONG_3_TIMES)){
    299c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    29a0:	84 34       	cpi	r24, 0x44	; 68
    29a2:	29 f4       	brne	.+10     	; 0x29ae <Password_check+0x2bc>

			/* Set the theif flag to 1*/
			g_theifFlag = 1;
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	80 93 56 01 	sts	0x0156, r24

			/* Theif Function */
			Theif_onTheSystem();
    29aa:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <Theif_onTheSystem>

			}
		}
	}

}
    29ae:	a3 96       	adiw	r28, 0x23	; 35
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	08 95       	ret

000029c4 <Theif_onTheSystem>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Theif_onTheSystem(void){
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	0f 92       	push	r0
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
	 * You entered the password 3 times consecutively wrong
	 * Alarm will turn on for 1 min
	 */

	/* Variable used to save global counter flag in ISR */
	uint8_t save_globalNow = 0;
    29ce:	19 82       	std	Y+1, r1	; 0x01
	LCD_clearScreen();
    29d0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Theif!!");
    29d4:	8c e3       	ldi	r24, 0x3C	; 60
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

	/* Getting the value of the Counter flag now */
	save_globalNow = g_timer1_1MinFlag;
    29dc:	80 91 55 01 	lds	r24, 0x0155
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	11 c0       	rjmp	.+34     	; 0x2a06 <Theif_onTheSystem+0x42>
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_1MinFlag < (save_globalNow + 60)){

		LCD_goToRowColumn(1,0);
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_goToRowColumn>

		/* Showing the counter value on the LCD */
		LCD_intgerToString((g_timer1_1MinFlag - save_globalNow));
    29ec:	80 91 55 01 	lds	r24, 0x0155
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	88 2f       	mov	r24, r24
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	a9 01       	movw	r20, r18
    29fc:	48 1b       	sub	r20, r24
    29fe:	59 0b       	sbc	r21, r25
    2a00:	ca 01       	movw	r24, r20
    2a02:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_intgerToString>
	 * delay for 10 Seconds to close the door
	 * Here i check for the global counter flag value
	 * if less than the first value of it before a
	 * 1 second from this time + 10 seconds
	*/
	while(g_timer1_1MinFlag < (save_globalNow + 60)){
    2a06:	80 91 55 01 	lds	r24, 0x0155
    2a0a:	28 2f       	mov	r18, r24
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	cc 96       	adiw	r24, 0x3c	; 60
    2a16:	28 17       	cp	r18, r24
    2a18:	39 07       	cpc	r19, r25
    2a1a:	24 f3       	brlt	.-56     	; 0x29e4 <Theif_onTheSystem+0x20>

		/* Showing the counter value on the LCD */
		LCD_intgerToString((g_timer1_1MinFlag - save_globalNow));
	}

}
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <New_passwordCorrectCode>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void New_passwordCorrectCode(uint8* arr){
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	6f 97       	sbiw	r28, 0x1f	; 31
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	9f 8f       	std	Y+31, r25	; 0x1f
    2a3a:	8e 8f       	std	Y+30, r24	; 0x1e

	uint8 i = 0;
    2a3c:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Clear the screen */
	LCD_clearScreen();
    2a3e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

	LCD_displayString((uint8*)"Correct!!");
    2a42:	82 e9       	ldi	r24, 0x92	; 146
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	aa e7       	ldi	r26, 0x7A	; 122
    2a50:	b4 e4       	ldi	r27, 0x44	; 68
    2a52:	89 8f       	std	Y+25, r24	; 0x19
    2a54:	9a 8f       	std	Y+26, r25	; 0x1a
    2a56:	ab 8f       	std	Y+27, r26	; 0x1b
    2a58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	8d 8b       	std	Y+21, r24	; 0x15
    2a74:	9e 8b       	std	Y+22, r25	; 0x16
    2a76:	af 8b       	std	Y+23, r26	; 0x17
    2a78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a80:	98 8d       	ldd	r25, Y+24	; 0x18
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <New_passwordCorrectCode+0x78>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9c 8b       	std	Y+20, r25	; 0x14
    2a98:	8b 8b       	std	Y+19, r24	; 0x13
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <New_passwordCorrectCode+0xf6>
	else if (__tmp > 65535)
    2a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <New_passwordCorrectCode+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ab8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9c 8b       	std	Y+20, r25	; 0x14
    2ada:	8b 8b       	std	Y+19, r24	; 0x13
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <New_passwordCorrectCode+0xd8>
    2ade:	88 ec       	ldi	r24, 0xC8	; 200
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9a 8b       	std	Y+18, r25	; 0x12
    2ae4:	89 8b       	std	Y+17, r24	; 0x11
    2ae6:	89 89       	ldd	r24, Y+17	; 0x11
    2ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <New_passwordCorrectCode+0xc6>
    2aee:	9a 8b       	std	Y+18, r25	; 0x12
    2af0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8b 89       	ldd	r24, Y+19	; 0x13
    2af4:	9c 89       	ldd	r25, Y+20	; 0x14
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	9c 8b       	std	Y+20, r25	; 0x14
    2afa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8b 89       	ldd	r24, Y+19	; 0x13
    2afe:	9c 89       	ldd	r25, Y+20	; 0x14
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <New_passwordCorrectCode+0xba>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <New_passwordCorrectCode+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9c 8b       	std	Y+20, r25	; 0x14
    2b18:	8b 8b       	std	Y+19, r24	; 0x13
    2b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1e:	98 8b       	std	Y+16, r25	; 0x10
    2b20:	8f 87       	std	Y+15, r24	; 0x0f
    2b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b24:	98 89       	ldd	r25, Y+16	; 0x10
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <New_passwordCorrectCode+0x102>
    2b2a:	98 8b       	std	Y+16, r25	; 0x10
    2b2c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1000);

	/* Send Ack to UART to start receiving the new password */
	UART_sendByte(NEW_PASSWORD_TO_BE_SAVED);
    2b2e:	81 e2       	ldi	r24, 0x21	; 33
    2b30:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Send Password to Control ECU by UART */
	for(i = 0; i < 5; i++){
    2b34:	1d 8e       	std	Y+29, r1	; 0x1d
    2b36:	0e c0       	rjmp	.+28     	; 0x2b54 <New_passwordCorrectCode+0x130>

		/* Send Password Byte by byte to Control ECU by UART*/
		UART_sendByte(arr[i]);
    2b38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b42:	fc 01       	movw	r30, r24
    2b44:	e2 0f       	add	r30, r18
    2b46:	f3 1f       	adc	r31, r19
    2b48:	80 81       	ld	r24, Z
    2b4a:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>

	/* Send Ack to UART to start receiving the new password */
	UART_sendByte(NEW_PASSWORD_TO_BE_SAVED);

	/* Send Password to Control ECU by UART */
	for(i = 0; i < 5; i++){
    2b4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b50:	8f 5f       	subi	r24, 0xFF	; 255
    2b52:	8d 8f       	std	Y+29, r24	; 0x1d
    2b54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b56:	85 30       	cpi	r24, 0x05	; 5
    2b58:	78 f3       	brcs	.-34     	; 0x2b38 <New_passwordCorrectCode+0x114>
		/* Send Password Byte by byte to Control ECU by UART*/
		UART_sendByte(arr[i]);
	}

	/* Waiting for Control ECU to finish computation on passwords */
	while(UART_recieveByte() != M1_READY );
    2b5a:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    2b5e:	80 31       	cpi	r24, 0x10	; 16
    2b60:	e1 f7       	brne	.-8      	; 0x2b5a <New_passwordCorrectCode+0x136>

	/* Check if password saved successfully on eeprom or not */
	if(UART_recieveByte() == NEW_PASSWORD_SAVED_SUCCESSFULLY){
    2b62:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    2b66:	82 32       	cpi	r24, 0x22	; 34
    2b68:	09 f0       	breq	.+2      	; 0x2b6c <New_passwordCorrectCode+0x148>
    2b6a:	80 c0       	rjmp	.+256    	; 0x2c6c <New_passwordCorrectCode+0x248>

		/* Password Saved Successfully */
		LCD_clearScreen();
    2b6c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

		LCD_displayString((uint8*)"Password Saved!");
    2b70:	8c e9       	ldi	r24, 0x9C	; 156
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	aa ef       	ldi	r26, 0xFA	; 250
    2b7e:	b3 e4       	ldi	r27, 0x43	; 67
    2b80:	8b 87       	std	Y+11, r24	; 0x0b
    2b82:	9c 87       	std	Y+12, r25	; 0x0c
    2b84:	ad 87       	std	Y+13, r26	; 0x0d
    2b86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	4a ef       	ldi	r20, 0xFA	; 250
    2b96:	54 e4       	ldi	r21, 0x44	; 68
    2b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	8f 83       	std	Y+7, r24	; 0x07
    2ba2:	98 87       	std	Y+8, r25	; 0x08
    2ba4:	a9 87       	std	Y+9, r26	; 0x09
    2ba6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    2baa:	78 85       	ldd	r23, Y+8	; 0x08
    2bac:	89 85       	ldd	r24, Y+9	; 0x09
    2bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bbc:	88 23       	and	r24, r24
    2bbe:	2c f4       	brge	.+10     	; 0x2bca <New_passwordCorrectCode+0x1a6>
		__ticks = 1;
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	3f c0       	rjmp	.+126    	; 0x2c48 <New_passwordCorrectCode+0x224>
	else if (__tmp > 65535)
    2bca:	6f 81       	ldd	r22, Y+7	; 0x07
    2bcc:	78 85       	ldd	r23, Y+8	; 0x08
    2bce:	89 85       	ldd	r24, Y+9	; 0x09
    2bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	3f ef       	ldi	r19, 0xFF	; 255
    2bd6:	4f e7       	ldi	r20, 0x7F	; 127
    2bd8:	57 e4       	ldi	r21, 0x47	; 71
    2bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bde:	18 16       	cp	r1, r24
    2be0:	4c f5       	brge	.+82     	; 0x2c34 <New_passwordCorrectCode+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e2       	ldi	r20, 0x20	; 32
    2bf0:	51 e4       	ldi	r21, 0x41	; 65
    2bf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	bc 01       	movw	r22, r24
    2bfc:	cd 01       	movw	r24, r26
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	0f c0       	rjmp	.+30     	; 0x2c2a <New_passwordCorrectCode+0x206>
    2c0c:	88 ec       	ldi	r24, 0xC8	; 200
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9c 83       	std	Y+4, r25	; 0x04
    2c12:	8b 83       	std	Y+3, r24	; 0x03
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <New_passwordCorrectCode+0x1f4>
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c20:	8d 81       	ldd	r24, Y+5	; 0x05
    2c22:	9e 81       	ldd	r25, Y+6	; 0x06
    2c24:	01 97       	sbiw	r24, 0x01	; 1
    2c26:	9e 83       	std	Y+6, r25	; 0x06
    2c28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2e:	00 97       	sbiw	r24, 0x00	; 0
    2c30:	69 f7       	brne	.-38     	; 0x2c0c <New_passwordCorrectCode+0x1e8>
    2c32:	14 c0       	rjmp	.+40     	; 0x2c5c <New_passwordCorrectCode+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c34:	6f 81       	ldd	r22, Y+7	; 0x07
    2c36:	78 85       	ldd	r23, Y+8	; 0x08
    2c38:	89 85       	ldd	r24, Y+9	; 0x09
    2c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4c:	9a 83       	std	Y+2, r25	; 0x02
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	9a 81       	ldd	r25, Y+2	; 0x02
    2c54:	01 97       	sbiw	r24, 0x01	; 1
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <New_passwordCorrectCode+0x230>
    2c58:	9a 83       	std	Y+2, r25	; 0x02
    2c5a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);

		LCD_displayStringRowColumn(1,0, "hELLO");
    2c5c:	24 e4       	ldi	r18, 0x44	; 68
    2c5e:	31 e0       	ldi	r19, 0x01	; 1
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	a9 01       	movw	r20, r18
    2c66:	0e 94 21 0a 	call	0x1442	; 0x1442 <LCD_displayStringRowColumn>
    2c6a:	06 c0       	rjmp	.+12     	; 0x2c78 <New_passwordCorrectCode+0x254>
		return;
	}

	else{
		/* Password Not Saved! */
		LCD_clearScreen();
    2c6c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LCD_clearScreen>

		LCD_displayString((uint8*)"Password NOT");
    2c70:	8c ea       	ldi	r24, 0xAC	; 172
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 b6 09 	call	0x136c	; 0x136c <LCD_displayString>

	}
}
    2c78:	6f 96       	adiw	r28, 0x1f	; 31
    2c7a:	0f b6       	in	r0, 0x3f	; 63
    2c7c:	f8 94       	cli
    2c7e:	de bf       	out	0x3e, r29	; 62
    2c80:	0f be       	out	0x3f, r0	; 63
    2c82:	cd bf       	out	0x3d, r28	; 61
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <Timer1_INT>:

 [in/out]			None

 [Returns]:			None
 **********************************************************************************/
void Timer1_INT(void){
    2c8a:	df 93       	push	r29
    2c8c:	cf 93       	push	r28
    2c8e:	cd b7       	in	r28, 0x3d	; 61
    2c90:	de b7       	in	r29, 0x3e	; 62

	/* To count seconds increament till 10 */
	g_timer1_10SecFlag++;
    2c92:	80 91 54 01 	lds	r24, 0x0154
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	80 93 54 01 	sts	0x0154, r24

	/* Counter to count 1 Minute */
	g_timer1_1MinFlag++;
    2c9c:	80 91 55 01 	lds	r24, 0x0155
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	80 93 55 01 	sts	0x0155, r24

	PORTD ^= (1 << 7);
    2ca6:	a2 e3       	ldi	r26, 0x32	; 50
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e2 e3       	ldi	r30, 0x32	; 50
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	90 81       	ld	r25, Z
    2cb0:	80 e8       	ldi	r24, 0x80	; 128
    2cb2:	89 27       	eor	r24, r25
    2cb4:	8c 93       	st	X, r24

}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <__vector_9>:
static volatile void (*g_callBackPtrTimer2)(void) = NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    2cbc:	1f 92       	push	r1
    2cbe:	0f 92       	push	r0
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	0f 92       	push	r0
    2cc4:	11 24       	eor	r1, r1
    2cc6:	2f 93       	push	r18
    2cc8:	3f 93       	push	r19
    2cca:	4f 93       	push	r20
    2ccc:	5f 93       	push	r21
    2cce:	6f 93       	push	r22
    2cd0:	7f 93       	push	r23
    2cd2:	8f 93       	push	r24
    2cd4:	9f 93       	push	r25
    2cd6:	af 93       	push	r26
    2cd8:	bf 93       	push	r27
    2cda:	ef 93       	push	r30
    2cdc:	ff 93       	push	r31
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer0 != NULL_PTR){
    2ce6:	80 91 5a 01 	lds	r24, 0x015A
    2cea:	90 91 5b 01 	lds	r25, 0x015B
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	29 f0       	breq	.+10     	; 0x2cfc <__vector_9+0x40>

		 /* Call the Call Back function for Timer0 Overflow mode */
		(*g_callBackPtrTimer0)();
    2cf2:	e0 91 5a 01 	lds	r30, 0x015A
    2cf6:	f0 91 5b 01 	lds	r31, 0x015B
    2cfa:	09 95       	icall

	}
}
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	ff 91       	pop	r31
    2d02:	ef 91       	pop	r30
    2d04:	bf 91       	pop	r27
    2d06:	af 91       	pop	r26
    2d08:	9f 91       	pop	r25
    2d0a:	8f 91       	pop	r24
    2d0c:	7f 91       	pop	r23
    2d0e:	6f 91       	pop	r22
    2d10:	5f 91       	pop	r21
    2d12:	4f 91       	pop	r20
    2d14:	3f 91       	pop	r19
    2d16:	2f 91       	pop	r18
    2d18:	0f 90       	pop	r0
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	0f 90       	pop	r0
    2d1e:	1f 90       	pop	r1
    2d20:	18 95       	reti

00002d22 <__vector_19>:

ISR(TIMER0_COMP_vect){
    2d22:	1f 92       	push	r1
    2d24:	0f 92       	push	r0
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	0f 92       	push	r0
    2d2a:	11 24       	eor	r1, r1
    2d2c:	2f 93       	push	r18
    2d2e:	3f 93       	push	r19
    2d30:	4f 93       	push	r20
    2d32:	5f 93       	push	r21
    2d34:	6f 93       	push	r22
    2d36:	7f 93       	push	r23
    2d38:	8f 93       	push	r24
    2d3a:	9f 93       	push	r25
    2d3c:	af 93       	push	r26
    2d3e:	bf 93       	push	r27
    2d40:	ef 93       	push	r30
    2d42:	ff 93       	push	r31
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer0 != NULL_PTR){
    2d4c:	80 91 5a 01 	lds	r24, 0x015A
    2d50:	90 91 5b 01 	lds	r25, 0x015B
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	29 f0       	breq	.+10     	; 0x2d62 <__vector_19+0x40>

		 /* Call the Call Back function for Timer0 CTC mode */
		(*g_callBackPtrTimer0)();
    2d58:	e0 91 5a 01 	lds	r30, 0x015A
    2d5c:	f0 91 5b 01 	lds	r31, 0x015B
    2d60:	09 95       	icall
	}
}
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	ff 91       	pop	r31
    2d68:	ef 91       	pop	r30
    2d6a:	bf 91       	pop	r27
    2d6c:	af 91       	pop	r26
    2d6e:	9f 91       	pop	r25
    2d70:	8f 91       	pop	r24
    2d72:	7f 91       	pop	r23
    2d74:	6f 91       	pop	r22
    2d76:	5f 91       	pop	r21
    2d78:	4f 91       	pop	r20
    2d7a:	3f 91       	pop	r19
    2d7c:	2f 91       	pop	r18
    2d7e:	0f 90       	pop	r0
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	0f 90       	pop	r0
    2d84:	1f 90       	pop	r1
    2d86:	18 95       	reti

00002d88 <__vector_8>:

ISR(TIMER1_OVF_vect){
    2d88:	1f 92       	push	r1
    2d8a:	0f 92       	push	r0
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	0f 92       	push	r0
    2d90:	11 24       	eor	r1, r1
    2d92:	2f 93       	push	r18
    2d94:	3f 93       	push	r19
    2d96:	4f 93       	push	r20
    2d98:	5f 93       	push	r21
    2d9a:	6f 93       	push	r22
    2d9c:	7f 93       	push	r23
    2d9e:	8f 93       	push	r24
    2da0:	9f 93       	push	r25
    2da2:	af 93       	push	r26
    2da4:	bf 93       	push	r27
    2da6:	ef 93       	push	r30
    2da8:	ff 93       	push	r31
    2daa:	df 93       	push	r29
    2dac:	cf 93       	push	r28
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer1 != NULL_PTR){
    2db2:	80 91 5c 01 	lds	r24, 0x015C
    2db6:	90 91 5d 01 	lds	r25, 0x015D
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	29 f0       	breq	.+10     	; 0x2dc8 <__vector_8+0x40>

		 /* Call the Call Back function for Timer1 Overflow mode */
		(*g_callBackPtrTimer1)();
    2dbe:	e0 91 5c 01 	lds	r30, 0x015C
    2dc2:	f0 91 5d 01 	lds	r31, 0x015D
    2dc6:	09 95       	icall
	}
}
    2dc8:	cf 91       	pop	r28
    2dca:	df 91       	pop	r29
    2dcc:	ff 91       	pop	r31
    2dce:	ef 91       	pop	r30
    2dd0:	bf 91       	pop	r27
    2dd2:	af 91       	pop	r26
    2dd4:	9f 91       	pop	r25
    2dd6:	8f 91       	pop	r24
    2dd8:	7f 91       	pop	r23
    2dda:	6f 91       	pop	r22
    2ddc:	5f 91       	pop	r21
    2dde:	4f 91       	pop	r20
    2de0:	3f 91       	pop	r19
    2de2:	2f 91       	pop	r18
    2de4:	0f 90       	pop	r0
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	0f 90       	pop	r0
    2dea:	1f 90       	pop	r1
    2dec:	18 95       	reti

00002dee <__vector_6>:

ISR(TIMER1_COMPA_vect){
    2dee:	1f 92       	push	r1
    2df0:	0f 92       	push	r0
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	0f 92       	push	r0
    2df6:	11 24       	eor	r1, r1
    2df8:	2f 93       	push	r18
    2dfa:	3f 93       	push	r19
    2dfc:	4f 93       	push	r20
    2dfe:	5f 93       	push	r21
    2e00:	6f 93       	push	r22
    2e02:	7f 93       	push	r23
    2e04:	8f 93       	push	r24
    2e06:	9f 93       	push	r25
    2e08:	af 93       	push	r26
    2e0a:	bf 93       	push	r27
    2e0c:	ef 93       	push	r30
    2e0e:	ff 93       	push	r31
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
	//PORTD ^= (1<<7);
	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer1 != NULL_PTR){
    2e18:	80 91 5c 01 	lds	r24, 0x015C
    2e1c:	90 91 5d 01 	lds	r25, 0x015D
    2e20:	00 97       	sbiw	r24, 0x00	; 0
    2e22:	29 f0       	breq	.+10     	; 0x2e2e <__vector_6+0x40>

		 /* Call the Call Back function for Timer1 CTC Channel A mode */
		(*g_callBackPtrTimer1)();
    2e24:	e0 91 5c 01 	lds	r30, 0x015C
    2e28:	f0 91 5d 01 	lds	r31, 0x015D
    2e2c:	09 95       	icall
	}
}
    2e2e:	cf 91       	pop	r28
    2e30:	df 91       	pop	r29
    2e32:	ff 91       	pop	r31
    2e34:	ef 91       	pop	r30
    2e36:	bf 91       	pop	r27
    2e38:	af 91       	pop	r26
    2e3a:	9f 91       	pop	r25
    2e3c:	8f 91       	pop	r24
    2e3e:	7f 91       	pop	r23
    2e40:	6f 91       	pop	r22
    2e42:	5f 91       	pop	r21
    2e44:	4f 91       	pop	r20
    2e46:	3f 91       	pop	r19
    2e48:	2f 91       	pop	r18
    2e4a:	0f 90       	pop	r0
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	0f 90       	pop	r0
    2e50:	1f 90       	pop	r1
    2e52:	18 95       	reti

00002e54 <__vector_7>:

ISR(TIMER1_COMPB_vect){
    2e54:	1f 92       	push	r1
    2e56:	0f 92       	push	r0
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	0f 92       	push	r0
    2e5c:	11 24       	eor	r1, r1
    2e5e:	2f 93       	push	r18
    2e60:	3f 93       	push	r19
    2e62:	4f 93       	push	r20
    2e64:	5f 93       	push	r21
    2e66:	6f 93       	push	r22
    2e68:	7f 93       	push	r23
    2e6a:	8f 93       	push	r24
    2e6c:	9f 93       	push	r25
    2e6e:	af 93       	push	r26
    2e70:	bf 93       	push	r27
    2e72:	ef 93       	push	r30
    2e74:	ff 93       	push	r31
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	cd b7       	in	r28, 0x3d	; 61
    2e7c:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer1 != NULL_PTR){
    2e7e:	80 91 5c 01 	lds	r24, 0x015C
    2e82:	90 91 5d 01 	lds	r25, 0x015D
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	29 f0       	breq	.+10     	; 0x2e94 <__vector_7+0x40>

		 /* Call the Call Back function for Timer1 CTC Channel B mode */
		(*g_callBackPtrTimer1)();
    2e8a:	e0 91 5c 01 	lds	r30, 0x015C
    2e8e:	f0 91 5d 01 	lds	r31, 0x015D
    2e92:	09 95       	icall
	}
}
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	ff 91       	pop	r31
    2e9a:	ef 91       	pop	r30
    2e9c:	bf 91       	pop	r27
    2e9e:	af 91       	pop	r26
    2ea0:	9f 91       	pop	r25
    2ea2:	8f 91       	pop	r24
    2ea4:	7f 91       	pop	r23
    2ea6:	6f 91       	pop	r22
    2ea8:	5f 91       	pop	r21
    2eaa:	4f 91       	pop	r20
    2eac:	3f 91       	pop	r19
    2eae:	2f 91       	pop	r18
    2eb0:	0f 90       	pop	r0
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	0f 90       	pop	r0
    2eb6:	1f 90       	pop	r1
    2eb8:	18 95       	reti

00002eba <__vector_4>:

ISR(TIMER2_OVF_vect){
    2eba:	1f 92       	push	r1
    2ebc:	0f 92       	push	r0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	0f 92       	push	r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	2f 93       	push	r18
    2ec6:	3f 93       	push	r19
    2ec8:	4f 93       	push	r20
    2eca:	5f 93       	push	r21
    2ecc:	6f 93       	push	r22
    2ece:	7f 93       	push	r23
    2ed0:	8f 93       	push	r24
    2ed2:	9f 93       	push	r25
    2ed4:	af 93       	push	r26
    2ed6:	bf 93       	push	r27
    2ed8:	ef 93       	push	r30
    2eda:	ff 93       	push	r31
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer2 != NULL_PTR){
    2ee4:	80 91 5e 01 	lds	r24, 0x015E
    2ee8:	90 91 5f 01 	lds	r25, 0x015F
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	29 f0       	breq	.+10     	; 0x2efa <__vector_4+0x40>

		 /* Call the Call Back function for Timer2 Overflow mode */
		(*g_callBackPtrTimer2)();
    2ef0:	e0 91 5e 01 	lds	r30, 0x015E
    2ef4:	f0 91 5f 01 	lds	r31, 0x015F
    2ef8:	09 95       	icall
	}
}
    2efa:	cf 91       	pop	r28
    2efc:	df 91       	pop	r29
    2efe:	ff 91       	pop	r31
    2f00:	ef 91       	pop	r30
    2f02:	bf 91       	pop	r27
    2f04:	af 91       	pop	r26
    2f06:	9f 91       	pop	r25
    2f08:	8f 91       	pop	r24
    2f0a:	7f 91       	pop	r23
    2f0c:	6f 91       	pop	r22
    2f0e:	5f 91       	pop	r21
    2f10:	4f 91       	pop	r20
    2f12:	3f 91       	pop	r19
    2f14:	2f 91       	pop	r18
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	0f 90       	pop	r0
    2f1c:	1f 90       	pop	r1
    2f1e:	18 95       	reti

00002f20 <__vector_3>:

ISR(TIMER2_COMP_vect){
    2f20:	1f 92       	push	r1
    2f22:	0f 92       	push	r0
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	0f 92       	push	r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	2f 93       	push	r18
    2f2c:	3f 93       	push	r19
    2f2e:	4f 93       	push	r20
    2f30:	5f 93       	push	r21
    2f32:	6f 93       	push	r22
    2f34:	7f 93       	push	r23
    2f36:	8f 93       	push	r24
    2f38:	9f 93       	push	r25
    2f3a:	af 93       	push	r26
    2f3c:	bf 93       	push	r27
    2f3e:	ef 93       	push	r30
    2f40:	ff 93       	push	r31
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrTimer2 != NULL_PTR){
    2f4a:	80 91 5e 01 	lds	r24, 0x015E
    2f4e:	90 91 5f 01 	lds	r25, 0x015F
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	29 f0       	breq	.+10     	; 0x2f60 <__vector_3+0x40>

		 /* Call the Call Back function for Timer2 CTC mode */
		(*g_callBackPtrTimer2)();
    2f56:	e0 91 5e 01 	lds	r30, 0x015E
    2f5a:	f0 91 5f 01 	lds	r31, 0x015F
    2f5e:	09 95       	icall
	}
}
    2f60:	cf 91       	pop	r28
    2f62:	df 91       	pop	r29
    2f64:	ff 91       	pop	r31
    2f66:	ef 91       	pop	r30
    2f68:	bf 91       	pop	r27
    2f6a:	af 91       	pop	r26
    2f6c:	9f 91       	pop	r25
    2f6e:	8f 91       	pop	r24
    2f70:	7f 91       	pop	r23
    2f72:	6f 91       	pop	r22
    2f74:	5f 91       	pop	r21
    2f76:	4f 91       	pop	r20
    2f78:	3f 91       	pop	r19
    2f7a:	2f 91       	pop	r18
    2f7c:	0f 90       	pop	r0
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	0f 90       	pop	r0
    2f82:	1f 90       	pop	r1
    2f84:	18 95       	reti

00002f86 <Timer_init>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer_init(const Timer_ConfigType * config_Ptr){
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	62 97       	sbiw	r28, 0x12	; 18
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01

	switch(config_Ptr -> TimerID){
    2f9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa2:	80 81       	ld	r24, Z
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	3a 8b       	std	Y+18, r19	; 0x12
    2faa:	29 8b       	std	Y+17, r18	; 0x11
    2fac:	89 89       	ldd	r24, Y+17	; 0x11
    2fae:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	91 05       	cpc	r25, r1
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <Timer_init+0x32>
    2fb6:	8c c0       	rjmp	.+280    	; 0x30d0 <Timer_init+0x14a>
    2fb8:	29 89       	ldd	r18, Y+17	; 0x11
    2fba:	3a 89       	ldd	r19, Y+18	; 0x12
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <Timer_init+0x3e>
    2fc2:	55 c1       	rjmp	.+682    	; 0x326e <Timer_init+0x2e8>
    2fc4:	89 89       	ldd	r24, Y+17	; 0x11
    2fc6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	09 f0       	breq	.+2      	; 0x2fce <Timer_init+0x48>
    2fcc:	c9 c1       	rjmp	.+914    	; 0x3360 <Timer_init+0x3da>

	case TIMER_ID_0:

		/* Clear Registers before do anything */
		TCCR0 &= 0x00;
    2fce:	e3 e5       	ldi	r30, 0x53	; 83
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	90 81       	ld	r25, Z
    2fd4:	e3 e5       	ldi	r30, 0x53	; 83
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	10 82       	st	Z, r1
		TCNT0 &= 0x00;
    2fda:	e2 e5       	ldi	r30, 0x52	; 82
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	20 81       	ld	r18, Z
    2fe0:	e2 e5       	ldi	r30, 0x52	; 82
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	10 82       	st	Z, r1
		OCR0  &= 0x00;
    2fe6:	ec e5       	ldi	r30, 0x5C	; 92
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	30 81       	ld	r19, Z
    2fec:	ec e5       	ldi	r30, 0x5C	; 92
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	10 82       	st	Z, r1
		/*
		 * Set Initial Value to count from it
		 * (8 bit Timer so & with 0xFF to ensure
		 * start value does not exceed 255)
		*/
		TCNT0 = ((config_Ptr -> InitialValue) & 0xFF);
    2ff2:	a2 e5       	ldi	r26, 0x52	; 82
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffa:	85 81       	ldd	r24, Z+5	; 0x05
    2ffc:	96 81       	ldd	r25, Z+6	; 0x06
    2ffe:	8c 93       	st	X, r24
		/*
		 * Set Compare Match Value
		 * (8 bit Timer so & with 0xFF to ensure
		 * Compare match value does not exceed 255)
		*/
		OCR0  = ((config_Ptr -> CompareValue) & 0xFF);
    3000:	ac e5       	ldi	r26, 0x5C	; 92
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e9 81       	ldd	r30, Y+1	; 0x01
    3006:	fa 81       	ldd	r31, Y+2	; 0x02
    3008:	87 81       	ldd	r24, Z+7	; 0x07
    300a:	90 85       	ldd	r25, Z+8	; 0x08
    300c:	8c 93       	st	X, r24

		/* Choose Non PWM Mode */
		TCCR0 = (1 << FOC0);
    300e:	e3 e5       	ldi	r30, 0x53	; 83
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 e8       	ldi	r24, 0x80	; 128
    3014:	80 83       	st	Z, r24

		/* Check if O/P needed for Output compare match */
		/* Check for OC0 */
		if((config_Ptr -> OutputPin) == OC0_PB3){
    3016:	e9 81       	ldd	r30, Y+1	; 0x01
    3018:	fa 81       	ldd	r31, Y+2	; 0x02
    301a:	83 81       	ldd	r24, Z+3	; 0x03
    301c:	83 30       	cpi	r24, 0x03	; 3
    301e:	39 f4       	brne	.+14     	; 0x302e <Timer_init+0xa8>

			DDRB |= (1 << OC0_PB3);
    3020:	a7 e3       	ldi	r26, 0x37	; 55
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e7 e3       	ldi	r30, 0x37	; 55
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	88 60       	ori	r24, 0x08	; 8
    302c:	8c 93       	st	X, r24
		}

		/* Check which timer mode is chosen */
		if( (config_Ptr -> TimerMode ) == NORMAL_MODE) {
    302e:	e9 81       	ldd	r30, Y+1	; 0x01
    3030:	fa 81       	ldd	r31, Y+2	; 0x02
    3032:	81 81       	ldd	r24, Z+1	; 0x01
    3034:	88 23       	and	r24, r24
    3036:	41 f4       	brne	.+16     	; 0x3048 <Timer_init+0xc2>

		/*	 Enable Normal Mode Timer Interrupt */
			TIMSK |= (1 << TOIE0);
    3038:	a9 e5       	ldi	r26, 0x59	; 89
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	e9 e5       	ldi	r30, 0x59	; 89
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	81 60       	ori	r24, 0x01	; 1
    3044:	8c 93       	st	X, r24
    3046:	0c c0       	rjmp	.+24     	; 0x3060 <Timer_init+0xda>
		}
		else if ( (config_Ptr -> TimerMode) == CTC_MODE){
    3048:	e9 81       	ldd	r30, Y+1	; 0x01
    304a:	fa 81       	ldd	r31, Y+2	; 0x02
    304c:	81 81       	ldd	r24, Z+1	; 0x01
    304e:	81 30       	cpi	r24, 0x01	; 1
    3050:	39 f4       	brne	.+14     	; 0x3060 <Timer_init+0xda>

		/*	 Enable CTC Mode Timer Interrupt */
			TIMSK |= (1 << OCIE0);
    3052:	a9 e5       	ldi	r26, 0x59	; 89
    3054:	b0 e0       	ldi	r27, 0x00	; 0
    3056:	e9 e5       	ldi	r30, 0x59	; 89
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	82 60       	ori	r24, 0x02	; 2
    305e:	8c 93       	st	X, r24
		}

		/* Choose Timer Mode (Normal or CTC Mode) */
		TCCR0 = ( (TCCR0 & ~(0x48) ) | ( ( (config_Ptr -> TimerMode) << WGM00) ) );
    3060:	a3 e5       	ldi	r26, 0x53	; 83
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e3 e5       	ldi	r30, 0x53	; 83
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	28 2f       	mov	r18, r24
    306c:	27 7b       	andi	r18, 0xB7	; 183
    306e:	e9 81       	ldd	r30, Y+1	; 0x01
    3070:	fa 81       	ldd	r31, Y+2	; 0x02
    3072:	81 81       	ldd	r24, Z+1	; 0x01
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	00 24       	eor	r0, r0
    307a:	96 95       	lsr	r25
    307c:	87 95       	ror	r24
    307e:	07 94       	ror	r0
    3080:	96 95       	lsr	r25
    3082:	87 95       	ror	r24
    3084:	07 94       	ror	r0
    3086:	98 2f       	mov	r25, r24
    3088:	80 2d       	mov	r24, r0
    308a:	82 2b       	or	r24, r18
    308c:	8c 93       	st	X, r24


		/* Choose which operation should be done when compare match occures */
		TCCR0 = ( (TCCR0 & 0xCF) | ( (config_Ptr -> CompareMatchMode) << COM00) );
    308e:	a3 e5       	ldi	r26, 0x53	; 83
    3090:	b0 e0       	ldi	r27, 0x00	; 0
    3092:	e3 e5       	ldi	r30, 0x53	; 83
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	28 2f       	mov	r18, r24
    309a:	2f 7c       	andi	r18, 0xCF	; 207
    309c:	e9 81       	ldd	r30, Y+1	; 0x01
    309e:	fa 81       	ldd	r31, Y+2	; 0x02
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	88 2f       	mov	r24, r24
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	82 95       	swap	r24
    30a8:	92 95       	swap	r25
    30aa:	90 7f       	andi	r25, 0xF0	; 240
    30ac:	98 27       	eor	r25, r24
    30ae:	80 7f       	andi	r24, 0xF0	; 240
    30b0:	98 27       	eor	r25, r24
    30b2:	82 2b       	or	r24, r18
    30b4:	8c 93       	st	X, r24


		/* Select Timer Operating Clock */
		TCCR0 = ( (TCCR0 & 0xF8) | (config_Ptr -> Prescaler) );
    30b6:	a3 e5       	ldi	r26, 0x53	; 83
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	e3 e5       	ldi	r30, 0x53	; 83
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	80 81       	ld	r24, Z
    30c0:	98 2f       	mov	r25, r24
    30c2:	98 7f       	andi	r25, 0xF8	; 248
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	84 81       	ldd	r24, Z+4	; 0x04
    30ca:	89 2b       	or	r24, r25
    30cc:	8c 93       	st	X, r24
    30ce:	48 c1       	rjmp	.+656    	; 0x3360 <Timer_init+0x3da>
		break;

	case TIMER_ID_1:

		/* Clear Registers before do anything */
		TCCR1A &= 0x00;
    30d0:	ef e4       	ldi	r30, 0x4F	; 79
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	80 81       	ld	r24, Z
    30d6:	ef e4       	ldi	r30, 0x4F	; 79
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	10 82       	st	Z, r1
		TCCR1B &= 0x00;
    30dc:	ee e4       	ldi	r30, 0x4E	; 78
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	90 81       	ld	r25, Z
    30e2:	ee e4       	ldi	r30, 0x4E	; 78
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	10 82       	st	Z, r1

		/* 16 bit Registers */
		TCNT1  &= 0x0000;
    30e8:	ec e4       	ldi	r30, 0x4C	; 76
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	20 81       	ld	r18, Z
    30ee:	31 81       	ldd	r19, Z+1	; 0x01
    30f0:	ec e4       	ldi	r30, 0x4C	; 76
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	11 82       	std	Z+1, r1	; 0x01
    30f6:	10 82       	st	Z, r1
		OCR1A  &= 0x0000;
    30f8:	ea e4       	ldi	r30, 0x4A	; 74
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	ea e4       	ldi	r30, 0x4A	; 74
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	11 82       	std	Z+1, r1	; 0x01
    3106:	10 82       	st	Z, r1
		OCR1B  &= 0x0000;
    3108:	e8 e4       	ldi	r30, 0x48	; 72
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	20 81       	ld	r18, Z
    310e:	31 81       	ldd	r19, Z+1	; 0x01
    3110:	e8 e4       	ldi	r30, 0x48	; 72
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	11 82       	std	Z+1, r1	; 0x01
    3116:	10 82       	st	Z, r1

		/*
		 * Set Initial Value to count from it
		 * (16 bit Timer so no need to check variable size)
		*/
		TCNT1 = ( (config_Ptr -> InitialValue) );
    3118:	ac e4       	ldi	r26, 0x4C	; 76
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e9 81       	ldd	r30, Y+1	; 0x01
    311e:	fa 81       	ldd	r31, Y+2	; 0x02
    3120:	85 81       	ldd	r24, Z+5	; 0x05
    3122:	96 81       	ldd	r25, Z+6	; 0x06
    3124:	11 96       	adiw	r26, 0x01	; 1
    3126:	9c 93       	st	X, r25
    3128:	8e 93       	st	-X, r24


		/* Choose Non PWM Mode */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B) ;
    312a:	ef e4       	ldi	r30, 0x4F	; 79
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	8c e0       	ldi	r24, 0x0C	; 12
    3130:	80 83       	st	Z, r24

		/* Check if O/P needed for Output compare match */

		/* Check for OC1A */
		if((config_Ptr -> OutputPin) == OC1A_PD5){
    3132:	e9 81       	ldd	r30, Y+1	; 0x01
    3134:	fa 81       	ldd	r31, Y+2	; 0x02
    3136:	83 81       	ldd	r24, Z+3	; 0x03
    3138:	85 30       	cpi	r24, 0x05	; 5
    313a:	41 f4       	brne	.+16     	; 0x314c <Timer_init+0x1c6>

			DDRD |= (1 << OC1A_PD5);
    313c:	a1 e3       	ldi	r26, 0x31	; 49
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e1 e3       	ldi	r30, 0x31	; 49
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	80 62       	ori	r24, 0x20	; 32
    3148:	8c 93       	st	X, r24
    314a:	0c c0       	rjmp	.+24     	; 0x3164 <Timer_init+0x1de>
		}

		/* Check for OC1B */
		else if ((config_Ptr -> OutputPin) == OC1B_PD4){
    314c:	e9 81       	ldd	r30, Y+1	; 0x01
    314e:	fa 81       	ldd	r31, Y+2	; 0x02
    3150:	83 81       	ldd	r24, Z+3	; 0x03
    3152:	84 30       	cpi	r24, 0x04	; 4
    3154:	39 f4       	brne	.+14     	; 0x3164 <Timer_init+0x1de>

			DDRD |= (1 << OC1B_PD4);
    3156:	a1 e3       	ldi	r26, 0x31	; 49
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e1 e3       	ldi	r30, 0x31	; 49
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	80 61       	ori	r24, 0x10	; 16
    3162:	8c 93       	st	X, r24
		}

		/* Check which timer mode is chosen */
		if( (config_Ptr -> TimerMode ) == NORMAL_MODE) {
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	81 81       	ldd	r24, Z+1	; 0x01
    316a:	88 23       	and	r24, r24
    316c:	41 f4       	brne	.+16     	; 0x317e <Timer_init+0x1f8>

			/* Enable Normal Mode Timer Interrupt */
			TIMSK |= (1 << TOIE1);
    316e:	a9 e5       	ldi	r26, 0x59	; 89
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e9 e5       	ldi	r30, 0x59	; 89
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	84 60       	ori	r24, 0x04	; 4
    317a:	8c 93       	st	X, r24
    317c:	56 c0       	rjmp	.+172    	; 0x322a <Timer_init+0x2a4>
		}
		else if ( (config_Ptr -> TimerMode) == CTC_MODE_CHANNEL_A){
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	81 81       	ldd	r24, Z+1	; 0x01
    3184:	82 30       	cpi	r24, 0x02	; 2
    3186:	41 f5       	brne	.+80     	; 0x31d8 <Timer_init+0x252>

			/*
			 * Set Compare Match Value for Channel A
			 * (16 bit Timer so no need to check variable size)
			*/
			OCR1A  = ((config_Ptr -> CompareValue));
    3188:	aa e4       	ldi	r26, 0x4A	; 74
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	e9 81       	ldd	r30, Y+1	; 0x01
    318e:	fa 81       	ldd	r31, Y+2	; 0x02
    3190:	87 81       	ldd	r24, Z+7	; 0x07
    3192:	90 85       	ldd	r25, Z+8	; 0x08
    3194:	11 96       	adiw	r26, 0x01	; 1
    3196:	9c 93       	st	X, r25
    3198:	8e 93       	st	-X, r24

			/* Enable CTC Mode Channel A Timer Interrupt */
			TIMSK |= (1 << OCIE1A);
    319a:	a9 e5       	ldi	r26, 0x59	; 89
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e9 e5       	ldi	r30, 0x59	; 89
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	80 61       	ori	r24, 0x10	; 16
    31a6:	8c 93       	st	X, r24

			/* Choose which operation should be done when compare match occures
			 * If Channel A Chosen */
			TCCR1A = ( (TCCR1A & 0x3F) | ( (config_Ptr -> CompareMatchMode) << COM1A0) );
    31a8:	af e4       	ldi	r26, 0x4F	; 79
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	ef e4       	ldi	r30, 0x4F	; 79
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	28 2f       	mov	r18, r24
    31b4:	2f 73       	andi	r18, 0x3F	; 63
    31b6:	e9 81       	ldd	r30, Y+1	; 0x01
    31b8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	00 24       	eor	r0, r0
    31c2:	96 95       	lsr	r25
    31c4:	87 95       	ror	r24
    31c6:	07 94       	ror	r0
    31c8:	96 95       	lsr	r25
    31ca:	87 95       	ror	r24
    31cc:	07 94       	ror	r0
    31ce:	98 2f       	mov	r25, r24
    31d0:	80 2d       	mov	r24, r0
    31d2:	82 2b       	or	r24, r18
    31d4:	8c 93       	st	X, r24
    31d6:	29 c0       	rjmp	.+82     	; 0x322a <Timer_init+0x2a4>

		}

		else if ( (config_Ptr -> TimerMode) == CTC_MODE_CHANNEL_B){
    31d8:	e9 81       	ldd	r30, Y+1	; 0x01
    31da:	fa 81       	ldd	r31, Y+2	; 0x02
    31dc:	81 81       	ldd	r24, Z+1	; 0x01
    31de:	83 30       	cpi	r24, 0x03	; 3
    31e0:	21 f5       	brne	.+72     	; 0x322a <Timer_init+0x2a4>

			/*
			 * Set Compare Match Value for Channel B
			 * (16 bit Timer so no need to check variable size)
			*/
			OCR1B  = ((config_Ptr -> CompareValue));
    31e2:	a8 e4       	ldi	r26, 0x48	; 72
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    31e6:	e9 81       	ldd	r30, Y+1	; 0x01
    31e8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ea:	87 81       	ldd	r24, Z+7	; 0x07
    31ec:	90 85       	ldd	r25, Z+8	; 0x08
    31ee:	11 96       	adiw	r26, 0x01	; 1
    31f0:	9c 93       	st	X, r25
    31f2:	8e 93       	st	-X, r24

			/* Enable CTC Mode Channel B Timer Interrupt */
			TIMSK |= (1 << OCIE1B);
    31f4:	a9 e5       	ldi	r26, 0x59	; 89
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e9 e5       	ldi	r30, 0x59	; 89
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	88 60       	ori	r24, 0x08	; 8
    3200:	8c 93       	st	X, r24

			/* Choose which operation should be done when compare match occures
			 * If Channel B Chosen */
			TCCR1A = ( (TCCR1A & 0xCF) | ( (config_Ptr -> CompareMatchMode) << COM1B0) );
    3202:	af e4       	ldi	r26, 0x4F	; 79
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	ef e4       	ldi	r30, 0x4F	; 79
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	28 2f       	mov	r18, r24
    320e:	2f 7c       	andi	r18, 0xCF	; 207
    3210:	e9 81       	ldd	r30, Y+1	; 0x01
    3212:	fa 81       	ldd	r31, Y+2	; 0x02
    3214:	82 81       	ldd	r24, Z+2	; 0x02
    3216:	88 2f       	mov	r24, r24
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	82 95       	swap	r24
    321c:	92 95       	swap	r25
    321e:	90 7f       	andi	r25, 0xF0	; 240
    3220:	98 27       	eor	r25, r24
    3222:	80 7f       	andi	r24, 0xF0	; 240
    3224:	98 27       	eor	r25, r24
    3226:	82 2b       	or	r24, r18
    3228:	8c 93       	st	X, r24

		}


		/* Choose Timer Mode (Normal or CTC Mode) */
		TCCR1B = ( ( TCCR1B & 0xE7 ) |  ( ( (config_Ptr -> TimerMode) >> 1) << WGM12)  );
    322a:	ae e4       	ldi	r26, 0x4E	; 78
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	ee e4       	ldi	r30, 0x4E	; 78
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	28 2f       	mov	r18, r24
    3236:	27 7e       	andi	r18, 0xE7	; 231
    3238:	e9 81       	ldd	r30, Y+1	; 0x01
    323a:	fa 81       	ldd	r31, Y+2	; 0x02
    323c:	81 81       	ldd	r24, Z+1	; 0x01
    323e:	86 95       	lsr	r24
    3240:	88 2f       	mov	r24, r24
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	82 2b       	or	r24, r18
    3252:	8c 93       	st	X, r24

		/* Select Timer Operating Clock */
		TCCR1B = ( ( TCCR1B & 0xF8 ) | (config_Ptr -> Prescaler) );
    3254:	ae e4       	ldi	r26, 0x4E	; 78
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	ee e4       	ldi	r30, 0x4E	; 78
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	80 81       	ld	r24, Z
    325e:	98 2f       	mov	r25, r24
    3260:	98 7f       	andi	r25, 0xF8	; 248
    3262:	e9 81       	ldd	r30, Y+1	; 0x01
    3264:	fa 81       	ldd	r31, Y+2	; 0x02
    3266:	84 81       	ldd	r24, Z+4	; 0x04
    3268:	89 2b       	or	r24, r25
    326a:	8c 93       	st	X, r24
    326c:	79 c0       	rjmp	.+242    	; 0x3360 <Timer_init+0x3da>
		break;

	case TIMER_ID_2:

		/* Clear Registers before do anything */
		TCCR2 &= 0x00;
    326e:	e5 e4       	ldi	r30, 0x45	; 69
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	30 81       	ld	r19, Z
    3274:	e5 e4       	ldi	r30, 0x45	; 69
    3276:	f0 e0       	ldi	r31, 0x00	; 0
    3278:	10 82       	st	Z, r1
		TCNT2 &= 0x00;
    327a:	e4 e4       	ldi	r30, 0x44	; 68
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	e4 e4       	ldi	r30, 0x44	; 68
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	10 82       	st	Z, r1
		OCR2  &= 0x00;
    3286:	e3 e4       	ldi	r30, 0x43	; 67
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	90 81       	ld	r25, Z
    328c:	e3 e4       	ldi	r30, 0x43	; 67
    328e:	f0 e0       	ldi	r31, 0x00	; 0
    3290:	10 82       	st	Z, r1
		/*
		 * Set Initial Value to count from it
		 * (8 bit Timer so & with 0xFF to ensure
		 * start value does not exceed 255)
		*/
		TCNT2 = ((config_Ptr -> InitialValue) & 0xFF);
    3292:	a4 e4       	ldi	r26, 0x44	; 68
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e9 81       	ldd	r30, Y+1	; 0x01
    3298:	fa 81       	ldd	r31, Y+2	; 0x02
    329a:	85 81       	ldd	r24, Z+5	; 0x05
    329c:	96 81       	ldd	r25, Z+6	; 0x06
    329e:	8c 93       	st	X, r24
		/*
		 * Set Compare Match Value
		 * (8 bit Timer so & with 0xFF to ensure
		 * Compare match value does not exceed 255)
		*/
		OCR2  = ((config_Ptr -> CompareValue) & 0xFF);
    32a0:	a3 e4       	ldi	r26, 0x43	; 67
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e9 81       	ldd	r30, Y+1	; 0x01
    32a6:	fa 81       	ldd	r31, Y+2	; 0x02
    32a8:	87 81       	ldd	r24, Z+7	; 0x07
    32aa:	90 85       	ldd	r25, Z+8	; 0x08
    32ac:	8c 93       	st	X, r24

		/* Choose Non PWM Mode */
		TCCR2 = (1 << FOC2);
    32ae:	e5 e4       	ldi	r30, 0x45	; 69
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	80 83       	st	Z, r24

		/* Check which timer mode is chosen */
		if( (config_Ptr -> TimerMode ) == NORMAL_MODE) {
    32b6:	e9 81       	ldd	r30, Y+1	; 0x01
    32b8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ba:	81 81       	ldd	r24, Z+1	; 0x01
    32bc:	88 23       	and	r24, r24
    32be:	41 f4       	brne	.+16     	; 0x32d0 <Timer_init+0x34a>

		/*	 Enable Normal Mode Timer Interrupt */
			TIMSK |= (1 << TOIE2);
    32c0:	a9 e5       	ldi	r26, 0x59	; 89
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e9 e5       	ldi	r30, 0x59	; 89
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	80 64       	ori	r24, 0x40	; 64
    32cc:	8c 93       	st	X, r24
    32ce:	0c c0       	rjmp	.+24     	; 0x32e8 <Timer_init+0x362>
		}
		else if ( (config_Ptr -> TimerMode) == CTC_MODE){
    32d0:	e9 81       	ldd	r30, Y+1	; 0x01
    32d2:	fa 81       	ldd	r31, Y+2	; 0x02
    32d4:	81 81       	ldd	r24, Z+1	; 0x01
    32d6:	81 30       	cpi	r24, 0x01	; 1
    32d8:	39 f4       	brne	.+14     	; 0x32e8 <Timer_init+0x362>

		/*	 Enable CTC Mode Timer Interrupt */
			TIMSK |= (1 << OCIE2);
    32da:	a9 e5       	ldi	r26, 0x59	; 89
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	e9 e5       	ldi	r30, 0x59	; 89
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	80 68       	ori	r24, 0x80	; 128
    32e6:	8c 93       	st	X, r24
		}

		/* Choose Timer Mode (Normal or CTC Mode) */
		TCCR2 |= ( (TCCR2 & ~(0x48) ) | ( ( (config_Ptr -> TimerMode) << WGM20) ) );
    32e8:	a5 e4       	ldi	r26, 0x45	; 69
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	e5 e4       	ldi	r30, 0x45	; 69
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	38 2f       	mov	r19, r24
    32f4:	e5 e4       	ldi	r30, 0x45	; 69
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	28 2f       	mov	r18, r24
    32fc:	27 7b       	andi	r18, 0xB7	; 183
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	81 81       	ldd	r24, Z+1	; 0x01
    3304:	88 2f       	mov	r24, r24
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	00 24       	eor	r0, r0
    330a:	96 95       	lsr	r25
    330c:	87 95       	ror	r24
    330e:	07 94       	ror	r0
    3310:	96 95       	lsr	r25
    3312:	87 95       	ror	r24
    3314:	07 94       	ror	r0
    3316:	98 2f       	mov	r25, r24
    3318:	80 2d       	mov	r24, r0
    331a:	82 2b       	or	r24, r18
    331c:	83 2b       	or	r24, r19
    331e:	8c 93       	st	X, r24

		/* Choose which operation should be done when compare match occures */
		TCCR2 = ( (TCCR2 & 0xCF) | (config_Ptr -> CompareMatchMode) << COM20);
    3320:	a5 e4       	ldi	r26, 0x45	; 69
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e5 e4       	ldi	r30, 0x45	; 69
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	28 2f       	mov	r18, r24
    332c:	2f 7c       	andi	r18, 0xCF	; 207
    332e:	e9 81       	ldd	r30, Y+1	; 0x01
    3330:	fa 81       	ldd	r31, Y+2	; 0x02
    3332:	82 81       	ldd	r24, Z+2	; 0x02
    3334:	88 2f       	mov	r24, r24
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	82 95       	swap	r24
    333a:	92 95       	swap	r25
    333c:	90 7f       	andi	r25, 0xF0	; 240
    333e:	98 27       	eor	r25, r24
    3340:	80 7f       	andi	r24, 0xF0	; 240
    3342:	98 27       	eor	r25, r24
    3344:	82 2b       	or	r24, r18
    3346:	8c 93       	st	X, r24

		/* Select Timer Operating Clock */
		TCCR2 = ( (TCCR2 & 0xF8) |(config_Ptr -> Prescaler) );
    3348:	a5 e4       	ldi	r26, 0x45	; 69
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e5 e4       	ldi	r30, 0x45	; 69
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	98 2f       	mov	r25, r24
    3354:	98 7f       	andi	r25, 0xF8	; 248
    3356:	e9 81       	ldd	r30, Y+1	; 0x01
    3358:	fa 81       	ldd	r31, Y+2	; 0x02
    335a:	84 81       	ldd	r24, Z+4	; 0x04
    335c:	89 2b       	or	r24, r25
    335e:	8c 93       	st	X, r24

		break;
	}


}
    3360:	62 96       	adiw	r28, 0x12	; 18
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	cf 91       	pop	r28
    336e:	df 91       	pop	r29
    3370:	08 95       	ret

00003372 <Timer0_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer0_setCallBack(void (*f_ptr)(void)){
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	00 d0       	rcall	.+0      	; 0x3378 <Timer0_setCallBack+0x6>
    3378:	cd b7       	in	r28, 0x3d	; 61
    337a:	de b7       	in	r29, 0x3e	; 62
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTimer0 = f_ptr;
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	9a 81       	ldd	r25, Y+2	; 0x02
    3384:	90 93 5b 01 	sts	0x015B, r25
    3388:	80 93 5a 01 	sts	0x015A, r24
}
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <Timer1_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer1_setCallBack(void (*f_ptr)(void)){
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	00 d0       	rcall	.+0      	; 0x339c <Timer1_setCallBack+0x6>
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTimer1 = f_ptr;
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	9a 81       	ldd	r25, Y+2	; 0x02
    33a8:	90 93 5d 01 	sts	0x015D, r25
    33ac:	80 93 5c 01 	sts	0x015C, r24
}
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <Timer2_setCallBack>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer2_setCallBack(void (*f_ptr)(void)){
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <Timer2_setCallBack+0x6>
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrTimer2 = f_ptr;
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	90 93 5f 01 	sts	0x015F, r25
    33d0:	80 93 5e 01 	sts	0x015E, r24
}
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <Timer_stop>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void Timer_stop(uint8 timerID){
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	00 d0       	rcall	.+0      	; 0x33e4 <Timer_stop+0x6>
    33e4:	0f 92       	push	r0
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	89 83       	std	Y+1, r24	; 0x01

	switch(timerID){
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	28 2f       	mov	r18, r24
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	3b 83       	std	Y+3, r19	; 0x03
    33f4:	2a 83       	std	Y+2, r18	; 0x02
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	81 30       	cpi	r24, 0x01	; 1
    33fc:	91 05       	cpc	r25, r1
    33fe:	89 f0       	breq	.+34     	; 0x3422 <Timer_stop+0x44>
    3400:	2a 81       	ldd	r18, Y+2	; 0x02
    3402:	3b 81       	ldd	r19, Y+3	; 0x03
    3404:	22 30       	cpi	r18, 0x02	; 2
    3406:	31 05       	cpc	r19, r1
    3408:	a1 f0       	breq	.+40     	; 0x3432 <Timer_stop+0x54>
    340a:	8a 81       	ldd	r24, Y+2	; 0x02
    340c:	9b 81       	ldd	r25, Y+3	; 0x03
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	b9 f4       	brne	.+46     	; 0x3440 <Timer_stop+0x62>

	case TIMER_ID_0:

		/* Stop Clock on timer 0 */
		TCCR0 &= ~(0x07);
    3412:	a3 e5       	ldi	r26, 0x53	; 83
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	e3 e5       	ldi	r30, 0x53	; 83
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	88 7f       	andi	r24, 0xF8	; 248
    341e:	8c 93       	st	X, r24
    3420:	0f c0       	rjmp	.+30     	; 0x3440 <Timer_stop+0x62>
	break;

	case TIMER_ID_1:

		/* Stop Clock on timer 1 */
		TCCR1B &= ~(0x07);
    3422:	ae e4       	ldi	r26, 0x4E	; 78
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	ee e4       	ldi	r30, 0x4E	; 78
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	88 7f       	andi	r24, 0xF8	; 248
    342e:	8c 93       	st	X, r24
    3430:	07 c0       	rjmp	.+14     	; 0x3440 <Timer_stop+0x62>
	break;

	case TIMER_ID_2:

		/* Stop Clock on timer 0 */
		TCCR2 &= ~(0x07);
    3432:	a5 e4       	ldi	r26, 0x45	; 69
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e5 e4       	ldi	r30, 0x45	; 69
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	88 7f       	andi	r24, 0xF8	; 248
    343e:	8c 93       	st	X, r24
	break;
	}

}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <__vector_11>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(USART_RXC_vect){
    344c:	1f 92       	push	r1
    344e:	0f 92       	push	r0
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	0f 92       	push	r0
    3454:	11 24       	eor	r1, r1
    3456:	2f 93       	push	r18
    3458:	3f 93       	push	r19
    345a:	4f 93       	push	r20
    345c:	5f 93       	push	r21
    345e:	6f 93       	push	r22
    3460:	7f 93       	push	r23
    3462:	8f 93       	push	r24
    3464:	9f 93       	push	r25
    3466:	af 93       	push	r26
    3468:	bf 93       	push	r27
    346a:	ef 93       	push	r30
    346c:	ff 93       	push	r31
    346e:	df 93       	push	r29
    3470:	cf 93       	push	r28
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrUartRx != NULL_PTR){
    3476:	80 91 60 01 	lds	r24, 0x0160
    347a:	90 91 61 01 	lds	r25, 0x0161
    347e:	00 97       	sbiw	r24, 0x00	; 0
    3480:	29 f0       	breq	.+10     	; 0x348c <__vector_11+0x40>

		 /* Call the Call Back function for UART Rx Interrupt */
		(*g_callBackPtrUartRx)();
    3482:	e0 91 60 01 	lds	r30, 0x0160
    3486:	f0 91 61 01 	lds	r31, 0x0161
    348a:	09 95       	icall
	}
}
    348c:	cf 91       	pop	r28
    348e:	df 91       	pop	r29
    3490:	ff 91       	pop	r31
    3492:	ef 91       	pop	r30
    3494:	bf 91       	pop	r27
    3496:	af 91       	pop	r26
    3498:	9f 91       	pop	r25
    349a:	8f 91       	pop	r24
    349c:	7f 91       	pop	r23
    349e:	6f 91       	pop	r22
    34a0:	5f 91       	pop	r21
    34a2:	4f 91       	pop	r20
    34a4:	3f 91       	pop	r19
    34a6:	2f 91       	pop	r18
    34a8:	0f 90       	pop	r0
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	0f 90       	pop	r0
    34ae:	1f 90       	pop	r1
    34b0:	18 95       	reti

000034b2 <__vector_13>:

ISR(USART_TXC_vect){
    34b2:	1f 92       	push	r1
    34b4:	0f 92       	push	r0
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	0f 92       	push	r0
    34ba:	11 24       	eor	r1, r1
    34bc:	2f 93       	push	r18
    34be:	3f 93       	push	r19
    34c0:	4f 93       	push	r20
    34c2:	5f 93       	push	r21
    34c4:	6f 93       	push	r22
    34c6:	7f 93       	push	r23
    34c8:	8f 93       	push	r24
    34ca:	9f 93       	push	r25
    34cc:	af 93       	push	r26
    34ce:	bf 93       	push	r27
    34d0:	ef 93       	push	r30
    34d2:	ff 93       	push	r31
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Check if the Pointer not a Null one
	 * To avoid segmentation fault
	*/
	if(g_callBackPtrUartRx != NULL_PTR){
    34dc:	80 91 60 01 	lds	r24, 0x0160
    34e0:	90 91 61 01 	lds	r25, 0x0161
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	29 f0       	breq	.+10     	; 0x34f2 <__vector_13+0x40>

		 /* Call the Call Back function for UART Tx Interrupt */
		(*g_callBackPtrUartTx)();
    34e8:	e0 91 62 01 	lds	r30, 0x0162
    34ec:	f0 91 63 01 	lds	r31, 0x0163
    34f0:	09 95       	icall
	}
}
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	ff 91       	pop	r31
    34f8:	ef 91       	pop	r30
    34fa:	bf 91       	pop	r27
    34fc:	af 91       	pop	r26
    34fe:	9f 91       	pop	r25
    3500:	8f 91       	pop	r24
    3502:	7f 91       	pop	r23
    3504:	6f 91       	pop	r22
    3506:	5f 91       	pop	r21
    3508:	4f 91       	pop	r20
    350a:	3f 91       	pop	r19
    350c:	2f 91       	pop	r18
    350e:	0f 90       	pop	r0
    3510:	0f be       	out	0x3f, r0	; 63
    3512:	0f 90       	pop	r0
    3514:	1f 90       	pop	r1
    3516:	18 95       	reti

00003518 <UART_init>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_init(const UART_ConfigType* config_Ptr)
{
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	27 97       	sbiw	r28, 0x07	; 7
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	de bf       	out	0x3e, r29	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	cd bf       	out	0x3d, r28	; 61
    3530:	9a 83       	std	Y+2, r25	; 0x02
    3532:	89 83       	std	Y+1, r24	; 0x01
	/* Initialize All registers with zeros */
	UCSRA &= 0x00;
    3534:	eb e2       	ldi	r30, 0x2B	; 43
    3536:	f0 e0       	ldi	r31, 0x00	; 0
    3538:	80 81       	ld	r24, Z
    353a:	eb e2       	ldi	r30, 0x2B	; 43
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	10 82       	st	Z, r1
	UCSRB &= 0x00;
    3540:	ea e2       	ldi	r30, 0x2A	; 42
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	ea e2       	ldi	r30, 0x2A	; 42
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	10 82       	st	Z, r1
	UCSRC &= 0x00;
    354c:	e0 e4       	ldi	r30, 0x40	; 64
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	e0 e4       	ldi	r30, 0x40	; 64
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	10 82       	st	Z, r1
	UBRRH &= 0x00;
    3558:	e0 e4       	ldi	r30, 0x40	; 64
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	e0 e4       	ldi	r30, 0x40	; 64
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	10 82       	st	Z, r1
	UBRRL &= 0x00;
    3564:	e9 e2       	ldi	r30, 0x29	; 41
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	e9 e2       	ldi	r30, 0x29	; 41
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	10 82       	st	Z, r1

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    3570:	eb e2       	ldi	r30, 0x2B	; 43
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	82 e0       	ldi	r24, 0x02	; 2
    3576:	80 83       	st	Z, r24

	/* Enable UART Tx, Rx  */
	UCSRB = (1 << RXEN) | (1 << TXEN);
    3578:	ea e2       	ldi	r30, 0x2A	; 42
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	88 e1       	ldi	r24, 0x18	; 24
    357e:	80 83       	st	Z, r24

	/* Chose Operating Mode (Tx Interrupt, Rx Interrupt, both, or None) */
	UCSRB = ( (UCSRB & 0x3F) | ( (config_Ptr -> InterruptMode) << TXCIE) );
    3580:	aa e2       	ldi	r26, 0x2A	; 42
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	ea e2       	ldi	r30, 0x2A	; 42
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	28 2f       	mov	r18, r24
    358c:	2f 73       	andi	r18, 0x3F	; 63
    358e:	e9 81       	ldd	r30, Y+1	; 0x01
    3590:	fa 81       	ldd	r31, Y+2	; 0x02
    3592:	80 81       	ld	r24, Z
    3594:	88 2f       	mov	r24, r24
    3596:	90 e0       	ldi	r25, 0x00	; 0
    3598:	00 24       	eor	r0, r0
    359a:	96 95       	lsr	r25
    359c:	87 95       	ror	r24
    359e:	07 94       	ror	r0
    35a0:	96 95       	lsr	r25
    35a2:	87 95       	ror	r24
    35a4:	07 94       	ror	r0
    35a6:	98 2f       	mov	r25, r24
    35a8:	80 2d       	mov	r24, r0
    35aa:	82 2b       	or	r24, r18
    35ac:	8c 93       	st	X, r24

	/*
	 * Enable UCSRC Register
	 * Choose Asyncronous Mode
	*/
	UCSRC = (1 << URSEL);
    35ae:	e0 e4       	ldi	r30, 0x40	; 64
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 e8       	ldi	r24, 0x80	; 128
    35b4:	80 83       	st	Z, r24

	/* Choose Parity Mode (Disabled, Even, or odd parity) */
	UCSRC = ( (UCSRC & 0xCF) | ( (config_Ptr -> ParityMode) << UPM0) );
    35b6:	a0 e4       	ldi	r26, 0x40	; 64
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e0 e4       	ldi	r30, 0x40	; 64
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	28 2f       	mov	r18, r24
    35c2:	2f 7c       	andi	r18, 0xCF	; 207
    35c4:	e9 81       	ldd	r30, Y+1	; 0x01
    35c6:	fa 81       	ldd	r31, Y+2	; 0x02
    35c8:	82 81       	ldd	r24, Z+2	; 0x02
    35ca:	88 2f       	mov	r24, r24
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	82 95       	swap	r24
    35d0:	92 95       	swap	r25
    35d2:	90 7f       	andi	r25, 0xF0	; 240
    35d4:	98 27       	eor	r25, r24
    35d6:	80 7f       	andi	r24, 0xF0	; 240
    35d8:	98 27       	eor	r25, r24
    35da:	82 2b       	or	r24, r18
    35dc:	8c 93       	st	X, r24

	/* Choose Stop bits number (1 bit or 2 bits) */
	UCSRC = ( (UCSRC & 0xF7) | ( (config_Ptr -> StopBit) << USBS) );
    35de:	a0 e4       	ldi	r26, 0x40	; 64
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	e0 e4       	ldi	r30, 0x40	; 64
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	28 2f       	mov	r18, r24
    35ea:	27 7f       	andi	r18, 0xF7	; 247
    35ec:	e9 81       	ldd	r30, Y+1	; 0x01
    35ee:	fa 81       	ldd	r31, Y+2	; 0x02
    35f0:	81 81       	ldd	r24, Z+1	; 0x01
    35f2:	88 2f       	mov	r24, r24
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	88 0f       	add	r24, r24
    35f8:	99 1f       	adc	r25, r25
    35fa:	88 0f       	add	r24, r24
    35fc:	99 1f       	adc	r25, r25
    35fe:	88 0f       	add	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	82 2b       	or	r24, r18
    3604:	8c 93       	st	X, r24

	/* Choose 8 bit mode */
	UCSRC = ( (UCSRC & 0xF9) | (EIGHT_BIT_CHAR_SIZE << UCSZ0) );
    3606:	a0 e4       	ldi	r26, 0x40	; 64
    3608:	b0 e0       	ldi	r27, 0x00	; 0
    360a:	e0 e4       	ldi	r30, 0x40	; 64
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	80 81       	ld	r24, Z
    3610:	86 60       	ori	r24, 0x06	; 6
    3612:	8c 93       	st	X, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ( ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1) >> 8 );
    3614:	00 e4       	ldi	r16, 0x40	; 64
    3616:	10 e0       	ldi	r17, 0x00	; 0
    3618:	e9 81       	ldd	r30, Y+1	; 0x01
    361a:	fa 81       	ldd	r31, Y+2	; 0x02
    361c:	83 81       	ldd	r24, Z+3	; 0x03
    361e:	94 81       	ldd	r25, Z+4	; 0x04
    3620:	a5 81       	ldd	r26, Z+5	; 0x05
    3622:	b6 81       	ldd	r27, Z+6	; 0x06
    3624:	88 0f       	add	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	aa 1f       	adc	r26, r26
    362a:	bb 1f       	adc	r27, r27
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	88 0f       	add	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	aa 1f       	adc	r26, r26
    363a:	bb 1f       	adc	r27, r27
    363c:	9c 01       	movw	r18, r24
    363e:	ad 01       	movw	r20, r26
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	92 e1       	ldi	r25, 0x12	; 18
    3644:	aa e7       	ldi	r26, 0x7A	; 122
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 17 1c 	call	0x382e	; 0x382e <__udivmodsi4>
    3650:	da 01       	movw	r26, r20
    3652:	c9 01       	movw	r24, r18
    3654:	01 97       	sbiw	r24, 0x01	; 1
    3656:	a1 09       	sbc	r26, r1
    3658:	b1 09       	sbc	r27, r1
    365a:	89 2f       	mov	r24, r25
    365c:	9a 2f       	mov	r25, r26
    365e:	ab 2f       	mov	r26, r27
    3660:	bb 27       	eor	r27, r27
    3662:	f8 01       	movw	r30, r16
    3664:	80 83       	st	Z, r24
	UBRRL = ( ( (F_CPU / ( (config_Ptr -> BaudRate)* 8UL) ) ) - 1);
    3666:	09 e2       	ldi	r16, 0x29	; 41
    3668:	10 e0       	ldi	r17, 0x00	; 0
    366a:	e9 81       	ldd	r30, Y+1	; 0x01
    366c:	fa 81       	ldd	r31, Y+2	; 0x02
    366e:	83 81       	ldd	r24, Z+3	; 0x03
    3670:	94 81       	ldd	r25, Z+4	; 0x04
    3672:	a5 81       	ldd	r26, Z+5	; 0x05
    3674:	b6 81       	ldd	r27, Z+6	; 0x06
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	aa 1f       	adc	r26, r26
    367c:	bb 1f       	adc	r27, r27
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	aa 1f       	adc	r26, r26
    3684:	bb 1f       	adc	r27, r27
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	aa 1f       	adc	r26, r26
    368c:	bb 1f       	adc	r27, r27
    368e:	9c 01       	movw	r18, r24
    3690:	ad 01       	movw	r20, r26
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	92 e1       	ldi	r25, 0x12	; 18
    3696:	aa e7       	ldi	r26, 0x7A	; 122
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 17 1c 	call	0x382e	; 0x382e <__udivmodsi4>
    36a2:	da 01       	movw	r26, r20
    36a4:	c9 01       	movw	r24, r18
    36a6:	81 50       	subi	r24, 0x01	; 1
    36a8:	f8 01       	movw	r30, r16
    36aa:	80 83       	st	Z, r24
}
    36ac:	27 96       	adiw	r28, 0x07	; 7
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	cf 91       	pop	r28
    36ba:	df 91       	pop	r29
    36bc:	1f 91       	pop	r17
    36be:	0f 91       	pop	r16
    36c0:	08 95       	ret

000036c2 <UART_setCallBackTx>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_setCallBackTx(void (*f_ptr)(void)){
    36c2:	df 93       	push	r29
    36c4:	cf 93       	push	r28
    36c6:	00 d0       	rcall	.+0      	; 0x36c8 <UART_setCallBackTx+0x6>
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
    36cc:	9a 83       	std	Y+2, r25	; 0x02
    36ce:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrUartTx = f_ptr;
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	9a 81       	ldd	r25, Y+2	; 0x02
    36d4:	90 93 63 01 	sts	0x0163, r25
    36d8:	80 93 62 01 	sts	0x0162, r24
}
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <UART_setCallBackRx>:

 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_setCallBackRx(void (*f_ptr)(void)){
    36e6:	df 93       	push	r29
    36e8:	cf 93       	push	r28
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <UART_setCallBackRx+0x6>
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtrUartRx = f_ptr;
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	90 93 61 01 	sts	0x0161, r25
    36fc:	80 93 60 01 	sts	0x0160, r24
}
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
    3704:	cf 91       	pop	r28
    3706:	df 91       	pop	r29
    3708:	08 95       	ret

0000370a <UART_sendByte>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_sendByte(const uint8 data)
{
    370a:	df 93       	push	r29
    370c:	cf 93       	push	r28
    370e:	0f 92       	push	r0
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3716:	eb e2       	ldi	r30, 0x2B	; 43
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	80 81       	ld	r24, Z
    371c:	88 2f       	mov	r24, r24
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	80 72       	andi	r24, 0x20	; 32
    3722:	90 70       	andi	r25, 0x00	; 0
    3724:	00 97       	sbiw	r24, 0x00	; 0
    3726:	b9 f3       	breq	.-18     	; 0x3716 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    3728:	ec e2       	ldi	r30, 0x2C	; 44
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3730:	0f 90       	pop	r0
    3732:	cf 91       	pop	r28
    3734:	df 91       	pop	r29
    3736:	08 95       	ret

00003738 <UART_recieveByte>:
 [in/out]			None

 [Returns]:			Byte recived by UART
**********************************************************************************/
uint8 UART_recieveByte(void)
{
    3738:	df 93       	push	r29
    373a:	cf 93       	push	r28
    373c:	cd b7       	in	r28, 0x3d	; 61
    373e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3740:	eb e2       	ldi	r30, 0x2B	; 43
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	88 23       	and	r24, r24
    3748:	dc f7       	brge	.-10     	; 0x3740 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    374a:	ec e2       	ldi	r30, 0x2C	; 44
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
}
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	08 95       	ret

00003756 <UART_sendString>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_sendString(const uint8 *Str)
{
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	00 d0       	rcall	.+0      	; 0x375c <UART_sendString+0x6>
    375c:	0f 92       	push	r0
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	9b 83       	std	Y+3, r25	; 0x03
    3764:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3766:	19 82       	std	Y+1, r1	; 0x01
    3768:	0e c0       	rjmp	.+28     	; 0x3786 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    376a:	89 81       	ldd	r24, Y+1	; 0x01
    376c:	28 2f       	mov	r18, r24
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	9b 81       	ldd	r25, Y+3	; 0x03
    3774:	fc 01       	movw	r30, r24
    3776:	e2 0f       	add	r30, r18
    3778:	f3 1f       	adc	r31, r19
    377a:	80 81       	ld	r24, Z
    377c:	0e 94 85 1b 	call	0x370a	; 0x370a <UART_sendByte>
		i++;
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	8f 5f       	subi	r24, 0xFF	; 255
    3784:	89 83       	std	Y+1, r24	; 0x01
 [Returns]:			None
**********************************************************************************/
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	28 2f       	mov	r18, r24
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	8a 81       	ldd	r24, Y+2	; 0x02
    378e:	9b 81       	ldd	r25, Y+3	; 0x03
    3790:	fc 01       	movw	r30, r24
    3792:	e2 0f       	add	r30, r18
    3794:	f3 1f       	adc	r31, r19
    3796:	80 81       	ld	r24, Z
    3798:	88 23       	and	r24, r24
    379a:	39 f7       	brne	.-50     	; 0x376a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <UART_receiveString>:
 [in/out]			None

 [Returns]:			None
**********************************************************************************/
void UART_receiveString(uint8 *Str)
{
    37a8:	0f 93       	push	r16
    37aa:	1f 93       	push	r17
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	00 d0       	rcall	.+0      	; 0x37b2 <UART_receiveString+0xa>
    37b2:	0f 92       	push	r0
    37b4:	cd b7       	in	r28, 0x3d	; 61
    37b6:	de b7       	in	r29, 0x3e	; 62
    37b8:	9b 83       	std	Y+3, r25	; 0x03
    37ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37bc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	28 2f       	mov	r18, r24
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	9b 81       	ldd	r25, Y+3	; 0x03
    37c8:	8c 01       	movw	r16, r24
    37ca:	02 0f       	add	r16, r18
    37cc:	13 1f       	adc	r17, r19
    37ce:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    37d2:	f8 01       	movw	r30, r16
    37d4:	80 83       	st	Z, r24
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	8f 5f       	subi	r24, 0xFF	; 255
    37dc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	28 2f       	mov	r18, r24
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	9b 81       	ldd	r25, Y+3	; 0x03
    37e8:	8c 01       	movw	r16, r24
    37ea:	02 0f       	add	r16, r18
    37ec:	13 1f       	adc	r17, r19
    37ee:	0e 94 9c 1b 	call	0x3738	; 0x3738 <UART_recieveByte>
    37f2:	f8 01       	movw	r30, r16
    37f4:	80 83       	st	Z, r24
**********************************************************************************/
void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	8a 81       	ldd	r24, Y+2	; 0x02
    37fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3800:	fc 01       	movw	r30, r24
    3802:	e2 0f       	add	r30, r18
    3804:	f3 1f       	adc	r31, r19
    3806:	80 81       	ld	r24, Z
    3808:	83 32       	cpi	r24, 0x23	; 35
    380a:	31 f7       	brne	.-52     	; 0x37d8 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	28 2f       	mov	r18, r24
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	9b 81       	ldd	r25, Y+3	; 0x03
    3816:	fc 01       	movw	r30, r24
    3818:	e2 0f       	add	r30, r18
    381a:	f3 1f       	adc	r31, r19
    381c:	10 82       	st	Z, r1
}
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	1f 91       	pop	r17
    382a:	0f 91       	pop	r16
    382c:	08 95       	ret

0000382e <__udivmodsi4>:
    382e:	a1 e2       	ldi	r26, 0x21	; 33
    3830:	1a 2e       	mov	r1, r26
    3832:	aa 1b       	sub	r26, r26
    3834:	bb 1b       	sub	r27, r27
    3836:	fd 01       	movw	r30, r26
    3838:	0d c0       	rjmp	.+26     	; 0x3854 <__udivmodsi4_ep>

0000383a <__udivmodsi4_loop>:
    383a:	aa 1f       	adc	r26, r26
    383c:	bb 1f       	adc	r27, r27
    383e:	ee 1f       	adc	r30, r30
    3840:	ff 1f       	adc	r31, r31
    3842:	a2 17       	cp	r26, r18
    3844:	b3 07       	cpc	r27, r19
    3846:	e4 07       	cpc	r30, r20
    3848:	f5 07       	cpc	r31, r21
    384a:	20 f0       	brcs	.+8      	; 0x3854 <__udivmodsi4_ep>
    384c:	a2 1b       	sub	r26, r18
    384e:	b3 0b       	sbc	r27, r19
    3850:	e4 0b       	sbc	r30, r20
    3852:	f5 0b       	sbc	r31, r21

00003854 <__udivmodsi4_ep>:
    3854:	66 1f       	adc	r22, r22
    3856:	77 1f       	adc	r23, r23
    3858:	88 1f       	adc	r24, r24
    385a:	99 1f       	adc	r25, r25
    385c:	1a 94       	dec	r1
    385e:	69 f7       	brne	.-38     	; 0x383a <__udivmodsi4_loop>
    3860:	60 95       	com	r22
    3862:	70 95       	com	r23
    3864:	80 95       	com	r24
    3866:	90 95       	com	r25
    3868:	9b 01       	movw	r18, r22
    386a:	ac 01       	movw	r20, r24
    386c:	bd 01       	movw	r22, r26
    386e:	cf 01       	movw	r24, r30
    3870:	08 95       	ret

00003872 <__prologue_saves__>:
    3872:	2f 92       	push	r2
    3874:	3f 92       	push	r3
    3876:	4f 92       	push	r4
    3878:	5f 92       	push	r5
    387a:	6f 92       	push	r6
    387c:	7f 92       	push	r7
    387e:	8f 92       	push	r8
    3880:	9f 92       	push	r9
    3882:	af 92       	push	r10
    3884:	bf 92       	push	r11
    3886:	cf 92       	push	r12
    3888:	df 92       	push	r13
    388a:	ef 92       	push	r14
    388c:	ff 92       	push	r15
    388e:	0f 93       	push	r16
    3890:	1f 93       	push	r17
    3892:	cf 93       	push	r28
    3894:	df 93       	push	r29
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
    389a:	ca 1b       	sub	r28, r26
    389c:	db 0b       	sbc	r29, r27
    389e:	0f b6       	in	r0, 0x3f	; 63
    38a0:	f8 94       	cli
    38a2:	de bf       	out	0x3e, r29	; 62
    38a4:	0f be       	out	0x3f, r0	; 63
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	09 94       	ijmp

000038aa <__epilogue_restores__>:
    38aa:	2a 88       	ldd	r2, Y+18	; 0x12
    38ac:	39 88       	ldd	r3, Y+17	; 0x11
    38ae:	48 88       	ldd	r4, Y+16	; 0x10
    38b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    38b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    38b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    38b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    38b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    38ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    38bc:	b9 84       	ldd	r11, Y+9	; 0x09
    38be:	c8 84       	ldd	r12, Y+8	; 0x08
    38c0:	df 80       	ldd	r13, Y+7	; 0x07
    38c2:	ee 80       	ldd	r14, Y+6	; 0x06
    38c4:	fd 80       	ldd	r15, Y+5	; 0x05
    38c6:	0c 81       	ldd	r16, Y+4	; 0x04
    38c8:	1b 81       	ldd	r17, Y+3	; 0x03
    38ca:	aa 81       	ldd	r26, Y+2	; 0x02
    38cc:	b9 81       	ldd	r27, Y+1	; 0x01
    38ce:	ce 0f       	add	r28, r30
    38d0:	d1 1d       	adc	r29, r1
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	ed 01       	movw	r28, r26
    38de:	08 95       	ret

000038e0 <itoa>:
    38e0:	fb 01       	movw	r30, r22
    38e2:	9f 01       	movw	r18, r30
    38e4:	e8 94       	clt
    38e6:	42 30       	cpi	r20, 0x02	; 2
    38e8:	c4 f0       	brlt	.+48     	; 0x391a <itoa+0x3a>
    38ea:	45 32       	cpi	r20, 0x25	; 37
    38ec:	b4 f4       	brge	.+44     	; 0x391a <itoa+0x3a>
    38ee:	4a 30       	cpi	r20, 0x0A	; 10
    38f0:	29 f4       	brne	.+10     	; 0x38fc <itoa+0x1c>
    38f2:	97 fb       	bst	r25, 7
    38f4:	1e f4       	brtc	.+6      	; 0x38fc <itoa+0x1c>
    38f6:	90 95       	com	r25
    38f8:	81 95       	neg	r24
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	64 2f       	mov	r22, r20
    38fe:	77 27       	eor	r23, r23
    3900:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodhi4>
    3904:	80 5d       	subi	r24, 0xD0	; 208
    3906:	8a 33       	cpi	r24, 0x3A	; 58
    3908:	0c f0       	brlt	.+2      	; 0x390c <itoa+0x2c>
    390a:	89 5d       	subi	r24, 0xD9	; 217
    390c:	81 93       	st	Z+, r24
    390e:	cb 01       	movw	r24, r22
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	a1 f7       	brne	.-24     	; 0x38fc <itoa+0x1c>
    3914:	16 f4       	brtc	.+4      	; 0x391a <itoa+0x3a>
    3916:	5d e2       	ldi	r21, 0x2D	; 45
    3918:	51 93       	st	Z+, r21
    391a:	10 82       	st	Z, r1
    391c:	c9 01       	movw	r24, r18
    391e:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <strrev>

00003922 <strrev>:
    3922:	dc 01       	movw	r26, r24
    3924:	fc 01       	movw	r30, r24
    3926:	67 2f       	mov	r22, r23
    3928:	71 91       	ld	r23, Z+
    392a:	77 23       	and	r23, r23
    392c:	e1 f7       	brne	.-8      	; 0x3926 <strrev+0x4>
    392e:	32 97       	sbiw	r30, 0x02	; 2
    3930:	04 c0       	rjmp	.+8      	; 0x393a <strrev+0x18>
    3932:	7c 91       	ld	r23, X
    3934:	6d 93       	st	X+, r22
    3936:	70 83       	st	Z, r23
    3938:	62 91       	ld	r22, -Z
    393a:	ae 17       	cp	r26, r30
    393c:	bf 07       	cpc	r27, r31
    393e:	c8 f3       	brcs	.-14     	; 0x3932 <strrev+0x10>
    3940:	08 95       	ret

00003942 <__udivmodhi4>:
    3942:	aa 1b       	sub	r26, r26
    3944:	bb 1b       	sub	r27, r27
    3946:	51 e1       	ldi	r21, 0x11	; 17
    3948:	07 c0       	rjmp	.+14     	; 0x3958 <__udivmodhi4_ep>

0000394a <__udivmodhi4_loop>:
    394a:	aa 1f       	adc	r26, r26
    394c:	bb 1f       	adc	r27, r27
    394e:	a6 17       	cp	r26, r22
    3950:	b7 07       	cpc	r27, r23
    3952:	10 f0       	brcs	.+4      	; 0x3958 <__udivmodhi4_ep>
    3954:	a6 1b       	sub	r26, r22
    3956:	b7 0b       	sbc	r27, r23

00003958 <__udivmodhi4_ep>:
    3958:	88 1f       	adc	r24, r24
    395a:	99 1f       	adc	r25, r25
    395c:	5a 95       	dec	r21
    395e:	a9 f7       	brne	.-22     	; 0x394a <__udivmodhi4_loop>
    3960:	80 95       	com	r24
    3962:	90 95       	com	r25
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	08 95       	ret

0000396a <_exit>:
    396a:	f8 94       	cli

0000396c <__stop_program>:
    396c:	ff cf       	rjmp	.-2      	; 0x396c <__stop_program>
